{"text": " Our next big challenge is to figure out what sort of underlying abstraction we can use to track set membership. So what I mean by that is let's say we have the universe in the current state. 0, 1, 2, and 4 are all 1 set. 3 and 5 are in the same set and 6 is in a set by itself. What instance variables will your data structure have to keep track of who is in which set? So I'd like you to pause the video, think about that a little and then I'll give you one possible answer. So the most popular answer that students seem to give me is why don't we just make a list of sets of integers. That's very intuitive. So in Java, that would be a list of set of integer, where list and set refer to the Java interfaces we saw in a previous lecture. So this is a really intuitive idea and it seems great at first. However, once you start thinking about what the is connected and connect operations would actually look like, you'll see that it could be very slow and kind of complicated. So let's imagine that we have a situation where nothing is connected yet. So the list of sets of integers is a list with a set containing only 0, a set containing only 1, a set containing only 2, and so forth. So if we wanted to do something like, is connected 5, 6 here, that means we need to look and say, is 5 in this set? Nope, that's 0, is 5 in this set? Nope, 1 and so forth. And so we don't know where anything is, and in that case we basically have to look at 5 sets to find, or sorry, 6 sets to find 5, and then 7 sets to find 6. So the overall runtime, we're basically scanning through everything twice and that runtime would be theta in. So that's actually pretty bad compared to what we will be able to achieve later. Okay. Now it turns out the code will also be fairly complex, and that's going to be another downside. If you actually turn to write it, it'd be kind of annoying. So to summarize this first approach, which I will call list of sets, ds, or ds, is short for, this joint sets. If we're using a list of sets as our underlying abstraction, then we have some issues. So let's go through the runtime table, because we're going to keep adding rows to this table as we improve our data structure, and I'll say that the constructor for this list of sets approach. It is always going to have order of growth in no matter what, and I didn't prove that, but I'm saying it's theta in, and you can think of it this way. If I create a set, or so if I create a list, and then I create in sets, and I add them to that list, that should be theta in. Now, connect, and is connected, we saw the worst case for is connected, and it turns out the analysis for connect is almost the same thing. So the worst case for these operations is theta in, but we didn't think about any other cases. They might be better, maybe there's some situations where it's actually much faster. So what I'm going to do in the table is say, they go with them, because remember that O means less than or equal. So we know that we saw an example where it's theta in, that was the worst case, but maybe it's better, so we'll just say they go again. With more analysis, maybe we could change this, but we haven't. So this approach, it is complicated, and since that if you tried to actually write the code, it would be a pain, and it is also slow compared to what else is possible. And here's the most important lesson, right, is that by making that very first choice by saying, we're going to use a list of sets, we've actually doomed ourselves immediately to having complicated code that is also slow, and that's the bad thing. And that's actually a lesson that I want you to take to heart. When you're trying to implement some high level data structure using basic building blocks, the choice of the building blocks that you use, your instance variables, will deeply affect the complexity of your code and its performance in ways that are just so important. So here's an alternate approach. A more traditional, but not quite good yet approach, is let's use a list of integers, instead of a list of sets of integers. What does that list represent? Well, in each entry of that array, we will store the set number of the given item. So for example, 0, 1, 2, and 4 all belong to set number four, 3 and 5 belong to set number five and 6 belongs to set six. Now we should note that the specific number I here does, that I picked doesn't matter. So this could have been 9, 9, 9, and 9, and that would be totally fine for the number 0, 1, 2, and 4, but I picked 4 here because it seems to make a little more sense. When we do a connect operation, well, then all we do, if we try and connect say 2 and 3, we make sure that all of the items that had the set ID that are equal to 2, now have the set ID that the item 3 had. So in this case, we see that 4 items turn into 5. So that's it. And so this approach, the really nice thing about it is that while connect is still costly because we have to set a bunch of numbers is connected will be much faster. I'm not going to go through this code in detail, but just to give you a sense of what it would actually look like in Java, if we have such an ID array, then the is connected operations, I'm sorry, sorry, she's a double, sorry. So when I do is connected, I say ID of P is that equal to ID of Q, that's it, that's all I need to do, so this is much faster, so that's going to be constant time. By contrast, the connect operation shown here, where we have to set a bunch of items potentially, and in this case, it is going to be slow. In fact, it will always be data in, if you look at the code, there is a for loop that will always go through every single item of the array, and so the runtime here is data in. So here, this alternate approach, which I'm calling quick find, has the advantage that it's is connected operation is data 1, its connect operation is equally bad as the worst case for list of sets, so it's data in, and the constructor is still data in. So this is an improvement, right? We have a much faster is connected operation, but we will see we'll be able to do even better. And so do that, we're going to have to do something even more radical than what we've done so far, and we'll do that in the next video.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.0, "text": " Our next big challenge is to figure out what sort of underlying abstraction we can use to track set membership.", "tokens": [50364, 2621, 958, 955, 3430, 307, 281, 2573, 484, 437, 1333, 295, 14217, 37765, 321, 393, 764, 281, 2837, 992, 16560, 13, 50764, 50764, 407, 437, 286, 914, 538, 300, 307, 718, 311, 584, 321, 362, 264, 6445, 294, 264, 2190, 1785, 13, 51064, 51064, 1958, 11, 502, 11, 568, 11, 293, 1017, 366, 439, 502, 992, 13, 51214, 51214, 805, 293, 1025, 366, 294, 264, 912, 992, 293, 1386, 307, 294, 257, 992, 538, 2564, 13, 51414, 51414, 708, 5197, 9102, 486, 428, 1412, 3877, 362, 281, 1066, 2837, 295, 567, 307, 294, 597, 992, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1334736728668213, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.030064556747674942}, {"id": 1, "seek": 0, "start": 8.0, "end": 14.0, "text": " So what I mean by that is let's say we have the universe in the current state.", "tokens": [50364, 2621, 958, 955, 3430, 307, 281, 2573, 484, 437, 1333, 295, 14217, 37765, 321, 393, 764, 281, 2837, 992, 16560, 13, 50764, 50764, 407, 437, 286, 914, 538, 300, 307, 718, 311, 584, 321, 362, 264, 6445, 294, 264, 2190, 1785, 13, 51064, 51064, 1958, 11, 502, 11, 568, 11, 293, 1017, 366, 439, 502, 992, 13, 51214, 51214, 805, 293, 1025, 366, 294, 264, 912, 992, 293, 1386, 307, 294, 257, 992, 538, 2564, 13, 51414, 51414, 708, 5197, 9102, 486, 428, 1412, 3877, 362, 281, 1066, 2837, 295, 567, 307, 294, 597, 992, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1334736728668213, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.030064556747674942}, {"id": 2, "seek": 0, "start": 14.0, "end": 17.0, "text": " 0, 1, 2, and 4 are all 1 set.", "tokens": [50364, 2621, 958, 955, 3430, 307, 281, 2573, 484, 437, 1333, 295, 14217, 37765, 321, 393, 764, 281, 2837, 992, 16560, 13, 50764, 50764, 407, 437, 286, 914, 538, 300, 307, 718, 311, 584, 321, 362, 264, 6445, 294, 264, 2190, 1785, 13, 51064, 51064, 1958, 11, 502, 11, 568, 11, 293, 1017, 366, 439, 502, 992, 13, 51214, 51214, 805, 293, 1025, 366, 294, 264, 912, 992, 293, 1386, 307, 294, 257, 992, 538, 2564, 13, 51414, 51414, 708, 5197, 9102, 486, 428, 1412, 3877, 362, 281, 1066, 2837, 295, 567, 307, 294, 597, 992, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1334736728668213, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.030064556747674942}, {"id": 3, "seek": 0, "start": 17.0, "end": 21.0, "text": " 3 and 5 are in the same set and 6 is in a set by itself.", "tokens": [50364, 2621, 958, 955, 3430, 307, 281, 2573, 484, 437, 1333, 295, 14217, 37765, 321, 393, 764, 281, 2837, 992, 16560, 13, 50764, 50764, 407, 437, 286, 914, 538, 300, 307, 718, 311, 584, 321, 362, 264, 6445, 294, 264, 2190, 1785, 13, 51064, 51064, 1958, 11, 502, 11, 568, 11, 293, 1017, 366, 439, 502, 992, 13, 51214, 51214, 805, 293, 1025, 366, 294, 264, 912, 992, 293, 1386, 307, 294, 257, 992, 538, 2564, 13, 51414, 51414, 708, 5197, 9102, 486, 428, 1412, 3877, 362, 281, 1066, 2837, 295, 567, 307, 294, 597, 992, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1334736728668213, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.030064556747674942}, {"id": 4, "seek": 0, "start": 21.0, "end": 28.0, "text": " What instance variables will your data structure have to keep track of who is in which set?", "tokens": [50364, 2621, 958, 955, 3430, 307, 281, 2573, 484, 437, 1333, 295, 14217, 37765, 321, 393, 764, 281, 2837, 992, 16560, 13, 50764, 50764, 407, 437, 286, 914, 538, 300, 307, 718, 311, 584, 321, 362, 264, 6445, 294, 264, 2190, 1785, 13, 51064, 51064, 1958, 11, 502, 11, 568, 11, 293, 1017, 366, 439, 502, 992, 13, 51214, 51214, 805, 293, 1025, 366, 294, 264, 912, 992, 293, 1386, 307, 294, 257, 992, 538, 2564, 13, 51414, 51414, 708, 5197, 9102, 486, 428, 1412, 3877, 362, 281, 1066, 2837, 295, 567, 307, 294, 597, 992, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1334736728668213, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.030064556747674942}, {"id": 5, "seek": 2800, "start": 28.0, "end": 35.0, "text": " So I'd like you to pause the video, think about that a little and then I'll give you one possible answer.", "tokens": [50364, 407, 286, 1116, 411, 291, 281, 10465, 264, 960, 11, 519, 466, 300, 257, 707, 293, 550, 286, 603, 976, 291, 472, 1944, 1867, 13, 50714, 50714, 407, 264, 881, 3743, 1867, 300, 1731, 1643, 281, 976, 385, 307, 983, 500, 380, 321, 445, 652, 257, 1329, 295, 6352, 295, 41674, 13, 51064, 51064, 663, 311, 588, 21769, 13, 51114, 51114, 407, 294, 10745, 11, 300, 576, 312, 257, 1329, 295, 992, 295, 24922, 11, 689, 1329, 293, 992, 2864, 281, 264, 10745, 28416, 321, 1866, 294, 257, 3894, 7991, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.14409582238448293, "compression_ratio": 1.669683257918552, "no_speech_prob": 1.2944992704433389e-05}, {"id": 6, "seek": 2800, "start": 35.0, "end": 42.0, "text": " So the most popular answer that students seem to give me is why don't we just make a list of sets of integers.", "tokens": [50364, 407, 286, 1116, 411, 291, 281, 10465, 264, 960, 11, 519, 466, 300, 257, 707, 293, 550, 286, 603, 976, 291, 472, 1944, 1867, 13, 50714, 50714, 407, 264, 881, 3743, 1867, 300, 1731, 1643, 281, 976, 385, 307, 983, 500, 380, 321, 445, 652, 257, 1329, 295, 6352, 295, 41674, 13, 51064, 51064, 663, 311, 588, 21769, 13, 51114, 51114, 407, 294, 10745, 11, 300, 576, 312, 257, 1329, 295, 992, 295, 24922, 11, 689, 1329, 293, 992, 2864, 281, 264, 10745, 28416, 321, 1866, 294, 257, 3894, 7991, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.14409582238448293, "compression_ratio": 1.669683257918552, "no_speech_prob": 1.2944992704433389e-05}, {"id": 7, "seek": 2800, "start": 42.0, "end": 43.0, "text": " That's very intuitive.", "tokens": [50364, 407, 286, 1116, 411, 291, 281, 10465, 264, 960, 11, 519, 466, 300, 257, 707, 293, 550, 286, 603, 976, 291, 472, 1944, 1867, 13, 50714, 50714, 407, 264, 881, 3743, 1867, 300, 1731, 1643, 281, 976, 385, 307, 983, 500, 380, 321, 445, 652, 257, 1329, 295, 6352, 295, 41674, 13, 51064, 51064, 663, 311, 588, 21769, 13, 51114, 51114, 407, 294, 10745, 11, 300, 576, 312, 257, 1329, 295, 992, 295, 24922, 11, 689, 1329, 293, 992, 2864, 281, 264, 10745, 28416, 321, 1866, 294, 257, 3894, 7991, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.14409582238448293, "compression_ratio": 1.669683257918552, "no_speech_prob": 1.2944992704433389e-05}, {"id": 8, "seek": 2800, "start": 43.0, "end": 52.0, "text": " So in Java, that would be a list of set of integer, where list and set refer to the Java interfaces we saw in a previous lecture.", "tokens": [50364, 407, 286, 1116, 411, 291, 281, 10465, 264, 960, 11, 519, 466, 300, 257, 707, 293, 550, 286, 603, 976, 291, 472, 1944, 1867, 13, 50714, 50714, 407, 264, 881, 3743, 1867, 300, 1731, 1643, 281, 976, 385, 307, 983, 500, 380, 321, 445, 652, 257, 1329, 295, 6352, 295, 41674, 13, 51064, 51064, 663, 311, 588, 21769, 13, 51114, 51114, 407, 294, 10745, 11, 300, 576, 312, 257, 1329, 295, 992, 295, 24922, 11, 689, 1329, 293, 992, 2864, 281, 264, 10745, 28416, 321, 1866, 294, 257, 3894, 7991, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.14409582238448293, "compression_ratio": 1.669683257918552, "no_speech_prob": 1.2944992704433389e-05}, {"id": 9, "seek": 5200, "start": 52.0, "end": 58.0, "text": " So this is a really intuitive idea and it seems great at first.", "tokens": [50364, 407, 341, 307, 257, 534, 21769, 1558, 293, 309, 2544, 869, 412, 700, 13, 50664, 50664, 2908, 11, 1564, 291, 722, 1953, 466, 437, 264, 307, 4582, 293, 1745, 7705, 576, 767, 574, 411, 11, 50964, 50964, 291, 603, 536, 300, 309, 727, 312, 588, 2964, 293, 733, 295, 6179, 13, 51164, 51164, 407, 718, 311, 3811, 300, 321, 362, 257, 2590, 689, 1825, 307, 4582, 1939, 13, 51314, 51314, 407, 264, 1329, 295, 6352, 295, 41674, 307, 257, 1329, 365, 257, 992, 19273, 787, 1958, 11, 257, 992, 19273, 787, 502, 11, 257, 992, 19273, 787, 568, 11, 293, 370, 5220, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07891570296242972, "compression_ratio": 1.7911646586345382, "no_speech_prob": 0.0003412427904549986}, {"id": 10, "seek": 5200, "start": 58.0, "end": 64.0, "text": " However, once you start thinking about what the is connected and connect operations would actually look like,", "tokens": [50364, 407, 341, 307, 257, 534, 21769, 1558, 293, 309, 2544, 869, 412, 700, 13, 50664, 50664, 2908, 11, 1564, 291, 722, 1953, 466, 437, 264, 307, 4582, 293, 1745, 7705, 576, 767, 574, 411, 11, 50964, 50964, 291, 603, 536, 300, 309, 727, 312, 588, 2964, 293, 733, 295, 6179, 13, 51164, 51164, 407, 718, 311, 3811, 300, 321, 362, 257, 2590, 689, 1825, 307, 4582, 1939, 13, 51314, 51314, 407, 264, 1329, 295, 6352, 295, 41674, 307, 257, 1329, 365, 257, 992, 19273, 787, 1958, 11, 257, 992, 19273, 787, 502, 11, 257, 992, 19273, 787, 568, 11, 293, 370, 5220, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07891570296242972, "compression_ratio": 1.7911646586345382, "no_speech_prob": 0.0003412427904549986}, {"id": 11, "seek": 5200, "start": 64.0, "end": 68.0, "text": " you'll see that it could be very slow and kind of complicated.", "tokens": [50364, 407, 341, 307, 257, 534, 21769, 1558, 293, 309, 2544, 869, 412, 700, 13, 50664, 50664, 2908, 11, 1564, 291, 722, 1953, 466, 437, 264, 307, 4582, 293, 1745, 7705, 576, 767, 574, 411, 11, 50964, 50964, 291, 603, 536, 300, 309, 727, 312, 588, 2964, 293, 733, 295, 6179, 13, 51164, 51164, 407, 718, 311, 3811, 300, 321, 362, 257, 2590, 689, 1825, 307, 4582, 1939, 13, 51314, 51314, 407, 264, 1329, 295, 6352, 295, 41674, 307, 257, 1329, 365, 257, 992, 19273, 787, 1958, 11, 257, 992, 19273, 787, 502, 11, 257, 992, 19273, 787, 568, 11, 293, 370, 5220, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07891570296242972, "compression_ratio": 1.7911646586345382, "no_speech_prob": 0.0003412427904549986}, {"id": 12, "seek": 5200, "start": 68.0, "end": 71.0, "text": " So let's imagine that we have a situation where nothing is connected yet.", "tokens": [50364, 407, 341, 307, 257, 534, 21769, 1558, 293, 309, 2544, 869, 412, 700, 13, 50664, 50664, 2908, 11, 1564, 291, 722, 1953, 466, 437, 264, 307, 4582, 293, 1745, 7705, 576, 767, 574, 411, 11, 50964, 50964, 291, 603, 536, 300, 309, 727, 312, 588, 2964, 293, 733, 295, 6179, 13, 51164, 51164, 407, 718, 311, 3811, 300, 321, 362, 257, 2590, 689, 1825, 307, 4582, 1939, 13, 51314, 51314, 407, 264, 1329, 295, 6352, 295, 41674, 307, 257, 1329, 365, 257, 992, 19273, 787, 1958, 11, 257, 992, 19273, 787, 502, 11, 257, 992, 19273, 787, 568, 11, 293, 370, 5220, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07891570296242972, "compression_ratio": 1.7911646586345382, "no_speech_prob": 0.0003412427904549986}, {"id": 13, "seek": 5200, "start": 71.0, "end": 80.0, "text": " So the list of sets of integers is a list with a set containing only 0, a set containing only 1, a set containing only 2, and so forth.", "tokens": [50364, 407, 341, 307, 257, 534, 21769, 1558, 293, 309, 2544, 869, 412, 700, 13, 50664, 50664, 2908, 11, 1564, 291, 722, 1953, 466, 437, 264, 307, 4582, 293, 1745, 7705, 576, 767, 574, 411, 11, 50964, 50964, 291, 603, 536, 300, 309, 727, 312, 588, 2964, 293, 733, 295, 6179, 13, 51164, 51164, 407, 718, 311, 3811, 300, 321, 362, 257, 2590, 689, 1825, 307, 4582, 1939, 13, 51314, 51314, 407, 264, 1329, 295, 6352, 295, 41674, 307, 257, 1329, 365, 257, 992, 19273, 787, 1958, 11, 257, 992, 19273, 787, 502, 11, 257, 992, 19273, 787, 568, 11, 293, 370, 5220, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07891570296242972, "compression_ratio": 1.7911646586345382, "no_speech_prob": 0.0003412427904549986}, {"id": 14, "seek": 8000, "start": 80.0, "end": 88.0, "text": " So if we wanted to do something like, is connected 5, 6 here, that means we need to look and say, is 5 in this set?", "tokens": [50364, 407, 498, 321, 1415, 281, 360, 746, 411, 11, 307, 4582, 1025, 11, 1386, 510, 11, 300, 1355, 321, 643, 281, 574, 293, 584, 11, 307, 1025, 294, 341, 992, 30, 50764, 50764, 12172, 11, 300, 311, 1958, 11, 307, 1025, 294, 341, 992, 30, 12172, 11, 502, 293, 370, 5220, 13, 50964, 50964, 400, 370, 321, 500, 380, 458, 689, 1340, 307, 11, 293, 294, 300, 1389, 321, 1936, 362, 281, 574, 412, 1025, 6352, 281, 915, 11, 420, 2597, 11, 1386, 6352, 281, 915, 1025, 11, 293, 550, 1614, 6352, 281, 915, 1386, 13, 51514, 51514, 407, 264, 4787, 34474, 11, 321, 434, 1936, 27019, 807, 1203, 6091, 293, 300, 34474, 576, 312, 9725, 294, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15482644565769885, "compression_ratio": 1.7877551020408162, "no_speech_prob": 3.4125245292671025e-05}, {"id": 15, "seek": 8000, "start": 88.0, "end": 92.0, "text": " Nope, that's 0, is 5 in this set? Nope, 1 and so forth.", "tokens": [50364, 407, 498, 321, 1415, 281, 360, 746, 411, 11, 307, 4582, 1025, 11, 1386, 510, 11, 300, 1355, 321, 643, 281, 574, 293, 584, 11, 307, 1025, 294, 341, 992, 30, 50764, 50764, 12172, 11, 300, 311, 1958, 11, 307, 1025, 294, 341, 992, 30, 12172, 11, 502, 293, 370, 5220, 13, 50964, 50964, 400, 370, 321, 500, 380, 458, 689, 1340, 307, 11, 293, 294, 300, 1389, 321, 1936, 362, 281, 574, 412, 1025, 6352, 281, 915, 11, 420, 2597, 11, 1386, 6352, 281, 915, 1025, 11, 293, 550, 1614, 6352, 281, 915, 1386, 13, 51514, 51514, 407, 264, 4787, 34474, 11, 321, 434, 1936, 27019, 807, 1203, 6091, 293, 300, 34474, 576, 312, 9725, 294, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15482644565769885, "compression_ratio": 1.7877551020408162, "no_speech_prob": 3.4125245292671025e-05}, {"id": 16, "seek": 8000, "start": 92.0, "end": 103.0, "text": " And so we don't know where anything is, and in that case we basically have to look at 5 sets to find, or sorry, 6 sets to find 5, and then 7 sets to find 6.", "tokens": [50364, 407, 498, 321, 1415, 281, 360, 746, 411, 11, 307, 4582, 1025, 11, 1386, 510, 11, 300, 1355, 321, 643, 281, 574, 293, 584, 11, 307, 1025, 294, 341, 992, 30, 50764, 50764, 12172, 11, 300, 311, 1958, 11, 307, 1025, 294, 341, 992, 30, 12172, 11, 502, 293, 370, 5220, 13, 50964, 50964, 400, 370, 321, 500, 380, 458, 689, 1340, 307, 11, 293, 294, 300, 1389, 321, 1936, 362, 281, 574, 412, 1025, 6352, 281, 915, 11, 420, 2597, 11, 1386, 6352, 281, 915, 1025, 11, 293, 550, 1614, 6352, 281, 915, 1386, 13, 51514, 51514, 407, 264, 4787, 34474, 11, 321, 434, 1936, 27019, 807, 1203, 6091, 293, 300, 34474, 576, 312, 9725, 294, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15482644565769885, "compression_ratio": 1.7877551020408162, "no_speech_prob": 3.4125245292671025e-05}, {"id": 17, "seek": 8000, "start": 103.0, "end": 109.0, "text": " So the overall runtime, we're basically scanning through everything twice and that runtime would be theta in.", "tokens": [50364, 407, 498, 321, 1415, 281, 360, 746, 411, 11, 307, 4582, 1025, 11, 1386, 510, 11, 300, 1355, 321, 643, 281, 574, 293, 584, 11, 307, 1025, 294, 341, 992, 30, 50764, 50764, 12172, 11, 300, 311, 1958, 11, 307, 1025, 294, 341, 992, 30, 12172, 11, 502, 293, 370, 5220, 13, 50964, 50964, 400, 370, 321, 500, 380, 458, 689, 1340, 307, 11, 293, 294, 300, 1389, 321, 1936, 362, 281, 574, 412, 1025, 6352, 281, 915, 11, 420, 2597, 11, 1386, 6352, 281, 915, 1025, 11, 293, 550, 1614, 6352, 281, 915, 1386, 13, 51514, 51514, 407, 264, 4787, 34474, 11, 321, 434, 1936, 27019, 807, 1203, 6091, 293, 300, 34474, 576, 312, 9725, 294, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15482644565769885, "compression_ratio": 1.7877551020408162, "no_speech_prob": 3.4125245292671025e-05}, {"id": 18, "seek": 10900, "start": 109.0, "end": 114.0, "text": " So that's actually pretty bad compared to what we will be able to achieve later.", "tokens": [50364, 407, 300, 311, 767, 1238, 1578, 5347, 281, 437, 321, 486, 312, 1075, 281, 4584, 1780, 13, 50614, 50614, 1033, 13, 823, 309, 4523, 484, 264, 3089, 486, 611, 312, 6457, 3997, 11, 293, 300, 311, 516, 281, 312, 1071, 25060, 13, 50914, 50914, 759, 291, 767, 1261, 281, 2464, 309, 11, 309, 1116, 312, 733, 295, 11304, 13, 51014, 51014, 407, 281, 20858, 341, 700, 3109, 11, 597, 286, 486, 818, 1329, 295, 6352, 11, 274, 82, 11, 420, 274, 82, 11, 307, 2099, 337, 11, 341, 7225, 6352, 13, 51414, 51414, 759, 321, 434, 1228, 257, 1329, 295, 6352, 382, 527, 14217, 37765, 11, 550, 321, 362, 512, 2663, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.15808863475404936, "compression_ratio": 1.6296296296296295, "no_speech_prob": 2.1656245735357516e-05}, {"id": 19, "seek": 10900, "start": 114.0, "end": 120.0, "text": " Okay. Now it turns out the code will also be fairly complex, and that's going to be another downside.", "tokens": [50364, 407, 300, 311, 767, 1238, 1578, 5347, 281, 437, 321, 486, 312, 1075, 281, 4584, 1780, 13, 50614, 50614, 1033, 13, 823, 309, 4523, 484, 264, 3089, 486, 611, 312, 6457, 3997, 11, 293, 300, 311, 516, 281, 312, 1071, 25060, 13, 50914, 50914, 759, 291, 767, 1261, 281, 2464, 309, 11, 309, 1116, 312, 733, 295, 11304, 13, 51014, 51014, 407, 281, 20858, 341, 700, 3109, 11, 597, 286, 486, 818, 1329, 295, 6352, 11, 274, 82, 11, 420, 274, 82, 11, 307, 2099, 337, 11, 341, 7225, 6352, 13, 51414, 51414, 759, 321, 434, 1228, 257, 1329, 295, 6352, 382, 527, 14217, 37765, 11, 550, 321, 362, 512, 2663, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.15808863475404936, "compression_ratio": 1.6296296296296295, "no_speech_prob": 2.1656245735357516e-05}, {"id": 20, "seek": 10900, "start": 120.0, "end": 122.0, "text": " If you actually turn to write it, it'd be kind of annoying.", "tokens": [50364, 407, 300, 311, 767, 1238, 1578, 5347, 281, 437, 321, 486, 312, 1075, 281, 4584, 1780, 13, 50614, 50614, 1033, 13, 823, 309, 4523, 484, 264, 3089, 486, 611, 312, 6457, 3997, 11, 293, 300, 311, 516, 281, 312, 1071, 25060, 13, 50914, 50914, 759, 291, 767, 1261, 281, 2464, 309, 11, 309, 1116, 312, 733, 295, 11304, 13, 51014, 51014, 407, 281, 20858, 341, 700, 3109, 11, 597, 286, 486, 818, 1329, 295, 6352, 11, 274, 82, 11, 420, 274, 82, 11, 307, 2099, 337, 11, 341, 7225, 6352, 13, 51414, 51414, 759, 321, 434, 1228, 257, 1329, 295, 6352, 382, 527, 14217, 37765, 11, 550, 321, 362, 512, 2663, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.15808863475404936, "compression_ratio": 1.6296296296296295, "no_speech_prob": 2.1656245735357516e-05}, {"id": 21, "seek": 10900, "start": 122.0, "end": 130.0, "text": " So to summarize this first approach, which I will call list of sets, ds, or ds, is short for, this joint sets.", "tokens": [50364, 407, 300, 311, 767, 1238, 1578, 5347, 281, 437, 321, 486, 312, 1075, 281, 4584, 1780, 13, 50614, 50614, 1033, 13, 823, 309, 4523, 484, 264, 3089, 486, 611, 312, 6457, 3997, 11, 293, 300, 311, 516, 281, 312, 1071, 25060, 13, 50914, 50914, 759, 291, 767, 1261, 281, 2464, 309, 11, 309, 1116, 312, 733, 295, 11304, 13, 51014, 51014, 407, 281, 20858, 341, 700, 3109, 11, 597, 286, 486, 818, 1329, 295, 6352, 11, 274, 82, 11, 420, 274, 82, 11, 307, 2099, 337, 11, 341, 7225, 6352, 13, 51414, 51414, 759, 321, 434, 1228, 257, 1329, 295, 6352, 382, 527, 14217, 37765, 11, 550, 321, 362, 512, 2663, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.15808863475404936, "compression_ratio": 1.6296296296296295, "no_speech_prob": 2.1656245735357516e-05}, {"id": 22, "seek": 10900, "start": 130.0, "end": 136.0, "text": " If we're using a list of sets as our underlying abstraction, then we have some issues.", "tokens": [50364, 407, 300, 311, 767, 1238, 1578, 5347, 281, 437, 321, 486, 312, 1075, 281, 4584, 1780, 13, 50614, 50614, 1033, 13, 823, 309, 4523, 484, 264, 3089, 486, 611, 312, 6457, 3997, 11, 293, 300, 311, 516, 281, 312, 1071, 25060, 13, 50914, 50914, 759, 291, 767, 1261, 281, 2464, 309, 11, 309, 1116, 312, 733, 295, 11304, 13, 51014, 51014, 407, 281, 20858, 341, 700, 3109, 11, 597, 286, 486, 818, 1329, 295, 6352, 11, 274, 82, 11, 420, 274, 82, 11, 307, 2099, 337, 11, 341, 7225, 6352, 13, 51414, 51414, 759, 321, 434, 1228, 257, 1329, 295, 6352, 382, 527, 14217, 37765, 11, 550, 321, 362, 512, 2663, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.15808863475404936, "compression_ratio": 1.6296296296296295, "no_speech_prob": 2.1656245735357516e-05}, {"id": 23, "seek": 13600, "start": 136.0, "end": 145.0, "text": " So let's go through the runtime table, because we're going to keep adding rows to this table as we improve our data structure, and I'll say that the constructor for this list of sets approach.", "tokens": [50364, 407, 718, 311, 352, 807, 264, 34474, 3199, 11, 570, 321, 434, 516, 281, 1066, 5127, 13241, 281, 341, 3199, 382, 321, 3470, 527, 1412, 3877, 11, 293, 286, 603, 584, 300, 264, 47479, 337, 341, 1329, 295, 6352, 3109, 13, 50814, 50814, 467, 307, 1009, 516, 281, 362, 1668, 295, 4599, 294, 572, 1871, 437, 11, 293, 286, 994, 380, 7081, 300, 11, 457, 286, 478, 1566, 309, 311, 9725, 294, 11, 293, 291, 393, 519, 295, 309, 341, 636, 13, 51264, 51264, 759, 286, 1884, 257, 992, 11, 420, 370, 498, 286, 1884, 257, 1329, 11, 293, 550, 286, 1884, 294, 6352, 11, 293, 286, 909, 552, 281, 300, 1329, 11, 300, 820, 312, 9725, 294, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.10001941618880605, "compression_ratio": 1.7765151515151516, "no_speech_prob": 4.781236384587828e-06}, {"id": 24, "seek": 13600, "start": 145.0, "end": 154.0, "text": " It is always going to have order of growth in no matter what, and I didn't prove that, but I'm saying it's theta in, and you can think of it this way.", "tokens": [50364, 407, 718, 311, 352, 807, 264, 34474, 3199, 11, 570, 321, 434, 516, 281, 1066, 5127, 13241, 281, 341, 3199, 382, 321, 3470, 527, 1412, 3877, 11, 293, 286, 603, 584, 300, 264, 47479, 337, 341, 1329, 295, 6352, 3109, 13, 50814, 50814, 467, 307, 1009, 516, 281, 362, 1668, 295, 4599, 294, 572, 1871, 437, 11, 293, 286, 994, 380, 7081, 300, 11, 457, 286, 478, 1566, 309, 311, 9725, 294, 11, 293, 291, 393, 519, 295, 309, 341, 636, 13, 51264, 51264, 759, 286, 1884, 257, 992, 11, 420, 370, 498, 286, 1884, 257, 1329, 11, 293, 550, 286, 1884, 294, 6352, 11, 293, 286, 909, 552, 281, 300, 1329, 11, 300, 820, 312, 9725, 294, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.10001941618880605, "compression_ratio": 1.7765151515151516, "no_speech_prob": 4.781236384587828e-06}, {"id": 25, "seek": 13600, "start": 154.0, "end": 161.0, "text": " If I create a set, or so if I create a list, and then I create in sets, and I add them to that list, that should be theta in.", "tokens": [50364, 407, 718, 311, 352, 807, 264, 34474, 3199, 11, 570, 321, 434, 516, 281, 1066, 5127, 13241, 281, 341, 3199, 382, 321, 3470, 527, 1412, 3877, 11, 293, 286, 603, 584, 300, 264, 47479, 337, 341, 1329, 295, 6352, 3109, 13, 50814, 50814, 467, 307, 1009, 516, 281, 362, 1668, 295, 4599, 294, 572, 1871, 437, 11, 293, 286, 994, 380, 7081, 300, 11, 457, 286, 478, 1566, 309, 311, 9725, 294, 11, 293, 291, 393, 519, 295, 309, 341, 636, 13, 51264, 51264, 759, 286, 1884, 257, 992, 11, 420, 370, 498, 286, 1884, 257, 1329, 11, 293, 550, 286, 1884, 294, 6352, 11, 293, 286, 909, 552, 281, 300, 1329, 11, 300, 820, 312, 9725, 294, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.10001941618880605, "compression_ratio": 1.7765151515151516, "no_speech_prob": 4.781236384587828e-06}, {"id": 26, "seek": 16100, "start": 161.0, "end": 170.0, "text": " Now, connect, and is connected, we saw the worst case for is connected, and it turns out the analysis for connect is almost the same thing.", "tokens": [50364, 823, 11, 1745, 11, 293, 307, 4582, 11, 321, 1866, 264, 5855, 1389, 337, 307, 4582, 11, 293, 309, 4523, 484, 264, 5215, 337, 1745, 307, 1920, 264, 912, 551, 13, 50814, 50814, 407, 264, 5855, 1389, 337, 613, 7705, 307, 9725, 294, 11, 457, 321, 994, 380, 519, 466, 604, 661, 3331, 13, 814, 1062, 312, 1101, 11, 1310, 456, 311, 512, 6851, 689, 309, 311, 767, 709, 4663, 13, 51314, 51314, 407, 437, 286, 478, 516, 281, 360, 294, 264, 3199, 307, 584, 11, 436, 352, 365, 552, 11, 570, 1604, 300, 422, 1355, 1570, 813, 420, 2681, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1071444829305013, "compression_ratio": 1.7114624505928853, "no_speech_prob": 5.148963737156009e-06}, {"id": 27, "seek": 16100, "start": 170.0, "end": 180.0, "text": " So the worst case for these operations is theta in, but we didn't think about any other cases. They might be better, maybe there's some situations where it's actually much faster.", "tokens": [50364, 823, 11, 1745, 11, 293, 307, 4582, 11, 321, 1866, 264, 5855, 1389, 337, 307, 4582, 11, 293, 309, 4523, 484, 264, 5215, 337, 1745, 307, 1920, 264, 912, 551, 13, 50814, 50814, 407, 264, 5855, 1389, 337, 613, 7705, 307, 9725, 294, 11, 457, 321, 994, 380, 519, 466, 604, 661, 3331, 13, 814, 1062, 312, 1101, 11, 1310, 456, 311, 512, 6851, 689, 309, 311, 767, 709, 4663, 13, 51314, 51314, 407, 437, 286, 478, 516, 281, 360, 294, 264, 3199, 307, 584, 11, 436, 352, 365, 552, 11, 570, 1604, 300, 422, 1355, 1570, 813, 420, 2681, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1071444829305013, "compression_ratio": 1.7114624505928853, "no_speech_prob": 5.148963737156009e-06}, {"id": 28, "seek": 16100, "start": 180.0, "end": 186.0, "text": " So what I'm going to do in the table is say, they go with them, because remember that O means less than or equal.", "tokens": [50364, 823, 11, 1745, 11, 293, 307, 4582, 11, 321, 1866, 264, 5855, 1389, 337, 307, 4582, 11, 293, 309, 4523, 484, 264, 5215, 337, 1745, 307, 1920, 264, 912, 551, 13, 50814, 50814, 407, 264, 5855, 1389, 337, 613, 7705, 307, 9725, 294, 11, 457, 321, 994, 380, 519, 466, 604, 661, 3331, 13, 814, 1062, 312, 1101, 11, 1310, 456, 311, 512, 6851, 689, 309, 311, 767, 709, 4663, 13, 51314, 51314, 407, 437, 286, 478, 516, 281, 360, 294, 264, 3199, 307, 584, 11, 436, 352, 365, 552, 11, 570, 1604, 300, 422, 1355, 1570, 813, 420, 2681, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1071444829305013, "compression_ratio": 1.7114624505928853, "no_speech_prob": 5.148963737156009e-06}, {"id": 29, "seek": 18600, "start": 186.0, "end": 193.0, "text": " So we know that we saw an example where it's theta in, that was the worst case, but maybe it's better, so we'll just say they go again.", "tokens": [50364, 407, 321, 458, 300, 321, 1866, 364, 1365, 689, 309, 311, 9725, 294, 11, 300, 390, 264, 5855, 1389, 11, 457, 1310, 309, 311, 1101, 11, 370, 321, 603, 445, 584, 436, 352, 797, 13, 50714, 50714, 2022, 544, 5215, 11, 1310, 321, 727, 1319, 341, 11, 457, 321, 2378, 380, 13, 50914, 50914, 407, 341, 3109, 11, 309, 307, 6179, 11, 293, 1670, 300, 498, 291, 3031, 281, 767, 2464, 264, 3089, 11, 309, 576, 312, 257, 1822, 11, 293, 309, 307, 611, 2964, 5347, 281, 437, 1646, 307, 1944, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.09410694241523743, "compression_ratio": 1.6238938053097345, "no_speech_prob": 3.302774757685256e-06}, {"id": 30, "seek": 18600, "start": 193.0, "end": 197.0, "text": " With more analysis, maybe we could change this, but we haven't.", "tokens": [50364, 407, 321, 458, 300, 321, 1866, 364, 1365, 689, 309, 311, 9725, 294, 11, 300, 390, 264, 5855, 1389, 11, 457, 1310, 309, 311, 1101, 11, 370, 321, 603, 445, 584, 436, 352, 797, 13, 50714, 50714, 2022, 544, 5215, 11, 1310, 321, 727, 1319, 341, 11, 457, 321, 2378, 380, 13, 50914, 50914, 407, 341, 3109, 11, 309, 307, 6179, 11, 293, 1670, 300, 498, 291, 3031, 281, 767, 2464, 264, 3089, 11, 309, 576, 312, 257, 1822, 11, 293, 309, 307, 611, 2964, 5347, 281, 437, 1646, 307, 1944, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.09410694241523743, "compression_ratio": 1.6238938053097345, "no_speech_prob": 3.302774757685256e-06}, {"id": 31, "seek": 18600, "start": 197.0, "end": 207.0, "text": " So this approach, it is complicated, and since that if you tried to actually write the code, it would be a pain, and it is also slow compared to what else is possible.", "tokens": [50364, 407, 321, 458, 300, 321, 1866, 364, 1365, 689, 309, 311, 9725, 294, 11, 300, 390, 264, 5855, 1389, 11, 457, 1310, 309, 311, 1101, 11, 370, 321, 603, 445, 584, 436, 352, 797, 13, 50714, 50714, 2022, 544, 5215, 11, 1310, 321, 727, 1319, 341, 11, 457, 321, 2378, 380, 13, 50914, 50914, 407, 341, 3109, 11, 309, 307, 6179, 11, 293, 1670, 300, 498, 291, 3031, 281, 767, 2464, 264, 3089, 11, 309, 576, 312, 257, 1822, 11, 293, 309, 307, 611, 2964, 5347, 281, 437, 1646, 307, 1944, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.09410694241523743, "compression_ratio": 1.6238938053097345, "no_speech_prob": 3.302774757685256e-06}, {"id": 32, "seek": 20700, "start": 207.0, "end": 224.0, "text": " And here's the most important lesson, right, is that by making that very first choice by saying, we're going to use a list of sets, we've actually doomed ourselves immediately to having complicated code that is also slow, and that's the bad thing.", "tokens": [50364, 400, 510, 311, 264, 881, 1021, 6898, 11, 558, 11, 307, 300, 538, 1455, 300, 588, 700, 3922, 538, 1566, 11, 321, 434, 516, 281, 764, 257, 1329, 295, 6352, 11, 321, 600, 767, 33847, 4175, 4258, 281, 1419, 6179, 3089, 300, 307, 611, 2964, 11, 293, 300, 311, 264, 1578, 551, 13, 51214, 51214, 400, 300, 311, 767, 257, 6898, 300, 286, 528, 291, 281, 747, 281, 1917, 13, 1133, 291, 434, 1382, 281, 4445, 512, 1090, 1496, 1412, 3877, 1228, 3875, 2390, 8474, 11, 264, 3922, 295, 264, 2390, 8474, 300, 291, 764, 11, 428, 5197, 9102, 11, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1297061168230497, "compression_ratio": 1.7335766423357664, "no_speech_prob": 1.1956251910305582e-05}, {"id": 33, "seek": 20700, "start": 224.0, "end": 236.0, "text": " And that's actually a lesson that I want you to take to heart. When you're trying to implement some high level data structure using basic building blocks, the choice of the building blocks that you use, your instance variables,", "tokens": [50364, 400, 510, 311, 264, 881, 1021, 6898, 11, 558, 11, 307, 300, 538, 1455, 300, 588, 700, 3922, 538, 1566, 11, 321, 434, 516, 281, 764, 257, 1329, 295, 6352, 11, 321, 600, 767, 33847, 4175, 4258, 281, 1419, 6179, 3089, 300, 307, 611, 2964, 11, 293, 300, 311, 264, 1578, 551, 13, 51214, 51214, 400, 300, 311, 767, 257, 6898, 300, 286, 528, 291, 281, 747, 281, 1917, 13, 1133, 291, 434, 1382, 281, 4445, 512, 1090, 1496, 1412, 3877, 1228, 3875, 2390, 8474, 11, 264, 3922, 295, 264, 2390, 8474, 300, 291, 764, 11, 428, 5197, 9102, 11, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1297061168230497, "compression_ratio": 1.7335766423357664, "no_speech_prob": 1.1956251910305582e-05}, {"id": 34, "seek": 23600, "start": 236.0, "end": 243.0, "text": " will deeply affect the complexity of your code and its performance in ways that are just so important.", "tokens": [50364, 486, 8760, 3345, 264, 14024, 295, 428, 3089, 293, 1080, 3389, 294, 2098, 300, 366, 445, 370, 1021, 13, 50714, 50714, 407, 510, 311, 364, 18873, 3109, 13, 50864, 50864, 316, 544, 5164, 11, 457, 406, 1596, 665, 1939, 3109, 11, 307, 718, 311, 764, 257, 1329, 295, 41674, 11, 2602, 295, 257, 1329, 295, 6352, 295, 41674, 13, 51314, 51314, 708, 775, 300, 1329, 2906, 30, 1042, 11, 294, 1184, 8729, 295, 300, 10225, 11, 321, 486, 3531, 264, 992, 1230, 295, 264, 2212, 3174, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08786087245731564, "compression_ratio": 1.6120689655172413, "no_speech_prob": 2.246846452180762e-05}, {"id": 35, "seek": 23600, "start": 243.0, "end": 246.0, "text": " So here's an alternate approach.", "tokens": [50364, 486, 8760, 3345, 264, 14024, 295, 428, 3089, 293, 1080, 3389, 294, 2098, 300, 366, 445, 370, 1021, 13, 50714, 50714, 407, 510, 311, 364, 18873, 3109, 13, 50864, 50864, 316, 544, 5164, 11, 457, 406, 1596, 665, 1939, 3109, 11, 307, 718, 311, 764, 257, 1329, 295, 41674, 11, 2602, 295, 257, 1329, 295, 6352, 295, 41674, 13, 51314, 51314, 708, 775, 300, 1329, 2906, 30, 1042, 11, 294, 1184, 8729, 295, 300, 10225, 11, 321, 486, 3531, 264, 992, 1230, 295, 264, 2212, 3174, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08786087245731564, "compression_ratio": 1.6120689655172413, "no_speech_prob": 2.246846452180762e-05}, {"id": 36, "seek": 23600, "start": 246.0, "end": 255.0, "text": " A more traditional, but not quite good yet approach, is let's use a list of integers, instead of a list of sets of integers.", "tokens": [50364, 486, 8760, 3345, 264, 14024, 295, 428, 3089, 293, 1080, 3389, 294, 2098, 300, 366, 445, 370, 1021, 13, 50714, 50714, 407, 510, 311, 364, 18873, 3109, 13, 50864, 50864, 316, 544, 5164, 11, 457, 406, 1596, 665, 1939, 3109, 11, 307, 718, 311, 764, 257, 1329, 295, 41674, 11, 2602, 295, 257, 1329, 295, 6352, 295, 41674, 13, 51314, 51314, 708, 775, 300, 1329, 2906, 30, 1042, 11, 294, 1184, 8729, 295, 300, 10225, 11, 321, 486, 3531, 264, 992, 1230, 295, 264, 2212, 3174, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08786087245731564, "compression_ratio": 1.6120689655172413, "no_speech_prob": 2.246846452180762e-05}, {"id": 37, "seek": 23600, "start": 255.0, "end": 265.0, "text": " What does that list represent? Well, in each entry of that array, we will store the set number of the given item.", "tokens": [50364, 486, 8760, 3345, 264, 14024, 295, 428, 3089, 293, 1080, 3389, 294, 2098, 300, 366, 445, 370, 1021, 13, 50714, 50714, 407, 510, 311, 364, 18873, 3109, 13, 50864, 50864, 316, 544, 5164, 11, 457, 406, 1596, 665, 1939, 3109, 11, 307, 718, 311, 764, 257, 1329, 295, 41674, 11, 2602, 295, 257, 1329, 295, 6352, 295, 41674, 13, 51314, 51314, 708, 775, 300, 1329, 2906, 30, 1042, 11, 294, 1184, 8729, 295, 300, 10225, 11, 321, 486, 3531, 264, 992, 1230, 295, 264, 2212, 3174, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08786087245731564, "compression_ratio": 1.6120689655172413, "no_speech_prob": 2.246846452180762e-05}, {"id": 38, "seek": 26500, "start": 265.0, "end": 274.0, "text": " So for example, 0, 1, 2, and 4 all belong to set number four, 3 and 5 belong to set number five and 6 belongs to set six.", "tokens": [50364, 407, 337, 1365, 11, 1958, 11, 502, 11, 568, 11, 293, 1017, 439, 5784, 281, 992, 1230, 1451, 11, 805, 293, 1025, 5784, 281, 992, 1230, 1732, 293, 1386, 12953, 281, 992, 2309, 13, 50814, 50814, 823, 321, 820, 3637, 300, 264, 2685, 1230, 286, 510, 775, 11, 300, 286, 6183, 1177, 380, 1871, 13, 51014, 51014, 407, 341, 727, 362, 668, 1722, 11, 1722, 11, 1722, 11, 293, 1722, 11, 293, 300, 576, 312, 3879, 2489, 337, 264, 1230, 1958, 11, 502, 11, 568, 11, 293, 1017, 11, 457, 286, 6183, 1017, 510, 570, 309, 2544, 281, 652, 257, 707, 544, 2020, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1721481923703794, "compression_ratio": 1.6936936936936937, "no_speech_prob": 3.780426413868554e-05}, {"id": 39, "seek": 26500, "start": 274.0, "end": 278.0, "text": " Now we should note that the specific number I here does, that I picked doesn't matter.", "tokens": [50364, 407, 337, 1365, 11, 1958, 11, 502, 11, 568, 11, 293, 1017, 439, 5784, 281, 992, 1230, 1451, 11, 805, 293, 1025, 5784, 281, 992, 1230, 1732, 293, 1386, 12953, 281, 992, 2309, 13, 50814, 50814, 823, 321, 820, 3637, 300, 264, 2685, 1230, 286, 510, 775, 11, 300, 286, 6183, 1177, 380, 1871, 13, 51014, 51014, 407, 341, 727, 362, 668, 1722, 11, 1722, 11, 1722, 11, 293, 1722, 11, 293, 300, 576, 312, 3879, 2489, 337, 264, 1230, 1958, 11, 502, 11, 568, 11, 293, 1017, 11, 457, 286, 6183, 1017, 510, 570, 309, 2544, 281, 652, 257, 707, 544, 2020, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1721481923703794, "compression_ratio": 1.6936936936936937, "no_speech_prob": 3.780426413868554e-05}, {"id": 40, "seek": 26500, "start": 278.0, "end": 288.0, "text": " So this could have been 9, 9, 9, and 9, and that would be totally fine for the number 0, 1, 2, and 4, but I picked 4 here because it seems to make a little more sense.", "tokens": [50364, 407, 337, 1365, 11, 1958, 11, 502, 11, 568, 11, 293, 1017, 439, 5784, 281, 992, 1230, 1451, 11, 805, 293, 1025, 5784, 281, 992, 1230, 1732, 293, 1386, 12953, 281, 992, 2309, 13, 50814, 50814, 823, 321, 820, 3637, 300, 264, 2685, 1230, 286, 510, 775, 11, 300, 286, 6183, 1177, 380, 1871, 13, 51014, 51014, 407, 341, 727, 362, 668, 1722, 11, 1722, 11, 1722, 11, 293, 1722, 11, 293, 300, 576, 312, 3879, 2489, 337, 264, 1230, 1958, 11, 502, 11, 568, 11, 293, 1017, 11, 457, 286, 6183, 1017, 510, 570, 309, 2544, 281, 652, 257, 707, 544, 2020, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1721481923703794, "compression_ratio": 1.6936936936936937, "no_speech_prob": 3.780426413868554e-05}, {"id": 41, "seek": 28800, "start": 288.0, "end": 303.0, "text": " When we do a connect operation, well, then all we do, if we try and connect say 2 and 3, we make sure that all of the items that had the set ID that are equal to 2, now have the set ID that the item 3 had.", "tokens": [50364, 1133, 321, 360, 257, 1745, 6916, 11, 731, 11, 550, 439, 321, 360, 11, 498, 321, 853, 293, 1745, 584, 568, 293, 805, 11, 321, 652, 988, 300, 439, 295, 264, 4754, 300, 632, 264, 992, 7348, 300, 366, 2681, 281, 568, 11, 586, 362, 264, 992, 7348, 300, 264, 3174, 805, 632, 13, 51114, 51114, 407, 294, 341, 1389, 11, 321, 536, 300, 1017, 4754, 1261, 666, 1025, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.12681623407312342, "compression_ratio": 1.624203821656051, "no_speech_prob": 1.382865502819186e-05}, {"id": 42, "seek": 28800, "start": 303.0, "end": 307.0, "text": " So in this case, we see that 4 items turn into 5.", "tokens": [50364, 1133, 321, 360, 257, 1745, 6916, 11, 731, 11, 550, 439, 321, 360, 11, 498, 321, 853, 293, 1745, 584, 568, 293, 805, 11, 321, 652, 988, 300, 439, 295, 264, 4754, 300, 632, 264, 992, 7348, 300, 366, 2681, 281, 568, 11, 586, 362, 264, 992, 7348, 300, 264, 3174, 805, 632, 13, 51114, 51114, 407, 294, 341, 1389, 11, 321, 536, 300, 1017, 4754, 1261, 666, 1025, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.12681623407312342, "compression_ratio": 1.624203821656051, "no_speech_prob": 1.382865502819186e-05}, {"id": 43, "seek": 30700, "start": 307.0, "end": 319.0, "text": " So that's it. And so this approach, the really nice thing about it is that while connect is still costly because we have to set a bunch of numbers is connected will be much faster.", "tokens": [50364, 407, 300, 311, 309, 13, 400, 370, 341, 3109, 11, 264, 534, 1481, 551, 466, 309, 307, 300, 1339, 1745, 307, 920, 28328, 570, 321, 362, 281, 992, 257, 3840, 295, 3547, 307, 4582, 486, 312, 709, 4663, 13, 50964, 50964, 286, 478, 406, 516, 281, 352, 807, 341, 3089, 294, 2607, 11, 457, 445, 281, 976, 291, 257, 2020, 295, 437, 309, 576, 767, 574, 411, 294, 10745, 11, 498, 321, 362, 1270, 364, 7348, 10225, 11, 550, 264, 307, 4582, 7705, 11, 286, 478, 2597, 11, 2597, 11, 750, 311, 257, 3834, 11, 2597, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1392362613489132, "compression_ratio": 1.628, "no_speech_prob": 0.00010418110468890518}, {"id": 44, "seek": 30700, "start": 319.0, "end": 333.0, "text": " I'm not going to go through this code in detail, but just to give you a sense of what it would actually look like in Java, if we have such an ID array, then the is connected operations, I'm sorry, sorry, she's a double, sorry.", "tokens": [50364, 407, 300, 311, 309, 13, 400, 370, 341, 3109, 11, 264, 534, 1481, 551, 466, 309, 307, 300, 1339, 1745, 307, 920, 28328, 570, 321, 362, 281, 992, 257, 3840, 295, 3547, 307, 4582, 486, 312, 709, 4663, 13, 50964, 50964, 286, 478, 406, 516, 281, 352, 807, 341, 3089, 294, 2607, 11, 457, 445, 281, 976, 291, 257, 2020, 295, 437, 309, 576, 767, 574, 411, 294, 10745, 11, 498, 321, 362, 1270, 364, 7348, 10225, 11, 550, 264, 307, 4582, 7705, 11, 286, 478, 2597, 11, 2597, 11, 750, 311, 257, 3834, 11, 2597, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1392362613489132, "compression_ratio": 1.628, "no_speech_prob": 0.00010418110468890518}, {"id": 45, "seek": 33300, "start": 333.0, "end": 344.0, "text": " So when I do is connected, I say ID of P is that equal to ID of Q, that's it, that's all I need to do, so this is much faster, so that's going to be constant time.", "tokens": [50364, 407, 562, 286, 360, 307, 4582, 11, 286, 584, 7348, 295, 430, 307, 300, 2681, 281, 7348, 295, 1249, 11, 300, 311, 309, 11, 300, 311, 439, 286, 643, 281, 360, 11, 370, 341, 307, 709, 4663, 11, 370, 300, 311, 516, 281, 312, 5754, 565, 13, 50914, 50914, 3146, 8712, 11, 264, 1745, 6916, 4898, 510, 11, 689, 321, 362, 281, 992, 257, 3840, 295, 4754, 7263, 11, 293, 294, 341, 1389, 11, 309, 307, 516, 281, 312, 2964, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.15288731070125805, "compression_ratio": 1.5618556701030928, "no_speech_prob": 1.2692214113485534e-05}, {"id": 46, "seek": 33300, "start": 344.0, "end": 354.0, "text": " By contrast, the connect operation shown here, where we have to set a bunch of items potentially, and in this case, it is going to be slow.", "tokens": [50364, 407, 562, 286, 360, 307, 4582, 11, 286, 584, 7348, 295, 430, 307, 300, 2681, 281, 7348, 295, 1249, 11, 300, 311, 309, 11, 300, 311, 439, 286, 643, 281, 360, 11, 370, 341, 307, 709, 4663, 11, 370, 300, 311, 516, 281, 312, 5754, 565, 13, 50914, 50914, 3146, 8712, 11, 264, 1745, 6916, 4898, 510, 11, 689, 321, 362, 281, 992, 257, 3840, 295, 4754, 7263, 11, 293, 294, 341, 1389, 11, 309, 307, 516, 281, 312, 2964, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.15288731070125805, "compression_ratio": 1.5618556701030928, "no_speech_prob": 1.2692214113485534e-05}, {"id": 47, "seek": 35400, "start": 354.0, "end": 365.0, "text": " In fact, it will always be data in, if you look at the code, there is a for loop that will always go through every single item of the array, and so the runtime here is data in.", "tokens": [50364, 682, 1186, 11, 309, 486, 1009, 312, 1412, 294, 11, 498, 291, 574, 412, 264, 3089, 11, 456, 307, 257, 337, 6367, 300, 486, 1009, 352, 807, 633, 2167, 3174, 295, 264, 10225, 11, 293, 370, 264, 34474, 510, 307, 1412, 294, 13, 50914, 50914, 407, 510, 11, 341, 18873, 3109, 11, 597, 286, 478, 5141, 1702, 915, 11, 575, 264, 5002, 300, 309, 311, 307, 4582, 6916, 307, 1412, 502, 11, 1080, 1745, 6916, 307, 12309, 1578, 382, 264, 5855, 1389, 337, 1329, 295, 6352, 11, 370, 309, 311, 1412, 294, 11, 293, 264, 47479, 307, 920, 1412, 294, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.15689600989932107, "compression_ratio": 1.7622950819672132, "no_speech_prob": 1.2735019481624477e-05}, {"id": 48, "seek": 35400, "start": 365.0, "end": 381.0, "text": " So here, this alternate approach, which I'm calling quick find, has the advantage that it's is connected operation is data 1, its connect operation is equally bad as the worst case for list of sets, so it's data in, and the constructor is still data in.", "tokens": [50364, 682, 1186, 11, 309, 486, 1009, 312, 1412, 294, 11, 498, 291, 574, 412, 264, 3089, 11, 456, 307, 257, 337, 6367, 300, 486, 1009, 352, 807, 633, 2167, 3174, 295, 264, 10225, 11, 293, 370, 264, 34474, 510, 307, 1412, 294, 13, 50914, 50914, 407, 510, 11, 341, 18873, 3109, 11, 597, 286, 478, 5141, 1702, 915, 11, 575, 264, 5002, 300, 309, 311, 307, 4582, 6916, 307, 1412, 502, 11, 1080, 1745, 6916, 307, 12309, 1578, 382, 264, 5855, 1389, 337, 1329, 295, 6352, 11, 370, 309, 311, 1412, 294, 11, 293, 264, 47479, 307, 920, 1412, 294, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.15689600989932107, "compression_ratio": 1.7622950819672132, "no_speech_prob": 1.2735019481624477e-05}, {"id": 49, "seek": 38100, "start": 381.0, "end": 389.0, "text": " So this is an improvement, right? We have a much faster is connected operation, but we will see we'll be able to do even better.", "tokens": [50364, 407, 341, 307, 364, 10444, 11, 558, 30, 492, 362, 257, 709, 4663, 307, 4582, 6916, 11, 457, 321, 486, 536, 321, 603, 312, 1075, 281, 360, 754, 1101, 13, 50764, 50764, 400, 370, 360, 300, 11, 321, 434, 516, 281, 362, 281, 360, 746, 754, 544, 12001, 813, 437, 321, 600, 1096, 370, 1400, 11, 293, 321, 603, 360, 300, 294, 264, 958, 960, 13, 51114], "temperature": 0.0, "avg_logprob": -0.077119799627774, "compression_ratio": 1.4915254237288136, "no_speech_prob": 3.901479431078769e-06}, {"id": 50, "seek": 38900, "start": 389.0, "end": 413.0, "text": " And so do that, we're going to have to do something even more radical than what we've done so far, and we'll do that in the next video.", "tokens": [50364, 400, 370, 360, 300, 11, 321, 434, 516, 281, 362, 281, 360, 746, 754, 544, 12001, 813, 437, 321, 600, 1096, 370, 1400, 11, 293, 321, 603, 360, 300, 294, 264, 958, 960, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11073124086534655, "compression_ratio": 1.2980769230769231, "no_speech_prob": 3.745597132365219e-05}], "language": "en"}