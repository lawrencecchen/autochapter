{"text": " Let's wrap up. Now before we summarize what we've achieved, I want to talk about how the knowledge we have so far can be used to implement a map, as opposed to a set which we've seen before. So to be perfectly clear about what's going on, the user expects a set that contains sumo-mou-mou-mou-nou-nou-nou-cchi that has contained operations and ad operation whatever else. What we have chosen to do to represent it, us monks in the cave, is we are using a binary search tree as our underlying representation, not an array, not a linked list, but a binary search tree. Now on note, this is not a unique representation. I mean, there's other permutations here, right? This tree could be shaped differently and still be the same set. But the key point here is that we are using a binary search tree. So you might ask yourself, what if I wanted to do a map? How would I do that? Well, what I'm going to ask you to do is try and figure that out. So if instead of expecting a set, the users were expecting a count with each word, what would we need to change about our binary search tree? You could do whatever you want so that we can represent a mapping of wordcats. So if we are pausing and thinking. So it turns out there's a really, really simple solution, which is instead of our binary search tree nodes only storing the key that we care about, we will also store a value or an associated, it doesn't have to be a number. Be whatever we want to map to so that sumo-mo is 1, momo is 2 and so forth. Now in this case, if I actually want to look up, hey, how many times does momo appear in my map? Well, then I do a search of my binary search tree, find the node and then return the value rather than the key. That's pretty nice. And in this case, it'll be long time as long as the tree is bushy and we have a really fast dictionary. Now one quick note is there's no efficient way to look up the other direction. I cannot say, hey, give me all the keys that have value 1. The only way to do that is to iterate over all the nodes. This structure is not ordered in any useful way on the values. So just be aware that sets and maps are pretty closely related, just a matter of what you stick in the nodes of your binary search tree. Alright, so to summarize, we talked about abstract data types and we said that they're defined in terms of operations and not implementations. It's what the user over here is expected. There's lots of useful abstract data types, district sets, map sets, and lists, and Java provides these ones. You can't, you does not have built in district sets, but it has map sets and lists, and it also has many specific implementations. And what we've seen here that Java has something, the thing called a tree map is very closely related to the binary search trees we've been talking about today. But we haven't talked about all the details quite yet. We've seen two ways to implement a set or a map. One is an eraser, and detail, and the earlier lecture. And just now, we also saw how to do it using a binary search tree. I guess technically we also saw it as an ordered length list, but that was just a trick to work our way towards binary search trees. A eraser that we actually implemented before, those were theta in in the worst case. Whereas our binary search tree operations are theta log in, so long as the tree is balanced. And then lastly, oh, that's a little funny. Look, it all fits on the slide. But when I present, it does not. Okay, well, I'm going to try widening this. This is about helps. It did good. Anyway, and then binary search tree implementations wise. When we actually went in the implement operations, search and insert are straightforward, but inserts a little tricky as you'll see when you work on the lab. And the key thing is avoid arm's length recursion. And then deletion is a little more challenging, and the typical approach is hybrid deletion. So one very last thing I want to mention, I want to give a few tips for implementing the binary search tree. So when you work on your lab, I want to note some distinctions. The code that we did in class was naked recursive. You are binary search tree map that you're going to build will not be naked recursive. It'll have nice clothing. For each public method, there is going to be, as you're used to, this trick, when we want to build recursive methods, you're going to want to build a private recursive method. And I really want this technique to be burned into your soul. It's so useful. And when it comes to inserting, I want your code to always set left and right pointers. It should look like this. Like there should be these equals things happening. And that's true, even if nothing actually changes. For example, if you're trying to insert something that's already in the tree, there's going to be this like redundant assignment that happens. So yes, it might feel a little weird that we're having all these equals that are happening. But it's important to have simple code. And lastly, we want to avoid arms linked recursion. These arms linked face cases where you're looking over there to make sure that something's not null. Please don't do this. It makes your code uglier than it would be otherwise. And when you move to more complicated things than a basic binary search tree, this is just a super bad habit to be stuck with. All right, that's it for today. I hope you enjoyed this a little bit meandering version of binary search trees. But I think it's important so we can really appreciate the depth of the ideas. All right, see you next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.32, "text": " Let's wrap up.", "tokens": [50364, 961, 311, 7019, 493, 13, 50480, 50480, 823, 949, 321, 20858, 437, 321, 600, 11042, 11, 286, 528, 281, 751, 466, 577, 264, 3601, 321, 50684, 50684, 362, 370, 1400, 393, 312, 1143, 281, 4445, 257, 4471, 11, 382, 8851, 281, 257, 992, 597, 321, 600, 1612, 949, 13, 51012, 51012, 407, 281, 312, 6239, 1850, 466, 437, 311, 516, 322, 11, 264, 4195, 33280, 257, 992, 300, 8306, 51324, 51324, 2408, 78, 12, 76, 263, 12, 76, 263, 12, 76, 263, 12, 77, 263, 12, 77, 263, 12, 77, 263, 12, 66, 8036, 300, 575, 16212, 7705, 293, 614, 6916, 2035, 1646, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.34503089057074654, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.04789590835571289}, {"id": 1, "seek": 0, "start": 2.32, "end": 6.4, "text": " Now before we summarize what we've achieved, I want to talk about how the knowledge we", "tokens": [50364, 961, 311, 7019, 493, 13, 50480, 50480, 823, 949, 321, 20858, 437, 321, 600, 11042, 11, 286, 528, 281, 751, 466, 577, 264, 3601, 321, 50684, 50684, 362, 370, 1400, 393, 312, 1143, 281, 4445, 257, 4471, 11, 382, 8851, 281, 257, 992, 597, 321, 600, 1612, 949, 13, 51012, 51012, 407, 281, 312, 6239, 1850, 466, 437, 311, 516, 322, 11, 264, 4195, 33280, 257, 992, 300, 8306, 51324, 51324, 2408, 78, 12, 76, 263, 12, 76, 263, 12, 76, 263, 12, 77, 263, 12, 77, 263, 12, 77, 263, 12, 66, 8036, 300, 575, 16212, 7705, 293, 614, 6916, 2035, 1646, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.34503089057074654, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.04789590835571289}, {"id": 2, "seek": 0, "start": 6.4, "end": 12.96, "text": " have so far can be used to implement a map, as opposed to a set which we've seen before.", "tokens": [50364, 961, 311, 7019, 493, 13, 50480, 50480, 823, 949, 321, 20858, 437, 321, 600, 11042, 11, 286, 528, 281, 751, 466, 577, 264, 3601, 321, 50684, 50684, 362, 370, 1400, 393, 312, 1143, 281, 4445, 257, 4471, 11, 382, 8851, 281, 257, 992, 597, 321, 600, 1612, 949, 13, 51012, 51012, 407, 281, 312, 6239, 1850, 466, 437, 311, 516, 322, 11, 264, 4195, 33280, 257, 992, 300, 8306, 51324, 51324, 2408, 78, 12, 76, 263, 12, 76, 263, 12, 76, 263, 12, 77, 263, 12, 77, 263, 12, 77, 263, 12, 66, 8036, 300, 575, 16212, 7705, 293, 614, 6916, 2035, 1646, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.34503089057074654, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.04789590835571289}, {"id": 3, "seek": 0, "start": 12.96, "end": 19.2, "text": " So to be perfectly clear about what's going on, the user expects a set that contains", "tokens": [50364, 961, 311, 7019, 493, 13, 50480, 50480, 823, 949, 321, 20858, 437, 321, 600, 11042, 11, 286, 528, 281, 751, 466, 577, 264, 3601, 321, 50684, 50684, 362, 370, 1400, 393, 312, 1143, 281, 4445, 257, 4471, 11, 382, 8851, 281, 257, 992, 597, 321, 600, 1612, 949, 13, 51012, 51012, 407, 281, 312, 6239, 1850, 466, 437, 311, 516, 322, 11, 264, 4195, 33280, 257, 992, 300, 8306, 51324, 51324, 2408, 78, 12, 76, 263, 12, 76, 263, 12, 76, 263, 12, 77, 263, 12, 77, 263, 12, 77, 263, 12, 66, 8036, 300, 575, 16212, 7705, 293, 614, 6916, 2035, 1646, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.34503089057074654, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.04789590835571289}, {"id": 4, "seek": 0, "start": 19.2, "end": 25.44, "text": " sumo-mou-mou-mou-nou-nou-nou-cchi that has contained operations and ad operation whatever else.", "tokens": [50364, 961, 311, 7019, 493, 13, 50480, 50480, 823, 949, 321, 20858, 437, 321, 600, 11042, 11, 286, 528, 281, 751, 466, 577, 264, 3601, 321, 50684, 50684, 362, 370, 1400, 393, 312, 1143, 281, 4445, 257, 4471, 11, 382, 8851, 281, 257, 992, 597, 321, 600, 1612, 949, 13, 51012, 51012, 407, 281, 312, 6239, 1850, 466, 437, 311, 516, 322, 11, 264, 4195, 33280, 257, 992, 300, 8306, 51324, 51324, 2408, 78, 12, 76, 263, 12, 76, 263, 12, 76, 263, 12, 77, 263, 12, 77, 263, 12, 77, 263, 12, 66, 8036, 300, 575, 16212, 7705, 293, 614, 6916, 2035, 1646, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.34503089057074654, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.04789590835571289}, {"id": 5, "seek": 2544, "start": 25.44, "end": 30.96, "text": " What we have chosen to do to represent it, us monks in the cave, is we are using a binary search", "tokens": [50364, 708, 321, 362, 8614, 281, 360, 281, 2906, 309, 11, 505, 32201, 294, 264, 11730, 11, 307, 321, 366, 1228, 257, 17434, 3164, 50640, 50640, 4230, 382, 527, 14217, 10290, 11, 406, 364, 10225, 11, 406, 257, 9408, 1329, 11, 457, 257, 17434, 3164, 4230, 13, 50916, 50968, 823, 322, 3637, 11, 341, 307, 406, 257, 3845, 10290, 13, 286, 914, 11, 456, 311, 661, 4784, 325, 763, 510, 11, 51184, 51184, 558, 30, 639, 4230, 727, 312, 13475, 7614, 293, 920, 312, 264, 912, 992, 13, 583, 264, 2141, 935, 510, 307, 300, 51496, 51496, 321, 366, 1228, 257, 17434, 3164, 4230, 13, 407, 291, 1062, 1029, 1803, 11, 437, 498, 286, 1415, 281, 360, 257, 4471, 30, 1012, 576, 286, 360, 300, 30, 51836], "temperature": 0.0, "avg_logprob": -0.15041756629943848, "compression_ratio": 1.7640845070422535, "no_speech_prob": 6.0861388192279264e-05}, {"id": 6, "seek": 2544, "start": 30.96, "end": 36.480000000000004, "text": " tree as our underlying representation, not an array, not a linked list, but a binary search tree.", "tokens": [50364, 708, 321, 362, 8614, 281, 360, 281, 2906, 309, 11, 505, 32201, 294, 264, 11730, 11, 307, 321, 366, 1228, 257, 17434, 3164, 50640, 50640, 4230, 382, 527, 14217, 10290, 11, 406, 364, 10225, 11, 406, 257, 9408, 1329, 11, 457, 257, 17434, 3164, 4230, 13, 50916, 50968, 823, 322, 3637, 11, 341, 307, 406, 257, 3845, 10290, 13, 286, 914, 11, 456, 311, 661, 4784, 325, 763, 510, 11, 51184, 51184, 558, 30, 639, 4230, 727, 312, 13475, 7614, 293, 920, 312, 264, 912, 992, 13, 583, 264, 2141, 935, 510, 307, 300, 51496, 51496, 321, 366, 1228, 257, 17434, 3164, 4230, 13, 407, 291, 1062, 1029, 1803, 11, 437, 498, 286, 1415, 281, 360, 257, 4471, 30, 1012, 576, 286, 360, 300, 30, 51836], "temperature": 0.0, "avg_logprob": -0.15041756629943848, "compression_ratio": 1.7640845070422535, "no_speech_prob": 6.0861388192279264e-05}, {"id": 7, "seek": 2544, "start": 37.52, "end": 41.84, "text": " Now on note, this is not a unique representation. I mean, there's other permutations here,", "tokens": [50364, 708, 321, 362, 8614, 281, 360, 281, 2906, 309, 11, 505, 32201, 294, 264, 11730, 11, 307, 321, 366, 1228, 257, 17434, 3164, 50640, 50640, 4230, 382, 527, 14217, 10290, 11, 406, 364, 10225, 11, 406, 257, 9408, 1329, 11, 457, 257, 17434, 3164, 4230, 13, 50916, 50968, 823, 322, 3637, 11, 341, 307, 406, 257, 3845, 10290, 13, 286, 914, 11, 456, 311, 661, 4784, 325, 763, 510, 11, 51184, 51184, 558, 30, 639, 4230, 727, 312, 13475, 7614, 293, 920, 312, 264, 912, 992, 13, 583, 264, 2141, 935, 510, 307, 300, 51496, 51496, 321, 366, 1228, 257, 17434, 3164, 4230, 13, 407, 291, 1062, 1029, 1803, 11, 437, 498, 286, 1415, 281, 360, 257, 4471, 30, 1012, 576, 286, 360, 300, 30, 51836], "temperature": 0.0, "avg_logprob": -0.15041756629943848, "compression_ratio": 1.7640845070422535, "no_speech_prob": 6.0861388192279264e-05}, {"id": 8, "seek": 2544, "start": 41.84, "end": 48.08, "text": " right? This tree could be shaped differently and still be the same set. But the key point here is that", "tokens": [50364, 708, 321, 362, 8614, 281, 360, 281, 2906, 309, 11, 505, 32201, 294, 264, 11730, 11, 307, 321, 366, 1228, 257, 17434, 3164, 50640, 50640, 4230, 382, 527, 14217, 10290, 11, 406, 364, 10225, 11, 406, 257, 9408, 1329, 11, 457, 257, 17434, 3164, 4230, 13, 50916, 50968, 823, 322, 3637, 11, 341, 307, 406, 257, 3845, 10290, 13, 286, 914, 11, 456, 311, 661, 4784, 325, 763, 510, 11, 51184, 51184, 558, 30, 639, 4230, 727, 312, 13475, 7614, 293, 920, 312, 264, 912, 992, 13, 583, 264, 2141, 935, 510, 307, 300, 51496, 51496, 321, 366, 1228, 257, 17434, 3164, 4230, 13, 407, 291, 1062, 1029, 1803, 11, 437, 498, 286, 1415, 281, 360, 257, 4471, 30, 1012, 576, 286, 360, 300, 30, 51836], "temperature": 0.0, "avg_logprob": -0.15041756629943848, "compression_ratio": 1.7640845070422535, "no_speech_prob": 6.0861388192279264e-05}, {"id": 9, "seek": 4808, "start": 48.08, "end": 54.8, "text": " we are using a binary search tree. So you might ask yourself, what if I wanted to do a map? How would I do that?", "tokens": [50364, 321, 366, 1228, 257, 17434, 3164, 4230, 13, 407, 291, 1062, 1029, 1803, 11, 437, 498, 286, 1415, 281, 360, 257, 4471, 30, 1012, 576, 286, 360, 300, 30, 50700, 50744, 1042, 11, 437, 286, 478, 516, 281, 1029, 291, 281, 360, 307, 853, 293, 2573, 300, 484, 13, 407, 498, 2602, 295, 9650, 257, 992, 11, 51064, 51064, 264, 5022, 645, 9650, 257, 1207, 365, 1184, 1349, 11, 437, 576, 321, 643, 281, 1319, 466, 527, 17434, 51344, 51344, 3164, 4230, 30, 509, 727, 360, 2035, 291, 528, 370, 300, 321, 393, 2906, 257, 18350, 295, 1349, 66, 1720, 13, 51576, 51720], "temperature": 0.0, "avg_logprob": -0.14148046402704148, "compression_ratio": 1.6835443037974684, "no_speech_prob": 8.749329572310671e-05}, {"id": 10, "seek": 4808, "start": 55.68, "end": 62.08, "text": " Well, what I'm going to ask you to do is try and figure that out. So if instead of expecting a set,", "tokens": [50364, 321, 366, 1228, 257, 17434, 3164, 4230, 13, 407, 291, 1062, 1029, 1803, 11, 437, 498, 286, 1415, 281, 360, 257, 4471, 30, 1012, 576, 286, 360, 300, 30, 50700, 50744, 1042, 11, 437, 286, 478, 516, 281, 1029, 291, 281, 360, 307, 853, 293, 2573, 300, 484, 13, 407, 498, 2602, 295, 9650, 257, 992, 11, 51064, 51064, 264, 5022, 645, 9650, 257, 1207, 365, 1184, 1349, 11, 437, 576, 321, 643, 281, 1319, 466, 527, 17434, 51344, 51344, 3164, 4230, 30, 509, 727, 360, 2035, 291, 528, 370, 300, 321, 393, 2906, 257, 18350, 295, 1349, 66, 1720, 13, 51576, 51720], "temperature": 0.0, "avg_logprob": -0.14148046402704148, "compression_ratio": 1.6835443037974684, "no_speech_prob": 8.749329572310671e-05}, {"id": 11, "seek": 4808, "start": 62.08, "end": 67.68, "text": " the users were expecting a count with each word, what would we need to change about our binary", "tokens": [50364, 321, 366, 1228, 257, 17434, 3164, 4230, 13, 407, 291, 1062, 1029, 1803, 11, 437, 498, 286, 1415, 281, 360, 257, 4471, 30, 1012, 576, 286, 360, 300, 30, 50700, 50744, 1042, 11, 437, 286, 478, 516, 281, 1029, 291, 281, 360, 307, 853, 293, 2573, 300, 484, 13, 407, 498, 2602, 295, 9650, 257, 992, 11, 51064, 51064, 264, 5022, 645, 9650, 257, 1207, 365, 1184, 1349, 11, 437, 576, 321, 643, 281, 1319, 466, 527, 17434, 51344, 51344, 3164, 4230, 30, 509, 727, 360, 2035, 291, 528, 370, 300, 321, 393, 2906, 257, 18350, 295, 1349, 66, 1720, 13, 51576, 51720], "temperature": 0.0, "avg_logprob": -0.14148046402704148, "compression_ratio": 1.6835443037974684, "no_speech_prob": 8.749329572310671e-05}, {"id": 12, "seek": 4808, "start": 67.68, "end": 72.32, "text": " search tree? You could do whatever you want so that we can represent a mapping of wordcats.", "tokens": [50364, 321, 366, 1228, 257, 17434, 3164, 4230, 13, 407, 291, 1062, 1029, 1803, 11, 437, 498, 286, 1415, 281, 360, 257, 4471, 30, 1012, 576, 286, 360, 300, 30, 50700, 50744, 1042, 11, 437, 286, 478, 516, 281, 1029, 291, 281, 360, 307, 853, 293, 2573, 300, 484, 13, 407, 498, 2602, 295, 9650, 257, 992, 11, 51064, 51064, 264, 5022, 645, 9650, 257, 1207, 365, 1184, 1349, 11, 437, 576, 321, 643, 281, 1319, 466, 527, 17434, 51344, 51344, 3164, 4230, 30, 509, 727, 360, 2035, 291, 528, 370, 300, 321, 393, 2906, 257, 18350, 295, 1349, 66, 1720, 13, 51576, 51720], "temperature": 0.0, "avg_logprob": -0.14148046402704148, "compression_ratio": 1.6835443037974684, "no_speech_prob": 8.749329572310671e-05}, {"id": 13, "seek": 7232, "start": 72.32, "end": 81.44, "text": " So if we are pausing and thinking. So it turns out there's a really, really simple solution,", "tokens": [50364, 407, 498, 321, 366, 2502, 7981, 293, 1953, 13, 407, 309, 4523, 484, 456, 311, 257, 534, 11, 534, 2199, 3827, 11, 50820, 50820, 597, 307, 2602, 295, 527, 17434, 3164, 4230, 13891, 787, 26085, 264, 2141, 300, 321, 1127, 466, 11, 51160, 51160, 321, 486, 611, 3531, 257, 2158, 420, 364, 6615, 11, 309, 1177, 380, 362, 281, 312, 257, 1230, 13, 51348, 51396, 879, 2035, 321, 528, 281, 4471, 281, 370, 300, 2408, 78, 12, 3280, 307, 502, 11, 275, 13395, 307, 568, 293, 370, 5220, 13, 51660, 51704], "temperature": 0.0, "avg_logprob": -0.2616601144113848, "compression_ratio": 1.536697247706422, "no_speech_prob": 1.05408698800602e-05}, {"id": 14, "seek": 7232, "start": 81.44, "end": 88.24, "text": " which is instead of our binary search tree nodes only storing the key that we care about,", "tokens": [50364, 407, 498, 321, 366, 2502, 7981, 293, 1953, 13, 407, 309, 4523, 484, 456, 311, 257, 534, 11, 534, 2199, 3827, 11, 50820, 50820, 597, 307, 2602, 295, 527, 17434, 3164, 4230, 13891, 787, 26085, 264, 2141, 300, 321, 1127, 466, 11, 51160, 51160, 321, 486, 611, 3531, 257, 2158, 420, 364, 6615, 11, 309, 1177, 380, 362, 281, 312, 257, 1230, 13, 51348, 51396, 879, 2035, 321, 528, 281, 4471, 281, 370, 300, 2408, 78, 12, 3280, 307, 502, 11, 275, 13395, 307, 568, 293, 370, 5220, 13, 51660, 51704], "temperature": 0.0, "avg_logprob": -0.2616601144113848, "compression_ratio": 1.536697247706422, "no_speech_prob": 1.05408698800602e-05}, {"id": 15, "seek": 7232, "start": 88.24, "end": 92.0, "text": " we will also store a value or an associated, it doesn't have to be a number.", "tokens": [50364, 407, 498, 321, 366, 2502, 7981, 293, 1953, 13, 407, 309, 4523, 484, 456, 311, 257, 534, 11, 534, 2199, 3827, 11, 50820, 50820, 597, 307, 2602, 295, 527, 17434, 3164, 4230, 13891, 787, 26085, 264, 2141, 300, 321, 1127, 466, 11, 51160, 51160, 321, 486, 611, 3531, 257, 2158, 420, 364, 6615, 11, 309, 1177, 380, 362, 281, 312, 257, 1230, 13, 51348, 51396, 879, 2035, 321, 528, 281, 4471, 281, 370, 300, 2408, 78, 12, 3280, 307, 502, 11, 275, 13395, 307, 568, 293, 370, 5220, 13, 51660, 51704], "temperature": 0.0, "avg_logprob": -0.2616601144113848, "compression_ratio": 1.536697247706422, "no_speech_prob": 1.05408698800602e-05}, {"id": 16, "seek": 7232, "start": 92.96, "end": 98.24, "text": " Be whatever we want to map to so that sumo-mo is 1, momo is 2 and so forth.", "tokens": [50364, 407, 498, 321, 366, 2502, 7981, 293, 1953, 13, 407, 309, 4523, 484, 456, 311, 257, 534, 11, 534, 2199, 3827, 11, 50820, 50820, 597, 307, 2602, 295, 527, 17434, 3164, 4230, 13891, 787, 26085, 264, 2141, 300, 321, 1127, 466, 11, 51160, 51160, 321, 486, 611, 3531, 257, 2158, 420, 364, 6615, 11, 309, 1177, 380, 362, 281, 312, 257, 1230, 13, 51348, 51396, 879, 2035, 321, 528, 281, 4471, 281, 370, 300, 2408, 78, 12, 3280, 307, 502, 11, 275, 13395, 307, 568, 293, 370, 5220, 13, 51660, 51704], "temperature": 0.0, "avg_logprob": -0.2616601144113848, "compression_ratio": 1.536697247706422, "no_speech_prob": 1.05408698800602e-05}, {"id": 17, "seek": 9824, "start": 98.24, "end": 105.83999999999999, "text": " Now in this case, if I actually want to look up, hey, how many times does momo appear in my map?", "tokens": [50364, 823, 294, 341, 1389, 11, 498, 286, 767, 528, 281, 574, 493, 11, 4177, 11, 577, 867, 1413, 775, 275, 13395, 4204, 294, 452, 4471, 30, 50744, 50764, 1042, 11, 550, 286, 360, 257, 3164, 295, 452, 17434, 3164, 4230, 11, 915, 264, 9984, 293, 550, 2736, 264, 2158, 2831, 813, 264, 2141, 13, 51120, 51204, 663, 311, 1238, 1481, 13, 400, 294, 341, 1389, 11, 309, 603, 312, 938, 565, 382, 938, 382, 264, 4230, 307, 1255, 3495, 293, 321, 362, 257, 534, 2370, 25890, 13, 51544, 51596, 823, 472, 1702, 3637, 307, 456, 311, 572, 7148, 636, 281, 574, 493, 264, 661, 3513, 13, 286, 2644, 584, 11, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.20782530935187088, "compression_ratio": 1.640926640926641, "no_speech_prob": 3.5505665437085554e-05}, {"id": 18, "seek": 9824, "start": 106.24, "end": 113.36, "text": " Well, then I do a search of my binary search tree, find the node and then return the value rather than the key.", "tokens": [50364, 823, 294, 341, 1389, 11, 498, 286, 767, 528, 281, 574, 493, 11, 4177, 11, 577, 867, 1413, 775, 275, 13395, 4204, 294, 452, 4471, 30, 50744, 50764, 1042, 11, 550, 286, 360, 257, 3164, 295, 452, 17434, 3164, 4230, 11, 915, 264, 9984, 293, 550, 2736, 264, 2158, 2831, 813, 264, 2141, 13, 51120, 51204, 663, 311, 1238, 1481, 13, 400, 294, 341, 1389, 11, 309, 603, 312, 938, 565, 382, 938, 382, 264, 4230, 307, 1255, 3495, 293, 321, 362, 257, 534, 2370, 25890, 13, 51544, 51596, 823, 472, 1702, 3637, 307, 456, 311, 572, 7148, 636, 281, 574, 493, 264, 661, 3513, 13, 286, 2644, 584, 11, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.20782530935187088, "compression_ratio": 1.640926640926641, "no_speech_prob": 3.5505665437085554e-05}, {"id": 19, "seek": 9824, "start": 115.03999999999999, "end": 121.84, "text": " That's pretty nice. And in this case, it'll be long time as long as the tree is bushy and we have a really fast dictionary.", "tokens": [50364, 823, 294, 341, 1389, 11, 498, 286, 767, 528, 281, 574, 493, 11, 4177, 11, 577, 867, 1413, 775, 275, 13395, 4204, 294, 452, 4471, 30, 50744, 50764, 1042, 11, 550, 286, 360, 257, 3164, 295, 452, 17434, 3164, 4230, 11, 915, 264, 9984, 293, 550, 2736, 264, 2158, 2831, 813, 264, 2141, 13, 51120, 51204, 663, 311, 1238, 1481, 13, 400, 294, 341, 1389, 11, 309, 603, 312, 938, 565, 382, 938, 382, 264, 4230, 307, 1255, 3495, 293, 321, 362, 257, 534, 2370, 25890, 13, 51544, 51596, 823, 472, 1702, 3637, 307, 456, 311, 572, 7148, 636, 281, 574, 493, 264, 661, 3513, 13, 286, 2644, 584, 11, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.20782530935187088, "compression_ratio": 1.640926640926641, "no_speech_prob": 3.5505665437085554e-05}, {"id": 20, "seek": 9824, "start": 122.88, "end": 126.96, "text": " Now one quick note is there's no efficient way to look up the other direction. I cannot say,", "tokens": [50364, 823, 294, 341, 1389, 11, 498, 286, 767, 528, 281, 574, 493, 11, 4177, 11, 577, 867, 1413, 775, 275, 13395, 4204, 294, 452, 4471, 30, 50744, 50764, 1042, 11, 550, 286, 360, 257, 3164, 295, 452, 17434, 3164, 4230, 11, 915, 264, 9984, 293, 550, 2736, 264, 2158, 2831, 813, 264, 2141, 13, 51120, 51204, 663, 311, 1238, 1481, 13, 400, 294, 341, 1389, 11, 309, 603, 312, 938, 565, 382, 938, 382, 264, 4230, 307, 1255, 3495, 293, 321, 362, 257, 534, 2370, 25890, 13, 51544, 51596, 823, 472, 1702, 3637, 307, 456, 311, 572, 7148, 636, 281, 574, 493, 264, 661, 3513, 13, 286, 2644, 584, 11, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.20782530935187088, "compression_ratio": 1.640926640926641, "no_speech_prob": 3.5505665437085554e-05}, {"id": 21, "seek": 12696, "start": 126.96, "end": 132.4, "text": " hey, give me all the keys that have value 1. The only way to do that is to iterate over all the nodes.", "tokens": [50364, 4177, 11, 976, 385, 439, 264, 9317, 300, 362, 2158, 502, 13, 440, 787, 636, 281, 360, 300, 307, 281, 44497, 670, 439, 264, 13891, 13, 50636, 50636, 639, 3877, 307, 406, 8866, 294, 604, 4420, 636, 322, 264, 4190, 13, 50812, 50880, 407, 445, 312, 3650, 300, 6352, 293, 11317, 366, 1238, 8185, 4077, 11, 445, 257, 1871, 295, 437, 291, 2897, 51128, 51128, 294, 264, 13891, 295, 428, 17434, 3164, 4230, 13, 51212, 51276, 2798, 11, 370, 281, 20858, 11, 321, 2825, 466, 12649, 1412, 3467, 293, 321, 848, 300, 436, 434, 7642, 294, 2115, 295, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.16355574364755668, "compression_ratio": 1.623015873015873, "no_speech_prob": 1.2861178220191505e-06}, {"id": 22, "seek": 12696, "start": 132.4, "end": 135.92, "text": " This structure is not ordered in any useful way on the values.", "tokens": [50364, 4177, 11, 976, 385, 439, 264, 9317, 300, 362, 2158, 502, 13, 440, 787, 636, 281, 360, 300, 307, 281, 44497, 670, 439, 264, 13891, 13, 50636, 50636, 639, 3877, 307, 406, 8866, 294, 604, 4420, 636, 322, 264, 4190, 13, 50812, 50880, 407, 445, 312, 3650, 300, 6352, 293, 11317, 366, 1238, 8185, 4077, 11, 445, 257, 1871, 295, 437, 291, 2897, 51128, 51128, 294, 264, 13891, 295, 428, 17434, 3164, 4230, 13, 51212, 51276, 2798, 11, 370, 281, 20858, 11, 321, 2825, 466, 12649, 1412, 3467, 293, 321, 848, 300, 436, 434, 7642, 294, 2115, 295, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.16355574364755668, "compression_ratio": 1.623015873015873, "no_speech_prob": 1.2861178220191505e-06}, {"id": 23, "seek": 12696, "start": 137.28, "end": 142.24, "text": " So just be aware that sets and maps are pretty closely related, just a matter of what you stick", "tokens": [50364, 4177, 11, 976, 385, 439, 264, 9317, 300, 362, 2158, 502, 13, 440, 787, 636, 281, 360, 300, 307, 281, 44497, 670, 439, 264, 13891, 13, 50636, 50636, 639, 3877, 307, 406, 8866, 294, 604, 4420, 636, 322, 264, 4190, 13, 50812, 50880, 407, 445, 312, 3650, 300, 6352, 293, 11317, 366, 1238, 8185, 4077, 11, 445, 257, 1871, 295, 437, 291, 2897, 51128, 51128, 294, 264, 13891, 295, 428, 17434, 3164, 4230, 13, 51212, 51276, 2798, 11, 370, 281, 20858, 11, 321, 2825, 466, 12649, 1412, 3467, 293, 321, 848, 300, 436, 434, 7642, 294, 2115, 295, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.16355574364755668, "compression_ratio": 1.623015873015873, "no_speech_prob": 1.2861178220191505e-06}, {"id": 24, "seek": 12696, "start": 142.24, "end": 143.92, "text": " in the nodes of your binary search tree.", "tokens": [50364, 4177, 11, 976, 385, 439, 264, 9317, 300, 362, 2158, 502, 13, 440, 787, 636, 281, 360, 300, 307, 281, 44497, 670, 439, 264, 13891, 13, 50636, 50636, 639, 3877, 307, 406, 8866, 294, 604, 4420, 636, 322, 264, 4190, 13, 50812, 50880, 407, 445, 312, 3650, 300, 6352, 293, 11317, 366, 1238, 8185, 4077, 11, 445, 257, 1871, 295, 437, 291, 2897, 51128, 51128, 294, 264, 13891, 295, 428, 17434, 3164, 4230, 13, 51212, 51276, 2798, 11, 370, 281, 20858, 11, 321, 2825, 466, 12649, 1412, 3467, 293, 321, 848, 300, 436, 434, 7642, 294, 2115, 295, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.16355574364755668, "compression_ratio": 1.623015873015873, "no_speech_prob": 1.2861178220191505e-06}, {"id": 25, "seek": 12696, "start": 145.2, "end": 150.72, "text": " Alright, so to summarize, we talked about abstract data types and we said that they're defined in terms of", "tokens": [50364, 4177, 11, 976, 385, 439, 264, 9317, 300, 362, 2158, 502, 13, 440, 787, 636, 281, 360, 300, 307, 281, 44497, 670, 439, 264, 13891, 13, 50636, 50636, 639, 3877, 307, 406, 8866, 294, 604, 4420, 636, 322, 264, 4190, 13, 50812, 50880, 407, 445, 312, 3650, 300, 6352, 293, 11317, 366, 1238, 8185, 4077, 11, 445, 257, 1871, 295, 437, 291, 2897, 51128, 51128, 294, 264, 13891, 295, 428, 17434, 3164, 4230, 13, 51212, 51276, 2798, 11, 370, 281, 20858, 11, 321, 2825, 466, 12649, 1412, 3467, 293, 321, 848, 300, 436, 434, 7642, 294, 2115, 295, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.16355574364755668, "compression_ratio": 1.623015873015873, "no_speech_prob": 1.2861178220191505e-06}, {"id": 26, "seek": 15072, "start": 150.72, "end": 157.36, "text": " operations and not implementations. It's what the user over here is expected. There's lots of useful", "tokens": [50364, 7705, 293, 406, 4445, 763, 13, 467, 311, 437, 264, 4195, 670, 510, 307, 5176, 13, 821, 311, 3195, 295, 4420, 50696, 50696, 12649, 1412, 3467, 11, 6566, 6352, 11, 4471, 6352, 11, 293, 14511, 11, 293, 10745, 6417, 613, 2306, 13, 509, 393, 380, 11, 50992, 50992, 291, 775, 406, 362, 3094, 294, 6566, 6352, 11, 457, 309, 575, 4471, 6352, 293, 14511, 11, 293, 309, 611, 575, 867, 51224, 51224, 2685, 4445, 763, 13, 400, 437, 321, 600, 1612, 510, 300, 10745, 575, 746, 11, 264, 551, 1219, 257, 51496, 51496, 4230, 4471, 307, 588, 8185, 4077, 281, 264, 17434, 3164, 5852, 321, 600, 668, 1417, 466, 965, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14522812884786854, "compression_ratio": 1.794007490636704, "no_speech_prob": 3.1259278330253437e-06}, {"id": 27, "seek": 15072, "start": 157.36, "end": 163.28, "text": " abstract data types, district sets, map sets, and lists, and Java provides these ones. You can't,", "tokens": [50364, 7705, 293, 406, 4445, 763, 13, 467, 311, 437, 264, 4195, 670, 510, 307, 5176, 13, 821, 311, 3195, 295, 4420, 50696, 50696, 12649, 1412, 3467, 11, 6566, 6352, 11, 4471, 6352, 11, 293, 14511, 11, 293, 10745, 6417, 613, 2306, 13, 509, 393, 380, 11, 50992, 50992, 291, 775, 406, 362, 3094, 294, 6566, 6352, 11, 457, 309, 575, 4471, 6352, 293, 14511, 11, 293, 309, 611, 575, 867, 51224, 51224, 2685, 4445, 763, 13, 400, 437, 321, 600, 1612, 510, 300, 10745, 575, 746, 11, 264, 551, 1219, 257, 51496, 51496, 4230, 4471, 307, 588, 8185, 4077, 281, 264, 17434, 3164, 5852, 321, 600, 668, 1417, 466, 965, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14522812884786854, "compression_ratio": 1.794007490636704, "no_speech_prob": 3.1259278330253437e-06}, {"id": 28, "seek": 15072, "start": 163.28, "end": 167.92, "text": " you does not have built in district sets, but it has map sets and lists, and it also has many", "tokens": [50364, 7705, 293, 406, 4445, 763, 13, 467, 311, 437, 264, 4195, 670, 510, 307, 5176, 13, 821, 311, 3195, 295, 4420, 50696, 50696, 12649, 1412, 3467, 11, 6566, 6352, 11, 4471, 6352, 11, 293, 14511, 11, 293, 10745, 6417, 613, 2306, 13, 509, 393, 380, 11, 50992, 50992, 291, 775, 406, 362, 3094, 294, 6566, 6352, 11, 457, 309, 575, 4471, 6352, 293, 14511, 11, 293, 309, 611, 575, 867, 51224, 51224, 2685, 4445, 763, 13, 400, 437, 321, 600, 1612, 510, 300, 10745, 575, 746, 11, 264, 551, 1219, 257, 51496, 51496, 4230, 4471, 307, 588, 8185, 4077, 281, 264, 17434, 3164, 5852, 321, 600, 668, 1417, 466, 965, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14522812884786854, "compression_ratio": 1.794007490636704, "no_speech_prob": 3.1259278330253437e-06}, {"id": 29, "seek": 15072, "start": 167.92, "end": 173.36, "text": " specific implementations. And what we've seen here that Java has something, the thing called a", "tokens": [50364, 7705, 293, 406, 4445, 763, 13, 467, 311, 437, 264, 4195, 670, 510, 307, 5176, 13, 821, 311, 3195, 295, 4420, 50696, 50696, 12649, 1412, 3467, 11, 6566, 6352, 11, 4471, 6352, 11, 293, 14511, 11, 293, 10745, 6417, 613, 2306, 13, 509, 393, 380, 11, 50992, 50992, 291, 775, 406, 362, 3094, 294, 6566, 6352, 11, 457, 309, 575, 4471, 6352, 293, 14511, 11, 293, 309, 611, 575, 867, 51224, 51224, 2685, 4445, 763, 13, 400, 437, 321, 600, 1612, 510, 300, 10745, 575, 746, 11, 264, 551, 1219, 257, 51496, 51496, 4230, 4471, 307, 588, 8185, 4077, 281, 264, 17434, 3164, 5852, 321, 600, 668, 1417, 466, 965, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14522812884786854, "compression_ratio": 1.794007490636704, "no_speech_prob": 3.1259278330253437e-06}, {"id": 30, "seek": 15072, "start": 173.36, "end": 178.8, "text": " tree map is very closely related to the binary search trees we've been talking about today.", "tokens": [50364, 7705, 293, 406, 4445, 763, 13, 467, 311, 437, 264, 4195, 670, 510, 307, 5176, 13, 821, 311, 3195, 295, 4420, 50696, 50696, 12649, 1412, 3467, 11, 6566, 6352, 11, 4471, 6352, 11, 293, 14511, 11, 293, 10745, 6417, 613, 2306, 13, 509, 393, 380, 11, 50992, 50992, 291, 775, 406, 362, 3094, 294, 6566, 6352, 11, 457, 309, 575, 4471, 6352, 293, 14511, 11, 293, 309, 611, 575, 867, 51224, 51224, 2685, 4445, 763, 13, 400, 437, 321, 600, 1612, 510, 300, 10745, 575, 746, 11, 264, 551, 1219, 257, 51496, 51496, 4230, 4471, 307, 588, 8185, 4077, 281, 264, 17434, 3164, 5852, 321, 600, 668, 1417, 466, 965, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14522812884786854, "compression_ratio": 1.794007490636704, "no_speech_prob": 3.1259278330253437e-06}, {"id": 31, "seek": 17880, "start": 178.8, "end": 184.88000000000002, "text": " But we haven't talked about all the details quite yet. We've seen two ways to implement a set or a map.", "tokens": [50364, 583, 321, 2378, 380, 2825, 466, 439, 264, 4365, 1596, 1939, 13, 492, 600, 1612, 732, 2098, 281, 4445, 257, 992, 420, 257, 4471, 13, 50668, 50684, 1485, 307, 364, 46018, 11, 293, 2607, 11, 293, 264, 3071, 7991, 13, 400, 445, 586, 11, 321, 611, 1866, 577, 281, 360, 309, 1228, 257, 17434, 50992, 50992, 3164, 4230, 13, 286, 2041, 12120, 321, 611, 1866, 309, 382, 364, 8866, 4641, 1329, 11, 457, 300, 390, 445, 257, 4282, 51232, 51232, 281, 589, 527, 636, 3030, 17434, 3164, 5852, 13, 316, 46018, 300, 321, 767, 12270, 949, 11, 51492, 51492, 729, 645, 9725, 294, 294, 264, 5855, 1389, 13, 13813, 527, 17434, 3164, 4230, 7705, 366, 9725, 3565, 294, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.18810355954053926, "compression_ratio": 1.7465277777777777, "no_speech_prob": 6.423221066143014e-07}, {"id": 32, "seek": 17880, "start": 185.20000000000002, "end": 191.36, "text": " One is an eraser, and detail, and the earlier lecture. And just now, we also saw how to do it using a binary", "tokens": [50364, 583, 321, 2378, 380, 2825, 466, 439, 264, 4365, 1596, 1939, 13, 492, 600, 1612, 732, 2098, 281, 4445, 257, 992, 420, 257, 4471, 13, 50668, 50684, 1485, 307, 364, 46018, 11, 293, 2607, 11, 293, 264, 3071, 7991, 13, 400, 445, 586, 11, 321, 611, 1866, 577, 281, 360, 309, 1228, 257, 17434, 50992, 50992, 3164, 4230, 13, 286, 2041, 12120, 321, 611, 1866, 309, 382, 364, 8866, 4641, 1329, 11, 457, 300, 390, 445, 257, 4282, 51232, 51232, 281, 589, 527, 636, 3030, 17434, 3164, 5852, 13, 316, 46018, 300, 321, 767, 12270, 949, 11, 51492, 51492, 729, 645, 9725, 294, 294, 264, 5855, 1389, 13, 13813, 527, 17434, 3164, 4230, 7705, 366, 9725, 3565, 294, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.18810355954053926, "compression_ratio": 1.7465277777777777, "no_speech_prob": 6.423221066143014e-07}, {"id": 33, "seek": 17880, "start": 191.36, "end": 196.16000000000003, "text": " search tree. I guess technically we also saw it as an ordered length list, but that was just a trick", "tokens": [50364, 583, 321, 2378, 380, 2825, 466, 439, 264, 4365, 1596, 1939, 13, 492, 600, 1612, 732, 2098, 281, 4445, 257, 992, 420, 257, 4471, 13, 50668, 50684, 1485, 307, 364, 46018, 11, 293, 2607, 11, 293, 264, 3071, 7991, 13, 400, 445, 586, 11, 321, 611, 1866, 577, 281, 360, 309, 1228, 257, 17434, 50992, 50992, 3164, 4230, 13, 286, 2041, 12120, 321, 611, 1866, 309, 382, 364, 8866, 4641, 1329, 11, 457, 300, 390, 445, 257, 4282, 51232, 51232, 281, 589, 527, 636, 3030, 17434, 3164, 5852, 13, 316, 46018, 300, 321, 767, 12270, 949, 11, 51492, 51492, 729, 645, 9725, 294, 294, 264, 5855, 1389, 13, 13813, 527, 17434, 3164, 4230, 7705, 366, 9725, 3565, 294, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.18810355954053926, "compression_ratio": 1.7465277777777777, "no_speech_prob": 6.423221066143014e-07}, {"id": 34, "seek": 17880, "start": 196.16000000000003, "end": 201.36, "text": " to work our way towards binary search trees. A eraser that we actually implemented before,", "tokens": [50364, 583, 321, 2378, 380, 2825, 466, 439, 264, 4365, 1596, 1939, 13, 492, 600, 1612, 732, 2098, 281, 4445, 257, 992, 420, 257, 4471, 13, 50668, 50684, 1485, 307, 364, 46018, 11, 293, 2607, 11, 293, 264, 3071, 7991, 13, 400, 445, 586, 11, 321, 611, 1866, 577, 281, 360, 309, 1228, 257, 17434, 50992, 50992, 3164, 4230, 13, 286, 2041, 12120, 321, 611, 1866, 309, 382, 364, 8866, 4641, 1329, 11, 457, 300, 390, 445, 257, 4282, 51232, 51232, 281, 589, 527, 636, 3030, 17434, 3164, 5852, 13, 316, 46018, 300, 321, 767, 12270, 949, 11, 51492, 51492, 729, 645, 9725, 294, 294, 264, 5855, 1389, 13, 13813, 527, 17434, 3164, 4230, 7705, 366, 9725, 3565, 294, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.18810355954053926, "compression_ratio": 1.7465277777777777, "no_speech_prob": 6.423221066143014e-07}, {"id": 35, "seek": 17880, "start": 201.36, "end": 207.12, "text": " those were theta in in the worst case. Whereas our binary search tree operations are theta log in,", "tokens": [50364, 583, 321, 2378, 380, 2825, 466, 439, 264, 4365, 1596, 1939, 13, 492, 600, 1612, 732, 2098, 281, 4445, 257, 992, 420, 257, 4471, 13, 50668, 50684, 1485, 307, 364, 46018, 11, 293, 2607, 11, 293, 264, 3071, 7991, 13, 400, 445, 586, 11, 321, 611, 1866, 577, 281, 360, 309, 1228, 257, 17434, 50992, 50992, 3164, 4230, 13, 286, 2041, 12120, 321, 611, 1866, 309, 382, 364, 8866, 4641, 1329, 11, 457, 300, 390, 445, 257, 4282, 51232, 51232, 281, 589, 527, 636, 3030, 17434, 3164, 5852, 13, 316, 46018, 300, 321, 767, 12270, 949, 11, 51492, 51492, 729, 645, 9725, 294, 294, 264, 5855, 1389, 13, 13813, 527, 17434, 3164, 4230, 7705, 366, 9725, 3565, 294, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.18810355954053926, "compression_ratio": 1.7465277777777777, "no_speech_prob": 6.423221066143014e-07}, {"id": 36, "seek": 20712, "start": 207.12, "end": 212.72, "text": " so long as the tree is balanced. And then lastly, oh, that's a little funny. Look,", "tokens": [50364, 370, 938, 382, 264, 4230, 307, 13902, 13, 400, 550, 16386, 11, 1954, 11, 300, 311, 257, 707, 4074, 13, 2053, 11, 50644, 50644, 309, 439, 9001, 322, 264, 4137, 13, 583, 562, 286, 1974, 11, 309, 775, 406, 13, 1033, 11, 731, 11, 286, 478, 516, 281, 853, 32552, 278, 341, 13, 50916, 50952, 639, 307, 466, 3665, 13, 467, 630, 665, 13, 5684, 11, 293, 550, 17434, 3164, 4230, 4445, 763, 10829, 13, 51220, 51220, 1133, 321, 767, 1437, 294, 264, 4445, 7705, 11, 3164, 293, 8969, 366, 15325, 11, 51424, 51424, 457, 49163, 257, 707, 12414, 382, 291, 603, 536, 562, 291, 589, 322, 264, 2715, 13, 400, 264, 2141, 551, 307, 5042, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.24041595458984374, "compression_ratio": 1.6559139784946237, "no_speech_prob": 9.570690053806175e-06}, {"id": 37, "seek": 20712, "start": 212.72, "end": 218.16, "text": " it all fits on the slide. But when I present, it does not. Okay, well, I'm going to try widening this.", "tokens": [50364, 370, 938, 382, 264, 4230, 307, 13902, 13, 400, 550, 16386, 11, 1954, 11, 300, 311, 257, 707, 4074, 13, 2053, 11, 50644, 50644, 309, 439, 9001, 322, 264, 4137, 13, 583, 562, 286, 1974, 11, 309, 775, 406, 13, 1033, 11, 731, 11, 286, 478, 516, 281, 853, 32552, 278, 341, 13, 50916, 50952, 639, 307, 466, 3665, 13, 467, 630, 665, 13, 5684, 11, 293, 550, 17434, 3164, 4230, 4445, 763, 10829, 13, 51220, 51220, 1133, 321, 767, 1437, 294, 264, 4445, 7705, 11, 3164, 293, 8969, 366, 15325, 11, 51424, 51424, 457, 49163, 257, 707, 12414, 382, 291, 603, 536, 562, 291, 589, 322, 264, 2715, 13, 400, 264, 2141, 551, 307, 5042, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.24041595458984374, "compression_ratio": 1.6559139784946237, "no_speech_prob": 9.570690053806175e-06}, {"id": 38, "seek": 20712, "start": 218.88, "end": 224.24, "text": " This is about helps. It did good. Anyway, and then binary search tree implementations wise.", "tokens": [50364, 370, 938, 382, 264, 4230, 307, 13902, 13, 400, 550, 16386, 11, 1954, 11, 300, 311, 257, 707, 4074, 13, 2053, 11, 50644, 50644, 309, 439, 9001, 322, 264, 4137, 13, 583, 562, 286, 1974, 11, 309, 775, 406, 13, 1033, 11, 731, 11, 286, 478, 516, 281, 853, 32552, 278, 341, 13, 50916, 50952, 639, 307, 466, 3665, 13, 467, 630, 665, 13, 5684, 11, 293, 550, 17434, 3164, 4230, 4445, 763, 10829, 13, 51220, 51220, 1133, 321, 767, 1437, 294, 264, 4445, 7705, 11, 3164, 293, 8969, 366, 15325, 11, 51424, 51424, 457, 49163, 257, 707, 12414, 382, 291, 603, 536, 562, 291, 589, 322, 264, 2715, 13, 400, 264, 2141, 551, 307, 5042, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.24041595458984374, "compression_ratio": 1.6559139784946237, "no_speech_prob": 9.570690053806175e-06}, {"id": 39, "seek": 20712, "start": 224.24, "end": 228.32, "text": " When we actually went in the implement operations, search and insert are straightforward,", "tokens": [50364, 370, 938, 382, 264, 4230, 307, 13902, 13, 400, 550, 16386, 11, 1954, 11, 300, 311, 257, 707, 4074, 13, 2053, 11, 50644, 50644, 309, 439, 9001, 322, 264, 4137, 13, 583, 562, 286, 1974, 11, 309, 775, 406, 13, 1033, 11, 731, 11, 286, 478, 516, 281, 853, 32552, 278, 341, 13, 50916, 50952, 639, 307, 466, 3665, 13, 467, 630, 665, 13, 5684, 11, 293, 550, 17434, 3164, 4230, 4445, 763, 10829, 13, 51220, 51220, 1133, 321, 767, 1437, 294, 264, 4445, 7705, 11, 3164, 293, 8969, 366, 15325, 11, 51424, 51424, 457, 49163, 257, 707, 12414, 382, 291, 603, 536, 562, 291, 589, 322, 264, 2715, 13, 400, 264, 2141, 551, 307, 5042, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.24041595458984374, "compression_ratio": 1.6559139784946237, "no_speech_prob": 9.570690053806175e-06}, {"id": 40, "seek": 20712, "start": 228.32, "end": 233.52, "text": " but inserts a little tricky as you'll see when you work on the lab. And the key thing is avoid", "tokens": [50364, 370, 938, 382, 264, 4230, 307, 13902, 13, 400, 550, 16386, 11, 1954, 11, 300, 311, 257, 707, 4074, 13, 2053, 11, 50644, 50644, 309, 439, 9001, 322, 264, 4137, 13, 583, 562, 286, 1974, 11, 309, 775, 406, 13, 1033, 11, 731, 11, 286, 478, 516, 281, 853, 32552, 278, 341, 13, 50916, 50952, 639, 307, 466, 3665, 13, 467, 630, 665, 13, 5684, 11, 293, 550, 17434, 3164, 4230, 4445, 763, 10829, 13, 51220, 51220, 1133, 321, 767, 1437, 294, 264, 4445, 7705, 11, 3164, 293, 8969, 366, 15325, 11, 51424, 51424, 457, 49163, 257, 707, 12414, 382, 291, 603, 536, 562, 291, 589, 322, 264, 2715, 13, 400, 264, 2141, 551, 307, 5042, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.24041595458984374, "compression_ratio": 1.6559139784946237, "no_speech_prob": 9.570690053806175e-06}, {"id": 41, "seek": 23352, "start": 233.52, "end": 238.48000000000002, "text": " arm's length recursion. And then deletion is a little more challenging, and the typical approach", "tokens": [50364, 3726, 311, 4641, 20560, 313, 13, 400, 550, 1103, 302, 313, 307, 257, 707, 544, 7595, 11, 293, 264, 7476, 3109, 50612, 50612, 307, 13051, 1103, 302, 313, 13, 407, 472, 588, 1036, 551, 286, 528, 281, 2152, 11, 286, 528, 281, 976, 257, 1326, 6082, 50896, 50944, 337, 18114, 264, 17434, 3164, 4230, 13, 407, 562, 291, 589, 322, 428, 2715, 11, 286, 528, 281, 3637, 512, 51212, 51212, 1483, 49798, 13, 440, 3089, 300, 321, 630, 294, 1508, 390, 15791, 20560, 488, 13, 509, 366, 17434, 3164, 4230, 4471, 51508, 51508, 300, 291, 434, 516, 281, 1322, 486, 406, 312, 15791, 20560, 488, 13, 467, 603, 362, 1481, 11502, 13, 1171, 1184, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.11873359195256637, "compression_ratio": 1.736842105263158, "no_speech_prob": 3.495603550618398e-06}, {"id": 42, "seek": 23352, "start": 238.48000000000002, "end": 244.16000000000003, "text": " is hybrid deletion. So one very last thing I want to mention, I want to give a few tips", "tokens": [50364, 3726, 311, 4641, 20560, 313, 13, 400, 550, 1103, 302, 313, 307, 257, 707, 544, 7595, 11, 293, 264, 7476, 3109, 50612, 50612, 307, 13051, 1103, 302, 313, 13, 407, 472, 588, 1036, 551, 286, 528, 281, 2152, 11, 286, 528, 281, 976, 257, 1326, 6082, 50896, 50944, 337, 18114, 264, 17434, 3164, 4230, 13, 407, 562, 291, 589, 322, 428, 2715, 11, 286, 528, 281, 3637, 512, 51212, 51212, 1483, 49798, 13, 440, 3089, 300, 321, 630, 294, 1508, 390, 15791, 20560, 488, 13, 509, 366, 17434, 3164, 4230, 4471, 51508, 51508, 300, 291, 434, 516, 281, 1322, 486, 406, 312, 15791, 20560, 488, 13, 467, 603, 362, 1481, 11502, 13, 1171, 1184, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.11873359195256637, "compression_ratio": 1.736842105263158, "no_speech_prob": 3.495603550618398e-06}, {"id": 43, "seek": 23352, "start": 245.12, "end": 250.48000000000002, "text": " for implementing the binary search tree. So when you work on your lab, I want to note some", "tokens": [50364, 3726, 311, 4641, 20560, 313, 13, 400, 550, 1103, 302, 313, 307, 257, 707, 544, 7595, 11, 293, 264, 7476, 3109, 50612, 50612, 307, 13051, 1103, 302, 313, 13, 407, 472, 588, 1036, 551, 286, 528, 281, 2152, 11, 286, 528, 281, 976, 257, 1326, 6082, 50896, 50944, 337, 18114, 264, 17434, 3164, 4230, 13, 407, 562, 291, 589, 322, 428, 2715, 11, 286, 528, 281, 3637, 512, 51212, 51212, 1483, 49798, 13, 440, 3089, 300, 321, 630, 294, 1508, 390, 15791, 20560, 488, 13, 509, 366, 17434, 3164, 4230, 4471, 51508, 51508, 300, 291, 434, 516, 281, 1322, 486, 406, 312, 15791, 20560, 488, 13, 467, 603, 362, 1481, 11502, 13, 1171, 1184, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.11873359195256637, "compression_ratio": 1.736842105263158, "no_speech_prob": 3.495603550618398e-06}, {"id": 44, "seek": 23352, "start": 250.48000000000002, "end": 256.40000000000003, "text": " distinctions. The code that we did in class was naked recursive. You are binary search tree map", "tokens": [50364, 3726, 311, 4641, 20560, 313, 13, 400, 550, 1103, 302, 313, 307, 257, 707, 544, 7595, 11, 293, 264, 7476, 3109, 50612, 50612, 307, 13051, 1103, 302, 313, 13, 407, 472, 588, 1036, 551, 286, 528, 281, 2152, 11, 286, 528, 281, 976, 257, 1326, 6082, 50896, 50944, 337, 18114, 264, 17434, 3164, 4230, 13, 407, 562, 291, 589, 322, 428, 2715, 11, 286, 528, 281, 3637, 512, 51212, 51212, 1483, 49798, 13, 440, 3089, 300, 321, 630, 294, 1508, 390, 15791, 20560, 488, 13, 509, 366, 17434, 3164, 4230, 4471, 51508, 51508, 300, 291, 434, 516, 281, 1322, 486, 406, 312, 15791, 20560, 488, 13, 467, 603, 362, 1481, 11502, 13, 1171, 1184, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.11873359195256637, "compression_ratio": 1.736842105263158, "no_speech_prob": 3.495603550618398e-06}, {"id": 45, "seek": 23352, "start": 256.40000000000003, "end": 261.76, "text": " that you're going to build will not be naked recursive. It'll have nice clothing. For each", "tokens": [50364, 3726, 311, 4641, 20560, 313, 13, 400, 550, 1103, 302, 313, 307, 257, 707, 544, 7595, 11, 293, 264, 7476, 3109, 50612, 50612, 307, 13051, 1103, 302, 313, 13, 407, 472, 588, 1036, 551, 286, 528, 281, 2152, 11, 286, 528, 281, 976, 257, 1326, 6082, 50896, 50944, 337, 18114, 264, 17434, 3164, 4230, 13, 407, 562, 291, 589, 322, 428, 2715, 11, 286, 528, 281, 3637, 512, 51212, 51212, 1483, 49798, 13, 440, 3089, 300, 321, 630, 294, 1508, 390, 15791, 20560, 488, 13, 509, 366, 17434, 3164, 4230, 4471, 51508, 51508, 300, 291, 434, 516, 281, 1322, 486, 406, 312, 15791, 20560, 488, 13, 467, 603, 362, 1481, 11502, 13, 1171, 1184, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.11873359195256637, "compression_ratio": 1.736842105263158, "no_speech_prob": 3.495603550618398e-06}, {"id": 46, "seek": 26176, "start": 261.76, "end": 266.88, "text": " public method, there is going to be, as you're used to, this trick, when we want to build recursive", "tokens": [50364, 1908, 3170, 11, 456, 307, 516, 281, 312, 11, 382, 291, 434, 1143, 281, 11, 341, 4282, 11, 562, 321, 528, 281, 1322, 20560, 488, 50620, 50620, 7150, 11, 291, 434, 516, 281, 528, 281, 1322, 257, 4551, 20560, 488, 3170, 13, 400, 286, 534, 528, 341, 6532, 50848, 50848, 281, 312, 13490, 666, 428, 5133, 13, 467, 311, 370, 4420, 13, 400, 562, 309, 1487, 281, 46567, 11, 286, 528, 428, 3089, 281, 51156, 51156, 1009, 992, 1411, 293, 558, 44548, 13, 467, 820, 574, 411, 341, 13, 1743, 456, 820, 312, 613, 51368, 51368, 6915, 721, 2737, 13, 400, 300, 311, 2074, 11, 754, 498, 1825, 767, 2962, 13, 1171, 1365, 11, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.10483095201395326, "compression_ratio": 1.7426470588235294, "no_speech_prob": 4.108230768906651e-06}, {"id": 47, "seek": 26176, "start": 266.88, "end": 271.44, "text": " methods, you're going to want to build a private recursive method. And I really want this technique", "tokens": [50364, 1908, 3170, 11, 456, 307, 516, 281, 312, 11, 382, 291, 434, 1143, 281, 11, 341, 4282, 11, 562, 321, 528, 281, 1322, 20560, 488, 50620, 50620, 7150, 11, 291, 434, 516, 281, 528, 281, 1322, 257, 4551, 20560, 488, 3170, 13, 400, 286, 534, 528, 341, 6532, 50848, 50848, 281, 312, 13490, 666, 428, 5133, 13, 467, 311, 370, 4420, 13, 400, 562, 309, 1487, 281, 46567, 11, 286, 528, 428, 3089, 281, 51156, 51156, 1009, 992, 1411, 293, 558, 44548, 13, 467, 820, 574, 411, 341, 13, 1743, 456, 820, 312, 613, 51368, 51368, 6915, 721, 2737, 13, 400, 300, 311, 2074, 11, 754, 498, 1825, 767, 2962, 13, 1171, 1365, 11, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.10483095201395326, "compression_ratio": 1.7426470588235294, "no_speech_prob": 4.108230768906651e-06}, {"id": 48, "seek": 26176, "start": 271.44, "end": 277.59999999999997, "text": " to be burned into your soul. It's so useful. And when it comes to inserting, I want your code to", "tokens": [50364, 1908, 3170, 11, 456, 307, 516, 281, 312, 11, 382, 291, 434, 1143, 281, 11, 341, 4282, 11, 562, 321, 528, 281, 1322, 20560, 488, 50620, 50620, 7150, 11, 291, 434, 516, 281, 528, 281, 1322, 257, 4551, 20560, 488, 3170, 13, 400, 286, 534, 528, 341, 6532, 50848, 50848, 281, 312, 13490, 666, 428, 5133, 13, 467, 311, 370, 4420, 13, 400, 562, 309, 1487, 281, 46567, 11, 286, 528, 428, 3089, 281, 51156, 51156, 1009, 992, 1411, 293, 558, 44548, 13, 467, 820, 574, 411, 341, 13, 1743, 456, 820, 312, 613, 51368, 51368, 6915, 721, 2737, 13, 400, 300, 311, 2074, 11, 754, 498, 1825, 767, 2962, 13, 1171, 1365, 11, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.10483095201395326, "compression_ratio": 1.7426470588235294, "no_speech_prob": 4.108230768906651e-06}, {"id": 49, "seek": 26176, "start": 277.59999999999997, "end": 281.84, "text": " always set left and right pointers. It should look like this. Like there should be these", "tokens": [50364, 1908, 3170, 11, 456, 307, 516, 281, 312, 11, 382, 291, 434, 1143, 281, 11, 341, 4282, 11, 562, 321, 528, 281, 1322, 20560, 488, 50620, 50620, 7150, 11, 291, 434, 516, 281, 528, 281, 1322, 257, 4551, 20560, 488, 3170, 13, 400, 286, 534, 528, 341, 6532, 50848, 50848, 281, 312, 13490, 666, 428, 5133, 13, 467, 311, 370, 4420, 13, 400, 562, 309, 1487, 281, 46567, 11, 286, 528, 428, 3089, 281, 51156, 51156, 1009, 992, 1411, 293, 558, 44548, 13, 467, 820, 574, 411, 341, 13, 1743, 456, 820, 312, 613, 51368, 51368, 6915, 721, 2737, 13, 400, 300, 311, 2074, 11, 754, 498, 1825, 767, 2962, 13, 1171, 1365, 11, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.10483095201395326, "compression_ratio": 1.7426470588235294, "no_speech_prob": 4.108230768906651e-06}, {"id": 50, "seek": 26176, "start": 281.84, "end": 287.2, "text": " equals things happening. And that's true, even if nothing actually changes. For example,", "tokens": [50364, 1908, 3170, 11, 456, 307, 516, 281, 312, 11, 382, 291, 434, 1143, 281, 11, 341, 4282, 11, 562, 321, 528, 281, 1322, 20560, 488, 50620, 50620, 7150, 11, 291, 434, 516, 281, 528, 281, 1322, 257, 4551, 20560, 488, 3170, 13, 400, 286, 534, 528, 341, 6532, 50848, 50848, 281, 312, 13490, 666, 428, 5133, 13, 467, 311, 370, 4420, 13, 400, 562, 309, 1487, 281, 46567, 11, 286, 528, 428, 3089, 281, 51156, 51156, 1009, 992, 1411, 293, 558, 44548, 13, 467, 820, 574, 411, 341, 13, 1743, 456, 820, 312, 613, 51368, 51368, 6915, 721, 2737, 13, 400, 300, 311, 2074, 11, 754, 498, 1825, 767, 2962, 13, 1171, 1365, 11, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.10483095201395326, "compression_ratio": 1.7426470588235294, "no_speech_prob": 4.108230768906651e-06}, {"id": 51, "seek": 28720, "start": 287.2, "end": 291.59999999999997, "text": " if you're trying to insert something that's already in the tree, there's going to be this like", "tokens": [50364, 498, 291, 434, 1382, 281, 8969, 746, 300, 311, 1217, 294, 264, 4230, 11, 456, 311, 516, 281, 312, 341, 411, 50584, 50584, 40997, 15187, 300, 2314, 13, 407, 2086, 11, 309, 1062, 841, 257, 707, 3657, 300, 321, 434, 1419, 439, 613, 50824, 50824, 6915, 300, 366, 2737, 13, 583, 309, 311, 1021, 281, 362, 2199, 3089, 13, 400, 16386, 11, 321, 528, 281, 5042, 51096, 51096, 5812, 9408, 20560, 313, 13, 1981, 5812, 9408, 1851, 3331, 689, 291, 434, 1237, 670, 456, 281, 652, 988, 51372, 51372, 300, 746, 311, 406, 18184, 13, 2555, 500, 380, 360, 341, 13, 467, 1669, 428, 3089, 10743, 2753, 813, 309, 576, 312, 5911, 13, 51624, 51624, 400, 562, 291, 1286, 281, 544, 6179, 721, 813, 257, 3875, 17434, 3164, 4230, 11, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09523707005515028, "compression_ratio": 1.7317073170731707, "no_speech_prob": 4.4681592044071294e-06}, {"id": 52, "seek": 28720, "start": 291.59999999999997, "end": 296.4, "text": " redundant assignment that happens. So yes, it might feel a little weird that we're having all these", "tokens": [50364, 498, 291, 434, 1382, 281, 8969, 746, 300, 311, 1217, 294, 264, 4230, 11, 456, 311, 516, 281, 312, 341, 411, 50584, 50584, 40997, 15187, 300, 2314, 13, 407, 2086, 11, 309, 1062, 841, 257, 707, 3657, 300, 321, 434, 1419, 439, 613, 50824, 50824, 6915, 300, 366, 2737, 13, 583, 309, 311, 1021, 281, 362, 2199, 3089, 13, 400, 16386, 11, 321, 528, 281, 5042, 51096, 51096, 5812, 9408, 20560, 313, 13, 1981, 5812, 9408, 1851, 3331, 689, 291, 434, 1237, 670, 456, 281, 652, 988, 51372, 51372, 300, 746, 311, 406, 18184, 13, 2555, 500, 380, 360, 341, 13, 467, 1669, 428, 3089, 10743, 2753, 813, 309, 576, 312, 5911, 13, 51624, 51624, 400, 562, 291, 1286, 281, 544, 6179, 721, 813, 257, 3875, 17434, 3164, 4230, 11, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09523707005515028, "compression_ratio": 1.7317073170731707, "no_speech_prob": 4.4681592044071294e-06}, {"id": 53, "seek": 28720, "start": 296.4, "end": 301.84, "text": " equals that are happening. But it's important to have simple code. And lastly, we want to avoid", "tokens": [50364, 498, 291, 434, 1382, 281, 8969, 746, 300, 311, 1217, 294, 264, 4230, 11, 456, 311, 516, 281, 312, 341, 411, 50584, 50584, 40997, 15187, 300, 2314, 13, 407, 2086, 11, 309, 1062, 841, 257, 707, 3657, 300, 321, 434, 1419, 439, 613, 50824, 50824, 6915, 300, 366, 2737, 13, 583, 309, 311, 1021, 281, 362, 2199, 3089, 13, 400, 16386, 11, 321, 528, 281, 5042, 51096, 51096, 5812, 9408, 20560, 313, 13, 1981, 5812, 9408, 1851, 3331, 689, 291, 434, 1237, 670, 456, 281, 652, 988, 51372, 51372, 300, 746, 311, 406, 18184, 13, 2555, 500, 380, 360, 341, 13, 467, 1669, 428, 3089, 10743, 2753, 813, 309, 576, 312, 5911, 13, 51624, 51624, 400, 562, 291, 1286, 281, 544, 6179, 721, 813, 257, 3875, 17434, 3164, 4230, 11, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09523707005515028, "compression_ratio": 1.7317073170731707, "no_speech_prob": 4.4681592044071294e-06}, {"id": 54, "seek": 28720, "start": 301.84, "end": 307.36, "text": " arms linked recursion. These arms linked face cases where you're looking over there to make sure", "tokens": [50364, 498, 291, 434, 1382, 281, 8969, 746, 300, 311, 1217, 294, 264, 4230, 11, 456, 311, 516, 281, 312, 341, 411, 50584, 50584, 40997, 15187, 300, 2314, 13, 407, 2086, 11, 309, 1062, 841, 257, 707, 3657, 300, 321, 434, 1419, 439, 613, 50824, 50824, 6915, 300, 366, 2737, 13, 583, 309, 311, 1021, 281, 362, 2199, 3089, 13, 400, 16386, 11, 321, 528, 281, 5042, 51096, 51096, 5812, 9408, 20560, 313, 13, 1981, 5812, 9408, 1851, 3331, 689, 291, 434, 1237, 670, 456, 281, 652, 988, 51372, 51372, 300, 746, 311, 406, 18184, 13, 2555, 500, 380, 360, 341, 13, 467, 1669, 428, 3089, 10743, 2753, 813, 309, 576, 312, 5911, 13, 51624, 51624, 400, 562, 291, 1286, 281, 544, 6179, 721, 813, 257, 3875, 17434, 3164, 4230, 11, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09523707005515028, "compression_ratio": 1.7317073170731707, "no_speech_prob": 4.4681592044071294e-06}, {"id": 55, "seek": 28720, "start": 307.36, "end": 312.4, "text": " that something's not null. Please don't do this. It makes your code uglier than it would be otherwise.", "tokens": [50364, 498, 291, 434, 1382, 281, 8969, 746, 300, 311, 1217, 294, 264, 4230, 11, 456, 311, 516, 281, 312, 341, 411, 50584, 50584, 40997, 15187, 300, 2314, 13, 407, 2086, 11, 309, 1062, 841, 257, 707, 3657, 300, 321, 434, 1419, 439, 613, 50824, 50824, 6915, 300, 366, 2737, 13, 583, 309, 311, 1021, 281, 362, 2199, 3089, 13, 400, 16386, 11, 321, 528, 281, 5042, 51096, 51096, 5812, 9408, 20560, 313, 13, 1981, 5812, 9408, 1851, 3331, 689, 291, 434, 1237, 670, 456, 281, 652, 988, 51372, 51372, 300, 746, 311, 406, 18184, 13, 2555, 500, 380, 360, 341, 13, 467, 1669, 428, 3089, 10743, 2753, 813, 309, 576, 312, 5911, 13, 51624, 51624, 400, 562, 291, 1286, 281, 544, 6179, 721, 813, 257, 3875, 17434, 3164, 4230, 11, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09523707005515028, "compression_ratio": 1.7317073170731707, "no_speech_prob": 4.4681592044071294e-06}, {"id": 56, "seek": 28720, "start": 312.4, "end": 316.4, "text": " And when you move to more complicated things than a basic binary search tree,", "tokens": [50364, 498, 291, 434, 1382, 281, 8969, 746, 300, 311, 1217, 294, 264, 4230, 11, 456, 311, 516, 281, 312, 341, 411, 50584, 50584, 40997, 15187, 300, 2314, 13, 407, 2086, 11, 309, 1062, 841, 257, 707, 3657, 300, 321, 434, 1419, 439, 613, 50824, 50824, 6915, 300, 366, 2737, 13, 583, 309, 311, 1021, 281, 362, 2199, 3089, 13, 400, 16386, 11, 321, 528, 281, 5042, 51096, 51096, 5812, 9408, 20560, 313, 13, 1981, 5812, 9408, 1851, 3331, 689, 291, 434, 1237, 670, 456, 281, 652, 988, 51372, 51372, 300, 746, 311, 406, 18184, 13, 2555, 500, 380, 360, 341, 13, 467, 1669, 428, 3089, 10743, 2753, 813, 309, 576, 312, 5911, 13, 51624, 51624, 400, 562, 291, 1286, 281, 544, 6179, 721, 813, 257, 3875, 17434, 3164, 4230, 11, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09523707005515028, "compression_ratio": 1.7317073170731707, "no_speech_prob": 4.4681592044071294e-06}, {"id": 57, "seek": 31640, "start": 316.4, "end": 322.88, "text": " this is just a super bad habit to be stuck with. All right, that's it for today. I hope you", "tokens": [50364, 341, 307, 445, 257, 1687, 1578, 7164, 281, 312, 5541, 365, 13, 1057, 558, 11, 300, 311, 309, 337, 965, 13, 286, 1454, 291, 50688, 50688, 4626, 341, 257, 707, 857, 385, 474, 1794, 3037, 295, 17434, 3164, 5852, 13, 583, 286, 519, 309, 311, 1021, 370, 321, 50980, 50980, 393, 534, 4449, 264, 7161, 295, 264, 3487, 13, 1057, 558, 11, 536, 291, 958, 565, 13, 51180], "temperature": 0.0, "avg_logprob": -0.14094997133527484, "compression_ratio": 1.4619565217391304, "no_speech_prob": 1.3690032574231736e-06}, {"id": 58, "seek": 31640, "start": 322.88, "end": 328.71999999999997, "text": " enjoyed this a little bit meandering version of binary search trees. But I think it's important so we", "tokens": [50364, 341, 307, 445, 257, 1687, 1578, 7164, 281, 312, 5541, 365, 13, 1057, 558, 11, 300, 311, 309, 337, 965, 13, 286, 1454, 291, 50688, 50688, 4626, 341, 257, 707, 857, 385, 474, 1794, 3037, 295, 17434, 3164, 5852, 13, 583, 286, 519, 309, 311, 1021, 370, 321, 50980, 50980, 393, 534, 4449, 264, 7161, 295, 264, 3487, 13, 1057, 558, 11, 536, 291, 958, 565, 13, 51180], "temperature": 0.0, "avg_logprob": -0.14094997133527484, "compression_ratio": 1.4619565217391304, "no_speech_prob": 1.3690032574231736e-06}, {"id": 59, "seek": 32872, "start": 328.72, "end": 350.08000000000004, "text": " can really appreciate the depth of the ideas. All right, see you next time.", "tokens": [50364, 393, 534, 4449, 264, 7161, 295, 264, 3487, 13, 1057, 558, 11, 536, 291, 958, 565, 13, 51432], "temperature": 0.0, "avg_logprob": -0.2417151927947998, "compression_ratio": 1.0273972602739727, "no_speech_prob": 7.761425877106376e-06}], "language": "en"}