{"text": " There are many types of classes out there that you might implement. And one very special type of class, the O'NPLMN is an abstract data type. So not everything is an abstract data type, like editor, for example, that's not. But things like from discussion five, the buy, divider map, or the median finder, those are classic examples of what one might call an abstract data type. So these things, whenever you're building one of them, you'll often implement them using an existing implementation. You want to build a deck, we'll probably build it out of a list instead of going all the way down to the bottom, and doing everything in terms of pointers or arrays. Those sometimes you will, as we did in project one. So in discussion five, for example, we said to build a buy divider map, one of the things we could do is take three maps, and together assemble those maps so that they become a buy divider map. Another example is the so-called median finder. In that case, really elisted all the role work. So we made an abstract data type that finds mediums, and we just use it, and that's built from. So we designed it and build it from assuming that we have a list. Now sometimes abstract data types are special cases of other abstract data types. So some common examples that just take lists, it's like a very rich example. We have the Q. So Qs are also known by the way in America as lines. It supports two operations, in Q and DQ. When you end Q, you go to the end of the Q. So if you have a bunch of people waiting, the end Q puts you at the back, and then DQ is the person at the front who gets to be removed in return. So this is also sometimes called a first-in first-out list or fifo. And yeah, so it's a specific kind of list that things come in here and go out that way. This is also stacks. We saw stacks in earlier lecture as well as in discussion five, and stacks support, so it's called push and pop operations. So in this case, push puts things on top of the stack, pop takes them back out. And this is also basically a list except that it's the opposite. So it's compared to a Q. And therefore sometimes called a last-in first-out. So if you have people getting in line, it's whoever got in line most recently, it gets to leave next. And then we also saw the double-ended Q and project one-at. You're a good old friend. And when you build all the way from scratch, you can support ad front, ad back, get front, get back, and that's a double-ended Q. It does both Q and stack stuff. In fact, your case, your deck, the funny one you did in project one-at, actually did even more. You're able to get stuff in the middle, but a classical deck or a double-ended Q would only support these operations. So how do we build these things? Well, one possibility for building an abstract, an implementation of an abstract data type, is to do what we did in project one-at and go all the way down so that we're manipulating arrays or linked list and build it ourselves. Totally from scratch. But sometimes, when we're actually implementing what is a special case of another data type, we will use one of these tools, which I'm listing as extension, delegation, and adaptation. So let's say we have a list, let's say linked list, and we want to implement a stack. How could we do that? So one approach is extension. I could say, well, the stack is going to extend linked list, right? It is a special type of list. So I'll extend linked list and let it a new method called push, but just add something to my stack. Okay? Now, I'm going to note that if you're really, really on top of things, you might observe that there's something a little funny about this decision, and we'll come back to it. And it has to do with the has-a versus is-a relationship, but we'll get that. Another possibility is to use so-called delegation. It's just a different way of thinking. So instead of extending the linked list class, we could delegate the work of stackery to a linked list. So in this case, if I have a delegation-based stack, it has a private instance variable called a linked list. We initialize it here. I'm not showing it as a constructor. This is the thing you can do in Java. So it's one of many syntax features we haven't talked about before. And then I could say public void, push, item, and this case will say l.av. So of course, to us, the person writing the delegation stack. We know the secret that we're really just handing all the work over to a linked list, but to the outside world, they don't know. We could be doing anything. And in fact, if you use Intelligate to decompile the solutions that we provided to in project 1b, you'll see that our reference solutions are really just delegating work to the Java libraries. And that's why in project 1a, we said you are not allowed to use Java.util.link list. Otherwise, the assignment would have been totally on fun and take you 30 minutes. Okay. So that's extension, we extend the class. And delegation, we have a secret employee of sorts that lives inside of our stack object, then it does all the work. And then there's one more approach, which is a little more exotic. So in this approach, if someone wants to actually use an adaptation-based stack, here I call it a stack adapter, how works is if someone wants to create a stack adapter, they have to provide me with a list. Okay. So I've blown up and I say, hey, I need a stack. All right. So please send me a stack. And on the other end, they say, okay, we need you to send someone over here who has list capability. All right. Okay. I know just the guy. Right. So in this case, instead of just asking, as I would for a delegation stack, where the constructor, not shown here, there is no, there's only a no argument constructor. Here in a stack adapter, if I want to make an adaptation-based stack, I have to provide a list to that stack. And that's the list that the stack's going to use. So this could be handy. If, for example, you wanted to provide the user of your abstract data type with the ability to determine whether or not you wanted an array-based list or a linked list or something else, right. That's one example. Now, this is not a very common pattern, especially in 60 and B, but I wanted to let you know about it, right? You could in principle have someone hand you the worker. You could store a reference to it. And then when you push, you add to it. So it's a lot like a delegation, it's just that instead of the stack deciding, you know, they're not going, instead of the stack recruiting a list for themselves, they require that if someone wants to create a stack adapter, they have to provide a list. So let me draw an important distinction here. Let's critique these approach approaches by discussing the notions of is a versus has a. So we've already talked about hyponym relationships in English, right, or the is a concept, a square is a rectangle, or an array list is a list. And so in linguistics, you might call this, I say, hyponomy, I'm not sure actually what the expert pronunciation is, but hey, whatever, not a linguistic expert. So that's my secret shame. So array list for example is a hyponym of list. There's another closely related and sometimes confused notion known as has a. So examples animals have a leg or a b, a bi, a viadiviter map has a rank map if you're going from discussion five. And so in linguistics, this is known as hologomy or hologomy, who knows? And so rank map is a hologum of bi, a viadiviter map. And what I want to make a note of is that when you use the extens keyword of the implements keyword in Java, that should always be an is a relationship. You might think to yourself, why would never ever ever say leg or animal extends leg or something like that, or a way. Yeah, I would never say animal extends leg, you might say to yourself and you're probably right, but sometimes you might be tempted to do something a little funny, it looks almost like an array list is a list. So I'm going to pick on Java a little bit. There exists in Java, something called Java.util.stack. So what is a stack? Well, if you look at the definition of stack, it extends the vector class. And then vector in turns extends the abstract class abstract list, abstract list implements the list interface and the list interface implements the collections interface or extends it. So in this case, by saying stack extends vector, there's saying a stack is a vector. And what that means it could do anything a vector can do or anything a list can do for that matter, but stack should be simple, right? A stack should have push and pop and an iterator and really not much else. It should not have all the crazy methods that come with lists or with vectors and you just end up with something that's kind of unusable, right? I mean, you shouldn't have a stack class, so that's your certain things to the middle, just like with project 1A, we really should not have given you a deck or made you build a deck class or you get good stuff in the middle. Just a weird thing. Why is that bad? Why would it ever be bad to give someone a more powerful class? Well, the more stuff, the more tools you give someone, the more they have to think about, right? If the stack is very simple, then it means I can't mess it up, right? I'm not going to make any mistakes if there's only a push and a pop operation, compared to if there's like 50 operations, okay? So in effect, what you end up with is a stack which has a feature set, something like this, but you really only want, like maybe just this one item, right? By the way, this is a real thing. If you look on Amazon, this is one of the more expensive, actually it's probably gotta be the most expensive Swiss Army knife. So go check it out. Basically, what Java does, like the people who designed Java, obviously really accomplish programmers, they would have put all this stuff together, accomplish designers, they made this mistake. They said a stack is a vector, but what they really meant is a stack has a vector, right? So they shouldn't really delegate it instead of extending, but you know, you can't change history at this point, because stack, well now, I mean, that's a public class. You cannot roll it back and decide, oh, we made a mistake. Because somewhere out there, again, someone out there has found this little widget here and they're insisting on using it. I don't know what this thing is, but it looks pretty cool. And I would definitely use it if I could, if I knew what it did, okay? So in this case, basically the problem is this is way too complex, and with even worse, is that the iterators work backwards from what you might expect, and if you click here, actually, we can look at this bug in Java. This is filed in 2001. So when I said, the iterator method iterates to a stack from the bottom up. One would think that it should iterate as if we were popping off the top of the stack, okay? And the response was, it was an incorrect design decision to have stack extend vector, is they rather than has they? We sympathize with the submitter, but cannot fix this because of incompatibility or because of compatibility. So there you go. Basically, they just said, eh, that's got to live with it. We messed up. And then gave us work around you might try if you were very upset. All right, so I guess I will have one more little Joe Armstrong quote about OP in this lecture, which is that often an object oriented programming. You could run into the funny situation where all you want was a banana, but instead what you get was a banana holding the banana, oh, in the entire jungle. Okay, so OP can be a little dicey sometimes. Here's another actually really subtle inheritance problem. Okay, but this is a classic example. I hope you'll agree with me that a square is a rectangle, right? It says all the features of a rectangle. The only thing special about it is that it's two sides need to be the same. So I might seem very natural to say public class square extends rectangle, right? Well, we could be wrong with that. But what's funny about this is that rectangles, I mean they might have a special set with method and a set height method. So these methods should not exist, right? Square. You should not have a separate set width and set height method, but you're kind of stuck with it, right? Because because the square extends rectangle, that all the powers of a rectangle has all the verbs of a rectangle, right? So it's not just that it has both a width and a height. It is that it has the ability to set these independently. So I could have principle create a square and even though the square constructor might only have one parameter, which that's both the width and the height, I get say, new square 10. I could then later set the width to two and now it's no longer actually a square, right? So there's actually a really lot of really deep thoughts about this kind of thing. And there's a whole article you can read here about this so called circle ellipse problem if you want to know more, but just to let you know inheritance. It's not an obvious win because there's some funny things that can happen. And then the last funny thing I want to mention is just this one from an earlier lecture about how implementation inheritance can break in capitalization. So before we talked about how you as a designer creating a verbose dog might inadvertently send your code going into an infinite loop because of the nature of how inheritance works. And so I'm not going to re-explain it here because it's in I think lecture 9, but yeah, so this is another example how inheritance can bite you. So maybe I'll just close on these topics about inheritance by talking about delegation versus extension, which for us, we're not really going to talk about the circle ellipse problem or about this very much, but I think a really important thing for you in project two and later homework is the notion of delegation versus extension. So as one of the key architects of Java puts it in his book Effective Java, which is a great book by the way, if you end up really liking Java, which is by the way, the number one most popular programming language in the world, the moment. He has a few things to say. It is safe to use inheritance within a package where the subclass and the superclass are under the control of the same programmers, the same people, they know each other, they talk. It is safe to extend classes that are specifically designed and documented for extension. So dog, for example, was not designed for extension. It had these funny features here. We had bark and bark many, but nowhere that I have any restriction that said, do not override bark many and dare call bark, things will go wrong. So if a class is really well documented, then it can be say. However, inheriting from an ordinary concrete class across a package boundary is dangerous, right? So when in doubt, if you want to avoid issues like this one, or like this one, I'm going to suggest that you use delegation and sometimes that means you're going to have a funny method where all you do is write when I'm going to call a trivial forwarding method. All it does is it looks like this right here. This is trivial. There's no real intellect at this, nonetheless. This is a great pattern and you shouldn't feel weird doing it. So, there's a mawopi.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 4.48, "text": " There are many types of classes out there that you might implement.", "tokens": [50364, 821, 366, 867, 3467, 295, 5359, 484, 456, 300, 291, 1062, 4445, 13, 50588, 50588, 400, 472, 588, 2121, 2010, 295, 1508, 11, 264, 422, 6, 45, 47, 43, 44, 45, 307, 364, 12649, 1412, 2010, 13, 50814, 50814, 407, 406, 1203, 307, 364, 12649, 1412, 2010, 11, 411, 9839, 11, 337, 1365, 11, 300, 311, 406, 13, 51006, 51006, 583, 721, 411, 490, 5017, 1732, 11, 264, 2256, 11, 3414, 1438, 4471, 11, 420, 264, 26779, 915, 260, 11, 51262, 51262, 729, 366, 7230, 5110, 295, 437, 472, 1062, 818, 364, 12649, 1412, 2010, 13, 51488, 51488, 407, 613, 721, 11, 5699, 291, 434, 2390, 472, 295, 552, 11, 291, 603, 2049, 4445, 552, 1228, 364, 6741, 11420, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.36406249384726247, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.050023261457681656}, {"id": 1, "seek": 0, "start": 4.48, "end": 9.0, "text": " And one very special type of class, the O'NPLMN is an abstract data type.", "tokens": [50364, 821, 366, 867, 3467, 295, 5359, 484, 456, 300, 291, 1062, 4445, 13, 50588, 50588, 400, 472, 588, 2121, 2010, 295, 1508, 11, 264, 422, 6, 45, 47, 43, 44, 45, 307, 364, 12649, 1412, 2010, 13, 50814, 50814, 407, 406, 1203, 307, 364, 12649, 1412, 2010, 11, 411, 9839, 11, 337, 1365, 11, 300, 311, 406, 13, 51006, 51006, 583, 721, 411, 490, 5017, 1732, 11, 264, 2256, 11, 3414, 1438, 4471, 11, 420, 264, 26779, 915, 260, 11, 51262, 51262, 729, 366, 7230, 5110, 295, 437, 472, 1062, 818, 364, 12649, 1412, 2010, 13, 51488, 51488, 407, 613, 721, 11, 5699, 291, 434, 2390, 472, 295, 552, 11, 291, 603, 2049, 4445, 552, 1228, 364, 6741, 11420, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.36406249384726247, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.050023261457681656}, {"id": 2, "seek": 0, "start": 9.0, "end": 12.84, "text": " So not everything is an abstract data type, like editor, for example, that's not.", "tokens": [50364, 821, 366, 867, 3467, 295, 5359, 484, 456, 300, 291, 1062, 4445, 13, 50588, 50588, 400, 472, 588, 2121, 2010, 295, 1508, 11, 264, 422, 6, 45, 47, 43, 44, 45, 307, 364, 12649, 1412, 2010, 13, 50814, 50814, 407, 406, 1203, 307, 364, 12649, 1412, 2010, 11, 411, 9839, 11, 337, 1365, 11, 300, 311, 406, 13, 51006, 51006, 583, 721, 411, 490, 5017, 1732, 11, 264, 2256, 11, 3414, 1438, 4471, 11, 420, 264, 26779, 915, 260, 11, 51262, 51262, 729, 366, 7230, 5110, 295, 437, 472, 1062, 818, 364, 12649, 1412, 2010, 13, 51488, 51488, 407, 613, 721, 11, 5699, 291, 434, 2390, 472, 295, 552, 11, 291, 603, 2049, 4445, 552, 1228, 364, 6741, 11420, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.36406249384726247, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.050023261457681656}, {"id": 3, "seek": 0, "start": 12.84, "end": 17.96, "text": " But things like from discussion five, the buy, divider map, or the median finder,", "tokens": [50364, 821, 366, 867, 3467, 295, 5359, 484, 456, 300, 291, 1062, 4445, 13, 50588, 50588, 400, 472, 588, 2121, 2010, 295, 1508, 11, 264, 422, 6, 45, 47, 43, 44, 45, 307, 364, 12649, 1412, 2010, 13, 50814, 50814, 407, 406, 1203, 307, 364, 12649, 1412, 2010, 11, 411, 9839, 11, 337, 1365, 11, 300, 311, 406, 13, 51006, 51006, 583, 721, 411, 490, 5017, 1732, 11, 264, 2256, 11, 3414, 1438, 4471, 11, 420, 264, 26779, 915, 260, 11, 51262, 51262, 729, 366, 7230, 5110, 295, 437, 472, 1062, 818, 364, 12649, 1412, 2010, 13, 51488, 51488, 407, 613, 721, 11, 5699, 291, 434, 2390, 472, 295, 552, 11, 291, 603, 2049, 4445, 552, 1228, 364, 6741, 11420, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.36406249384726247, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.050023261457681656}, {"id": 4, "seek": 0, "start": 17.96, "end": 22.48, "text": " those are classic examples of what one might call an abstract data type.", "tokens": [50364, 821, 366, 867, 3467, 295, 5359, 484, 456, 300, 291, 1062, 4445, 13, 50588, 50588, 400, 472, 588, 2121, 2010, 295, 1508, 11, 264, 422, 6, 45, 47, 43, 44, 45, 307, 364, 12649, 1412, 2010, 13, 50814, 50814, 407, 406, 1203, 307, 364, 12649, 1412, 2010, 11, 411, 9839, 11, 337, 1365, 11, 300, 311, 406, 13, 51006, 51006, 583, 721, 411, 490, 5017, 1732, 11, 264, 2256, 11, 3414, 1438, 4471, 11, 420, 264, 26779, 915, 260, 11, 51262, 51262, 729, 366, 7230, 5110, 295, 437, 472, 1062, 818, 364, 12649, 1412, 2010, 13, 51488, 51488, 407, 613, 721, 11, 5699, 291, 434, 2390, 472, 295, 552, 11, 291, 603, 2049, 4445, 552, 1228, 364, 6741, 11420, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.36406249384726247, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.050023261457681656}, {"id": 5, "seek": 0, "start": 22.48, "end": 27.84, "text": " So these things, whenever you're building one of them, you'll often implement them using an existing implementation.", "tokens": [50364, 821, 366, 867, 3467, 295, 5359, 484, 456, 300, 291, 1062, 4445, 13, 50588, 50588, 400, 472, 588, 2121, 2010, 295, 1508, 11, 264, 422, 6, 45, 47, 43, 44, 45, 307, 364, 12649, 1412, 2010, 13, 50814, 50814, 407, 406, 1203, 307, 364, 12649, 1412, 2010, 11, 411, 9839, 11, 337, 1365, 11, 300, 311, 406, 13, 51006, 51006, 583, 721, 411, 490, 5017, 1732, 11, 264, 2256, 11, 3414, 1438, 4471, 11, 420, 264, 26779, 915, 260, 11, 51262, 51262, 729, 366, 7230, 5110, 295, 437, 472, 1062, 818, 364, 12649, 1412, 2010, 13, 51488, 51488, 407, 613, 721, 11, 5699, 291, 434, 2390, 472, 295, 552, 11, 291, 603, 2049, 4445, 552, 1228, 364, 6741, 11420, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.36406249384726247, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.050023261457681656}, {"id": 6, "seek": 2784, "start": 27.84, "end": 32.84, "text": " You want to build a deck, we'll probably build it out of a list instead of going all the way down to the bottom,", "tokens": [50364, 509, 528, 281, 1322, 257, 9341, 11, 321, 603, 1391, 1322, 309, 484, 295, 257, 1329, 2602, 295, 516, 439, 264, 636, 760, 281, 264, 2767, 11, 50614, 50614, 293, 884, 1203, 294, 2115, 295, 44548, 420, 41011, 13, 50764, 50764, 3950, 2171, 291, 486, 11, 382, 321, 630, 294, 1716, 472, 13, 50894, 50894, 407, 294, 5017, 1732, 11, 337, 1365, 11, 321, 848, 281, 1322, 257, 2256, 3414, 1438, 4471, 11, 51104, 51104, 472, 295, 264, 721, 321, 727, 360, 307, 747, 1045, 11317, 11, 293, 1214, 22364, 729, 11317, 370, 300, 436, 1813, 257, 2256, 3414, 1438, 4471, 13, 51454, 51454, 3996, 1365, 307, 264, 370, 12, 11880, 26779, 915, 260, 13, 51574, 51574, 682, 300, 1389, 11, 534, 806, 468, 292, 439, 264, 3090, 589, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.2303569281279151, "compression_ratio": 1.712837837837838, "no_speech_prob": 1.4542212738888338e-05}, {"id": 7, "seek": 2784, "start": 32.84, "end": 35.84, "text": " and doing everything in terms of pointers or arrays.", "tokens": [50364, 509, 528, 281, 1322, 257, 9341, 11, 321, 603, 1391, 1322, 309, 484, 295, 257, 1329, 2602, 295, 516, 439, 264, 636, 760, 281, 264, 2767, 11, 50614, 50614, 293, 884, 1203, 294, 2115, 295, 44548, 420, 41011, 13, 50764, 50764, 3950, 2171, 291, 486, 11, 382, 321, 630, 294, 1716, 472, 13, 50894, 50894, 407, 294, 5017, 1732, 11, 337, 1365, 11, 321, 848, 281, 1322, 257, 2256, 3414, 1438, 4471, 11, 51104, 51104, 472, 295, 264, 721, 321, 727, 360, 307, 747, 1045, 11317, 11, 293, 1214, 22364, 729, 11317, 370, 300, 436, 1813, 257, 2256, 3414, 1438, 4471, 13, 51454, 51454, 3996, 1365, 307, 264, 370, 12, 11880, 26779, 915, 260, 13, 51574, 51574, 682, 300, 1389, 11, 534, 806, 468, 292, 439, 264, 3090, 589, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.2303569281279151, "compression_ratio": 1.712837837837838, "no_speech_prob": 1.4542212738888338e-05}, {"id": 8, "seek": 2784, "start": 35.84, "end": 38.44, "text": " Those sometimes you will, as we did in project one.", "tokens": [50364, 509, 528, 281, 1322, 257, 9341, 11, 321, 603, 1391, 1322, 309, 484, 295, 257, 1329, 2602, 295, 516, 439, 264, 636, 760, 281, 264, 2767, 11, 50614, 50614, 293, 884, 1203, 294, 2115, 295, 44548, 420, 41011, 13, 50764, 50764, 3950, 2171, 291, 486, 11, 382, 321, 630, 294, 1716, 472, 13, 50894, 50894, 407, 294, 5017, 1732, 11, 337, 1365, 11, 321, 848, 281, 1322, 257, 2256, 3414, 1438, 4471, 11, 51104, 51104, 472, 295, 264, 721, 321, 727, 360, 307, 747, 1045, 11317, 11, 293, 1214, 22364, 729, 11317, 370, 300, 436, 1813, 257, 2256, 3414, 1438, 4471, 13, 51454, 51454, 3996, 1365, 307, 264, 370, 12, 11880, 26779, 915, 260, 13, 51574, 51574, 682, 300, 1389, 11, 534, 806, 468, 292, 439, 264, 3090, 589, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.2303569281279151, "compression_ratio": 1.712837837837838, "no_speech_prob": 1.4542212738888338e-05}, {"id": 9, "seek": 2784, "start": 38.44, "end": 42.64, "text": " So in discussion five, for example, we said to build a buy divider map,", "tokens": [50364, 509, 528, 281, 1322, 257, 9341, 11, 321, 603, 1391, 1322, 309, 484, 295, 257, 1329, 2602, 295, 516, 439, 264, 636, 760, 281, 264, 2767, 11, 50614, 50614, 293, 884, 1203, 294, 2115, 295, 44548, 420, 41011, 13, 50764, 50764, 3950, 2171, 291, 486, 11, 382, 321, 630, 294, 1716, 472, 13, 50894, 50894, 407, 294, 5017, 1732, 11, 337, 1365, 11, 321, 848, 281, 1322, 257, 2256, 3414, 1438, 4471, 11, 51104, 51104, 472, 295, 264, 721, 321, 727, 360, 307, 747, 1045, 11317, 11, 293, 1214, 22364, 729, 11317, 370, 300, 436, 1813, 257, 2256, 3414, 1438, 4471, 13, 51454, 51454, 3996, 1365, 307, 264, 370, 12, 11880, 26779, 915, 260, 13, 51574, 51574, 682, 300, 1389, 11, 534, 806, 468, 292, 439, 264, 3090, 589, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.2303569281279151, "compression_ratio": 1.712837837837838, "no_speech_prob": 1.4542212738888338e-05}, {"id": 10, "seek": 2784, "start": 42.64, "end": 49.64, "text": " one of the things we could do is take three maps, and together assemble those maps so that they become a buy divider map.", "tokens": [50364, 509, 528, 281, 1322, 257, 9341, 11, 321, 603, 1391, 1322, 309, 484, 295, 257, 1329, 2602, 295, 516, 439, 264, 636, 760, 281, 264, 2767, 11, 50614, 50614, 293, 884, 1203, 294, 2115, 295, 44548, 420, 41011, 13, 50764, 50764, 3950, 2171, 291, 486, 11, 382, 321, 630, 294, 1716, 472, 13, 50894, 50894, 407, 294, 5017, 1732, 11, 337, 1365, 11, 321, 848, 281, 1322, 257, 2256, 3414, 1438, 4471, 11, 51104, 51104, 472, 295, 264, 721, 321, 727, 360, 307, 747, 1045, 11317, 11, 293, 1214, 22364, 729, 11317, 370, 300, 436, 1813, 257, 2256, 3414, 1438, 4471, 13, 51454, 51454, 3996, 1365, 307, 264, 370, 12, 11880, 26779, 915, 260, 13, 51574, 51574, 682, 300, 1389, 11, 534, 806, 468, 292, 439, 264, 3090, 589, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.2303569281279151, "compression_ratio": 1.712837837837838, "no_speech_prob": 1.4542212738888338e-05}, {"id": 11, "seek": 2784, "start": 49.64, "end": 52.04, "text": " Another example is the so-called median finder.", "tokens": [50364, 509, 528, 281, 1322, 257, 9341, 11, 321, 603, 1391, 1322, 309, 484, 295, 257, 1329, 2602, 295, 516, 439, 264, 636, 760, 281, 264, 2767, 11, 50614, 50614, 293, 884, 1203, 294, 2115, 295, 44548, 420, 41011, 13, 50764, 50764, 3950, 2171, 291, 486, 11, 382, 321, 630, 294, 1716, 472, 13, 50894, 50894, 407, 294, 5017, 1732, 11, 337, 1365, 11, 321, 848, 281, 1322, 257, 2256, 3414, 1438, 4471, 11, 51104, 51104, 472, 295, 264, 721, 321, 727, 360, 307, 747, 1045, 11317, 11, 293, 1214, 22364, 729, 11317, 370, 300, 436, 1813, 257, 2256, 3414, 1438, 4471, 13, 51454, 51454, 3996, 1365, 307, 264, 370, 12, 11880, 26779, 915, 260, 13, 51574, 51574, 682, 300, 1389, 11, 534, 806, 468, 292, 439, 264, 3090, 589, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.2303569281279151, "compression_ratio": 1.712837837837838, "no_speech_prob": 1.4542212738888338e-05}, {"id": 12, "seek": 2784, "start": 52.04, "end": 54.64, "text": " In that case, really elisted all the role work.", "tokens": [50364, 509, 528, 281, 1322, 257, 9341, 11, 321, 603, 1391, 1322, 309, 484, 295, 257, 1329, 2602, 295, 516, 439, 264, 636, 760, 281, 264, 2767, 11, 50614, 50614, 293, 884, 1203, 294, 2115, 295, 44548, 420, 41011, 13, 50764, 50764, 3950, 2171, 291, 486, 11, 382, 321, 630, 294, 1716, 472, 13, 50894, 50894, 407, 294, 5017, 1732, 11, 337, 1365, 11, 321, 848, 281, 1322, 257, 2256, 3414, 1438, 4471, 11, 51104, 51104, 472, 295, 264, 721, 321, 727, 360, 307, 747, 1045, 11317, 11, 293, 1214, 22364, 729, 11317, 370, 300, 436, 1813, 257, 2256, 3414, 1438, 4471, 13, 51454, 51454, 3996, 1365, 307, 264, 370, 12, 11880, 26779, 915, 260, 13, 51574, 51574, 682, 300, 1389, 11, 534, 806, 468, 292, 439, 264, 3090, 589, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.2303569281279151, "compression_ratio": 1.712837837837838, "no_speech_prob": 1.4542212738888338e-05}, {"id": 13, "seek": 5464, "start": 54.64, "end": 59.84, "text": " So we made an abstract data type that finds mediums, and we just use it, and that's built from.", "tokens": [50364, 407, 321, 1027, 364, 12649, 1412, 2010, 300, 10704, 6399, 82, 11, 293, 321, 445, 764, 309, 11, 293, 300, 311, 3094, 490, 13, 50624, 50624, 407, 321, 4761, 309, 293, 1322, 309, 490, 11926, 300, 321, 362, 257, 1329, 13, 50894, 50894, 823, 2171, 12649, 1412, 3467, 366, 2121, 3331, 295, 661, 12649, 1412, 3467, 13, 51154, 51154, 407, 512, 2689, 5110, 300, 445, 747, 14511, 11, 309, 311, 411, 257, 588, 4593, 1365, 13, 51364, 51364, 492, 362, 264, 1249, 13, 407, 1249, 82, 366, 611, 2570, 538, 264, 636, 294, 3374, 382, 3876, 13, 51614, 51614, 467, 9346, 732, 7705, 11, 294, 1249, 293, 413, 48, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.21934621375903748, "compression_ratio": 1.716, "no_speech_prob": 2.776572955554002e-06}, {"id": 14, "seek": 5464, "start": 59.84, "end": 65.24, "text": " So we designed it and build it from assuming that we have a list.", "tokens": [50364, 407, 321, 1027, 364, 12649, 1412, 2010, 300, 10704, 6399, 82, 11, 293, 321, 445, 764, 309, 11, 293, 300, 311, 3094, 490, 13, 50624, 50624, 407, 321, 4761, 309, 293, 1322, 309, 490, 11926, 300, 321, 362, 257, 1329, 13, 50894, 50894, 823, 2171, 12649, 1412, 3467, 366, 2121, 3331, 295, 661, 12649, 1412, 3467, 13, 51154, 51154, 407, 512, 2689, 5110, 300, 445, 747, 14511, 11, 309, 311, 411, 257, 588, 4593, 1365, 13, 51364, 51364, 492, 362, 264, 1249, 13, 407, 1249, 82, 366, 611, 2570, 538, 264, 636, 294, 3374, 382, 3876, 13, 51614, 51614, 467, 9346, 732, 7705, 11, 294, 1249, 293, 413, 48, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.21934621375903748, "compression_ratio": 1.716, "no_speech_prob": 2.776572955554002e-06}, {"id": 15, "seek": 5464, "start": 65.24, "end": 70.44, "text": " Now sometimes abstract data types are special cases of other abstract data types.", "tokens": [50364, 407, 321, 1027, 364, 12649, 1412, 2010, 300, 10704, 6399, 82, 11, 293, 321, 445, 764, 309, 11, 293, 300, 311, 3094, 490, 13, 50624, 50624, 407, 321, 4761, 309, 293, 1322, 309, 490, 11926, 300, 321, 362, 257, 1329, 13, 50894, 50894, 823, 2171, 12649, 1412, 3467, 366, 2121, 3331, 295, 661, 12649, 1412, 3467, 13, 51154, 51154, 407, 512, 2689, 5110, 300, 445, 747, 14511, 11, 309, 311, 411, 257, 588, 4593, 1365, 13, 51364, 51364, 492, 362, 264, 1249, 13, 407, 1249, 82, 366, 611, 2570, 538, 264, 636, 294, 3374, 382, 3876, 13, 51614, 51614, 467, 9346, 732, 7705, 11, 294, 1249, 293, 413, 48, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.21934621375903748, "compression_ratio": 1.716, "no_speech_prob": 2.776572955554002e-06}, {"id": 16, "seek": 5464, "start": 70.44, "end": 74.64, "text": " So some common examples that just take lists, it's like a very rich example.", "tokens": [50364, 407, 321, 1027, 364, 12649, 1412, 2010, 300, 10704, 6399, 82, 11, 293, 321, 445, 764, 309, 11, 293, 300, 311, 3094, 490, 13, 50624, 50624, 407, 321, 4761, 309, 293, 1322, 309, 490, 11926, 300, 321, 362, 257, 1329, 13, 50894, 50894, 823, 2171, 12649, 1412, 3467, 366, 2121, 3331, 295, 661, 12649, 1412, 3467, 13, 51154, 51154, 407, 512, 2689, 5110, 300, 445, 747, 14511, 11, 309, 311, 411, 257, 588, 4593, 1365, 13, 51364, 51364, 492, 362, 264, 1249, 13, 407, 1249, 82, 366, 611, 2570, 538, 264, 636, 294, 3374, 382, 3876, 13, 51614, 51614, 467, 9346, 732, 7705, 11, 294, 1249, 293, 413, 48, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.21934621375903748, "compression_ratio": 1.716, "no_speech_prob": 2.776572955554002e-06}, {"id": 17, "seek": 5464, "start": 74.64, "end": 79.64, "text": " We have the Q. So Qs are also known by the way in America as lines.", "tokens": [50364, 407, 321, 1027, 364, 12649, 1412, 2010, 300, 10704, 6399, 82, 11, 293, 321, 445, 764, 309, 11, 293, 300, 311, 3094, 490, 13, 50624, 50624, 407, 321, 4761, 309, 293, 1322, 309, 490, 11926, 300, 321, 362, 257, 1329, 13, 50894, 50894, 823, 2171, 12649, 1412, 3467, 366, 2121, 3331, 295, 661, 12649, 1412, 3467, 13, 51154, 51154, 407, 512, 2689, 5110, 300, 445, 747, 14511, 11, 309, 311, 411, 257, 588, 4593, 1365, 13, 51364, 51364, 492, 362, 264, 1249, 13, 407, 1249, 82, 366, 611, 2570, 538, 264, 636, 294, 3374, 382, 3876, 13, 51614, 51614, 467, 9346, 732, 7705, 11, 294, 1249, 293, 413, 48, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.21934621375903748, "compression_ratio": 1.716, "no_speech_prob": 2.776572955554002e-06}, {"id": 18, "seek": 5464, "start": 79.64, "end": 82.64, "text": " It supports two operations, in Q and DQ.", "tokens": [50364, 407, 321, 1027, 364, 12649, 1412, 2010, 300, 10704, 6399, 82, 11, 293, 321, 445, 764, 309, 11, 293, 300, 311, 3094, 490, 13, 50624, 50624, 407, 321, 4761, 309, 293, 1322, 309, 490, 11926, 300, 321, 362, 257, 1329, 13, 50894, 50894, 823, 2171, 12649, 1412, 3467, 366, 2121, 3331, 295, 661, 12649, 1412, 3467, 13, 51154, 51154, 407, 512, 2689, 5110, 300, 445, 747, 14511, 11, 309, 311, 411, 257, 588, 4593, 1365, 13, 51364, 51364, 492, 362, 264, 1249, 13, 407, 1249, 82, 366, 611, 2570, 538, 264, 636, 294, 3374, 382, 3876, 13, 51614, 51614, 467, 9346, 732, 7705, 11, 294, 1249, 293, 413, 48, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.21934621375903748, "compression_ratio": 1.716, "no_speech_prob": 2.776572955554002e-06}, {"id": 19, "seek": 8264, "start": 82.64, "end": 86.64, "text": " When you end Q, you go to the end of the Q. So if you have a bunch of people waiting,", "tokens": [50364, 1133, 291, 917, 1249, 11, 291, 352, 281, 264, 917, 295, 264, 1249, 13, 407, 498, 291, 362, 257, 3840, 295, 561, 3806, 11, 50564, 50564, 264, 917, 1249, 8137, 291, 412, 264, 646, 11, 293, 550, 413, 48, 307, 264, 954, 412, 264, 1868, 567, 2170, 281, 312, 7261, 294, 2736, 13, 50864, 50864, 407, 341, 307, 611, 2171, 1219, 257, 700, 12, 259, 700, 12, 346, 1329, 420, 283, 351, 78, 13, 51064, 51064, 400, 1338, 11, 370, 309, 311, 257, 2685, 733, 295, 1329, 300, 721, 808, 294, 510, 293, 352, 484, 300, 636, 13, 51414, 51414, 639, 307, 611, 30792, 13, 492, 1866, 30792, 294, 3071, 7991, 382, 731, 382, 294, 5017, 1732, 11, 51664, 51664, 293, 30792, 1406, 11, 370, 309, 311, 1219, 2944, 293, 1665, 7705, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.22565333512577698, "compression_ratio": 1.734982332155477, "no_speech_prob": 5.538575351238251e-06}, {"id": 20, "seek": 8264, "start": 86.64, "end": 92.64, "text": " the end Q puts you at the back, and then DQ is the person at the front who gets to be removed in return.", "tokens": [50364, 1133, 291, 917, 1249, 11, 291, 352, 281, 264, 917, 295, 264, 1249, 13, 407, 498, 291, 362, 257, 3840, 295, 561, 3806, 11, 50564, 50564, 264, 917, 1249, 8137, 291, 412, 264, 646, 11, 293, 550, 413, 48, 307, 264, 954, 412, 264, 1868, 567, 2170, 281, 312, 7261, 294, 2736, 13, 50864, 50864, 407, 341, 307, 611, 2171, 1219, 257, 700, 12, 259, 700, 12, 346, 1329, 420, 283, 351, 78, 13, 51064, 51064, 400, 1338, 11, 370, 309, 311, 257, 2685, 733, 295, 1329, 300, 721, 808, 294, 510, 293, 352, 484, 300, 636, 13, 51414, 51414, 639, 307, 611, 30792, 13, 492, 1866, 30792, 294, 3071, 7991, 382, 731, 382, 294, 5017, 1732, 11, 51664, 51664, 293, 30792, 1406, 11, 370, 309, 311, 1219, 2944, 293, 1665, 7705, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.22565333512577698, "compression_ratio": 1.734982332155477, "no_speech_prob": 5.538575351238251e-06}, {"id": 21, "seek": 8264, "start": 92.64, "end": 96.64, "text": " So this is also sometimes called a first-in first-out list or fifo.", "tokens": [50364, 1133, 291, 917, 1249, 11, 291, 352, 281, 264, 917, 295, 264, 1249, 13, 407, 498, 291, 362, 257, 3840, 295, 561, 3806, 11, 50564, 50564, 264, 917, 1249, 8137, 291, 412, 264, 646, 11, 293, 550, 413, 48, 307, 264, 954, 412, 264, 1868, 567, 2170, 281, 312, 7261, 294, 2736, 13, 50864, 50864, 407, 341, 307, 611, 2171, 1219, 257, 700, 12, 259, 700, 12, 346, 1329, 420, 283, 351, 78, 13, 51064, 51064, 400, 1338, 11, 370, 309, 311, 257, 2685, 733, 295, 1329, 300, 721, 808, 294, 510, 293, 352, 484, 300, 636, 13, 51414, 51414, 639, 307, 611, 30792, 13, 492, 1866, 30792, 294, 3071, 7991, 382, 731, 382, 294, 5017, 1732, 11, 51664, 51664, 293, 30792, 1406, 11, 370, 309, 311, 1219, 2944, 293, 1665, 7705, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.22565333512577698, "compression_ratio": 1.734982332155477, "no_speech_prob": 5.538575351238251e-06}, {"id": 22, "seek": 8264, "start": 96.64, "end": 103.64, "text": " And yeah, so it's a specific kind of list that things come in here and go out that way.", "tokens": [50364, 1133, 291, 917, 1249, 11, 291, 352, 281, 264, 917, 295, 264, 1249, 13, 407, 498, 291, 362, 257, 3840, 295, 561, 3806, 11, 50564, 50564, 264, 917, 1249, 8137, 291, 412, 264, 646, 11, 293, 550, 413, 48, 307, 264, 954, 412, 264, 1868, 567, 2170, 281, 312, 7261, 294, 2736, 13, 50864, 50864, 407, 341, 307, 611, 2171, 1219, 257, 700, 12, 259, 700, 12, 346, 1329, 420, 283, 351, 78, 13, 51064, 51064, 400, 1338, 11, 370, 309, 311, 257, 2685, 733, 295, 1329, 300, 721, 808, 294, 510, 293, 352, 484, 300, 636, 13, 51414, 51414, 639, 307, 611, 30792, 13, 492, 1866, 30792, 294, 3071, 7991, 382, 731, 382, 294, 5017, 1732, 11, 51664, 51664, 293, 30792, 1406, 11, 370, 309, 311, 1219, 2944, 293, 1665, 7705, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.22565333512577698, "compression_ratio": 1.734982332155477, "no_speech_prob": 5.538575351238251e-06}, {"id": 23, "seek": 8264, "start": 103.64, "end": 108.64, "text": " This is also stacks. We saw stacks in earlier lecture as well as in discussion five,", "tokens": [50364, 1133, 291, 917, 1249, 11, 291, 352, 281, 264, 917, 295, 264, 1249, 13, 407, 498, 291, 362, 257, 3840, 295, 561, 3806, 11, 50564, 50564, 264, 917, 1249, 8137, 291, 412, 264, 646, 11, 293, 550, 413, 48, 307, 264, 954, 412, 264, 1868, 567, 2170, 281, 312, 7261, 294, 2736, 13, 50864, 50864, 407, 341, 307, 611, 2171, 1219, 257, 700, 12, 259, 700, 12, 346, 1329, 420, 283, 351, 78, 13, 51064, 51064, 400, 1338, 11, 370, 309, 311, 257, 2685, 733, 295, 1329, 300, 721, 808, 294, 510, 293, 352, 484, 300, 636, 13, 51414, 51414, 639, 307, 611, 30792, 13, 492, 1866, 30792, 294, 3071, 7991, 382, 731, 382, 294, 5017, 1732, 11, 51664, 51664, 293, 30792, 1406, 11, 370, 309, 311, 1219, 2944, 293, 1665, 7705, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.22565333512577698, "compression_ratio": 1.734982332155477, "no_speech_prob": 5.538575351238251e-06}, {"id": 24, "seek": 8264, "start": 108.64, "end": 111.64, "text": " and stacks support, so it's called push and pop operations.", "tokens": [50364, 1133, 291, 917, 1249, 11, 291, 352, 281, 264, 917, 295, 264, 1249, 13, 407, 498, 291, 362, 257, 3840, 295, 561, 3806, 11, 50564, 50564, 264, 917, 1249, 8137, 291, 412, 264, 646, 11, 293, 550, 413, 48, 307, 264, 954, 412, 264, 1868, 567, 2170, 281, 312, 7261, 294, 2736, 13, 50864, 50864, 407, 341, 307, 611, 2171, 1219, 257, 700, 12, 259, 700, 12, 346, 1329, 420, 283, 351, 78, 13, 51064, 51064, 400, 1338, 11, 370, 309, 311, 257, 2685, 733, 295, 1329, 300, 721, 808, 294, 510, 293, 352, 484, 300, 636, 13, 51414, 51414, 639, 307, 611, 30792, 13, 492, 1866, 30792, 294, 3071, 7991, 382, 731, 382, 294, 5017, 1732, 11, 51664, 51664, 293, 30792, 1406, 11, 370, 309, 311, 1219, 2944, 293, 1665, 7705, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.22565333512577698, "compression_ratio": 1.734982332155477, "no_speech_prob": 5.538575351238251e-06}, {"id": 25, "seek": 11164, "start": 111.64, "end": 116.64, "text": " So in this case, push puts things on top of the stack, pop takes them back out.", "tokens": [50364, 407, 294, 341, 1389, 11, 2944, 8137, 721, 322, 1192, 295, 264, 8630, 11, 1665, 2516, 552, 646, 484, 13, 50614, 50614, 400, 341, 307, 611, 1936, 257, 1329, 3993, 300, 309, 311, 264, 6182, 13, 50764, 50764, 407, 309, 311, 5347, 281, 257, 1249, 13, 400, 4412, 2171, 1219, 257, 1036, 12, 259, 700, 12, 346, 13, 51014, 51014, 407, 498, 291, 362, 561, 1242, 294, 1622, 11, 309, 311, 11387, 658, 294, 1622, 881, 3938, 11, 309, 2170, 281, 1856, 958, 13, 51314, 51314, 400, 550, 321, 611, 1866, 264, 3834, 12, 3502, 1249, 293, 1716, 472, 12, 267, 13, 509, 434, 257, 665, 1331, 1277, 13, 51514, 51514, 400, 562, 291, 1322, 439, 264, 636, 490, 8459, 11, 291, 393, 1406, 614, 1868, 11, 614, 646, 11, 483, 1868, 11, 483, 646, 11, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.20223593030657086, "compression_ratio": 1.7, "no_speech_prob": 5.701189820683794e-06}, {"id": 26, "seek": 11164, "start": 116.64, "end": 119.64, "text": " And this is also basically a list except that it's the opposite.", "tokens": [50364, 407, 294, 341, 1389, 11, 2944, 8137, 721, 322, 1192, 295, 264, 8630, 11, 1665, 2516, 552, 646, 484, 13, 50614, 50614, 400, 341, 307, 611, 1936, 257, 1329, 3993, 300, 309, 311, 264, 6182, 13, 50764, 50764, 407, 309, 311, 5347, 281, 257, 1249, 13, 400, 4412, 2171, 1219, 257, 1036, 12, 259, 700, 12, 346, 13, 51014, 51014, 407, 498, 291, 362, 561, 1242, 294, 1622, 11, 309, 311, 11387, 658, 294, 1622, 881, 3938, 11, 309, 2170, 281, 1856, 958, 13, 51314, 51314, 400, 550, 321, 611, 1866, 264, 3834, 12, 3502, 1249, 293, 1716, 472, 12, 267, 13, 509, 434, 257, 665, 1331, 1277, 13, 51514, 51514, 400, 562, 291, 1322, 439, 264, 636, 490, 8459, 11, 291, 393, 1406, 614, 1868, 11, 614, 646, 11, 483, 1868, 11, 483, 646, 11, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.20223593030657086, "compression_ratio": 1.7, "no_speech_prob": 5.701189820683794e-06}, {"id": 27, "seek": 11164, "start": 119.64, "end": 124.64, "text": " So it's compared to a Q. And therefore sometimes called a last-in first-out.", "tokens": [50364, 407, 294, 341, 1389, 11, 2944, 8137, 721, 322, 1192, 295, 264, 8630, 11, 1665, 2516, 552, 646, 484, 13, 50614, 50614, 400, 341, 307, 611, 1936, 257, 1329, 3993, 300, 309, 311, 264, 6182, 13, 50764, 50764, 407, 309, 311, 5347, 281, 257, 1249, 13, 400, 4412, 2171, 1219, 257, 1036, 12, 259, 700, 12, 346, 13, 51014, 51014, 407, 498, 291, 362, 561, 1242, 294, 1622, 11, 309, 311, 11387, 658, 294, 1622, 881, 3938, 11, 309, 2170, 281, 1856, 958, 13, 51314, 51314, 400, 550, 321, 611, 1866, 264, 3834, 12, 3502, 1249, 293, 1716, 472, 12, 267, 13, 509, 434, 257, 665, 1331, 1277, 13, 51514, 51514, 400, 562, 291, 1322, 439, 264, 636, 490, 8459, 11, 291, 393, 1406, 614, 1868, 11, 614, 646, 11, 483, 1868, 11, 483, 646, 11, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.20223593030657086, "compression_ratio": 1.7, "no_speech_prob": 5.701189820683794e-06}, {"id": 28, "seek": 11164, "start": 124.64, "end": 130.64, "text": " So if you have people getting in line, it's whoever got in line most recently, it gets to leave next.", "tokens": [50364, 407, 294, 341, 1389, 11, 2944, 8137, 721, 322, 1192, 295, 264, 8630, 11, 1665, 2516, 552, 646, 484, 13, 50614, 50614, 400, 341, 307, 611, 1936, 257, 1329, 3993, 300, 309, 311, 264, 6182, 13, 50764, 50764, 407, 309, 311, 5347, 281, 257, 1249, 13, 400, 4412, 2171, 1219, 257, 1036, 12, 259, 700, 12, 346, 13, 51014, 51014, 407, 498, 291, 362, 561, 1242, 294, 1622, 11, 309, 311, 11387, 658, 294, 1622, 881, 3938, 11, 309, 2170, 281, 1856, 958, 13, 51314, 51314, 400, 550, 321, 611, 1866, 264, 3834, 12, 3502, 1249, 293, 1716, 472, 12, 267, 13, 509, 434, 257, 665, 1331, 1277, 13, 51514, 51514, 400, 562, 291, 1322, 439, 264, 636, 490, 8459, 11, 291, 393, 1406, 614, 1868, 11, 614, 646, 11, 483, 1868, 11, 483, 646, 11, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.20223593030657086, "compression_ratio": 1.7, "no_speech_prob": 5.701189820683794e-06}, {"id": 29, "seek": 11164, "start": 130.64, "end": 134.64, "text": " And then we also saw the double-ended Q and project one-at. You're a good old friend.", "tokens": [50364, 407, 294, 341, 1389, 11, 2944, 8137, 721, 322, 1192, 295, 264, 8630, 11, 1665, 2516, 552, 646, 484, 13, 50614, 50614, 400, 341, 307, 611, 1936, 257, 1329, 3993, 300, 309, 311, 264, 6182, 13, 50764, 50764, 407, 309, 311, 5347, 281, 257, 1249, 13, 400, 4412, 2171, 1219, 257, 1036, 12, 259, 700, 12, 346, 13, 51014, 51014, 407, 498, 291, 362, 561, 1242, 294, 1622, 11, 309, 311, 11387, 658, 294, 1622, 881, 3938, 11, 309, 2170, 281, 1856, 958, 13, 51314, 51314, 400, 550, 321, 611, 1866, 264, 3834, 12, 3502, 1249, 293, 1716, 472, 12, 267, 13, 509, 434, 257, 665, 1331, 1277, 13, 51514, 51514, 400, 562, 291, 1322, 439, 264, 636, 490, 8459, 11, 291, 393, 1406, 614, 1868, 11, 614, 646, 11, 483, 1868, 11, 483, 646, 11, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.20223593030657086, "compression_ratio": 1.7, "no_speech_prob": 5.701189820683794e-06}, {"id": 30, "seek": 11164, "start": 134.64, "end": 140.64, "text": " And when you build all the way from scratch, you can support ad front, ad back, get front, get back,", "tokens": [50364, 407, 294, 341, 1389, 11, 2944, 8137, 721, 322, 1192, 295, 264, 8630, 11, 1665, 2516, 552, 646, 484, 13, 50614, 50614, 400, 341, 307, 611, 1936, 257, 1329, 3993, 300, 309, 311, 264, 6182, 13, 50764, 50764, 407, 309, 311, 5347, 281, 257, 1249, 13, 400, 4412, 2171, 1219, 257, 1036, 12, 259, 700, 12, 346, 13, 51014, 51014, 407, 498, 291, 362, 561, 1242, 294, 1622, 11, 309, 311, 11387, 658, 294, 1622, 881, 3938, 11, 309, 2170, 281, 1856, 958, 13, 51314, 51314, 400, 550, 321, 611, 1866, 264, 3834, 12, 3502, 1249, 293, 1716, 472, 12, 267, 13, 509, 434, 257, 665, 1331, 1277, 13, 51514, 51514, 400, 562, 291, 1322, 439, 264, 636, 490, 8459, 11, 291, 393, 1406, 614, 1868, 11, 614, 646, 11, 483, 1868, 11, 483, 646, 11, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.20223593030657086, "compression_ratio": 1.7, "no_speech_prob": 5.701189820683794e-06}, {"id": 31, "seek": 14064, "start": 140.64, "end": 144.64, "text": " and that's a double-ended Q. It does both Q and stack stuff.", "tokens": [50364, 293, 300, 311, 257, 3834, 12, 3502, 1249, 13, 467, 775, 1293, 1249, 293, 8630, 1507, 13, 50564, 50564, 682, 1186, 11, 428, 1389, 11, 428, 9341, 11, 264, 4074, 472, 291, 630, 294, 1716, 472, 12, 267, 11, 767, 630, 754, 544, 13, 50814, 50814, 509, 434, 1075, 281, 483, 1507, 294, 264, 2808, 11, 457, 257, 13735, 9341, 420, 257, 3834, 12, 3502, 1249, 576, 787, 1406, 613, 7705, 13, 51114, 51114, 407, 577, 360, 321, 1322, 613, 721, 30, 51364, 51364, 1042, 11, 472, 7959, 337, 2390, 364, 12649, 11, 364, 11420, 295, 364, 12649, 1412, 2010, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15805442446754092, "compression_ratio": 1.6024096385542168, "no_speech_prob": 2.0600477000698447e-05}, {"id": 32, "seek": 14064, "start": 144.64, "end": 149.64, "text": " In fact, your case, your deck, the funny one you did in project one-at, actually did even more.", "tokens": [50364, 293, 300, 311, 257, 3834, 12, 3502, 1249, 13, 467, 775, 1293, 1249, 293, 8630, 1507, 13, 50564, 50564, 682, 1186, 11, 428, 1389, 11, 428, 9341, 11, 264, 4074, 472, 291, 630, 294, 1716, 472, 12, 267, 11, 767, 630, 754, 544, 13, 50814, 50814, 509, 434, 1075, 281, 483, 1507, 294, 264, 2808, 11, 457, 257, 13735, 9341, 420, 257, 3834, 12, 3502, 1249, 576, 787, 1406, 613, 7705, 13, 51114, 51114, 407, 577, 360, 321, 1322, 613, 721, 30, 51364, 51364, 1042, 11, 472, 7959, 337, 2390, 364, 12649, 11, 364, 11420, 295, 364, 12649, 1412, 2010, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15805442446754092, "compression_ratio": 1.6024096385542168, "no_speech_prob": 2.0600477000698447e-05}, {"id": 33, "seek": 14064, "start": 149.64, "end": 155.64, "text": " You're able to get stuff in the middle, but a classical deck or a double-ended Q would only support these operations.", "tokens": [50364, 293, 300, 311, 257, 3834, 12, 3502, 1249, 13, 467, 775, 1293, 1249, 293, 8630, 1507, 13, 50564, 50564, 682, 1186, 11, 428, 1389, 11, 428, 9341, 11, 264, 4074, 472, 291, 630, 294, 1716, 472, 12, 267, 11, 767, 630, 754, 544, 13, 50814, 50814, 509, 434, 1075, 281, 483, 1507, 294, 264, 2808, 11, 457, 257, 13735, 9341, 420, 257, 3834, 12, 3502, 1249, 576, 787, 1406, 613, 7705, 13, 51114, 51114, 407, 577, 360, 321, 1322, 613, 721, 30, 51364, 51364, 1042, 11, 472, 7959, 337, 2390, 364, 12649, 11, 364, 11420, 295, 364, 12649, 1412, 2010, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15805442446754092, "compression_ratio": 1.6024096385542168, "no_speech_prob": 2.0600477000698447e-05}, {"id": 34, "seek": 14064, "start": 155.64, "end": 160.64, "text": " So how do we build these things?", "tokens": [50364, 293, 300, 311, 257, 3834, 12, 3502, 1249, 13, 467, 775, 1293, 1249, 293, 8630, 1507, 13, 50564, 50564, 682, 1186, 11, 428, 1389, 11, 428, 9341, 11, 264, 4074, 472, 291, 630, 294, 1716, 472, 12, 267, 11, 767, 630, 754, 544, 13, 50814, 50814, 509, 434, 1075, 281, 483, 1507, 294, 264, 2808, 11, 457, 257, 13735, 9341, 420, 257, 3834, 12, 3502, 1249, 576, 787, 1406, 613, 7705, 13, 51114, 51114, 407, 577, 360, 321, 1322, 613, 721, 30, 51364, 51364, 1042, 11, 472, 7959, 337, 2390, 364, 12649, 11, 364, 11420, 295, 364, 12649, 1412, 2010, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15805442446754092, "compression_ratio": 1.6024096385542168, "no_speech_prob": 2.0600477000698447e-05}, {"id": 35, "seek": 14064, "start": 160.64, "end": 165.64, "text": " Well, one possibility for building an abstract, an implementation of an abstract data type,", "tokens": [50364, 293, 300, 311, 257, 3834, 12, 3502, 1249, 13, 467, 775, 1293, 1249, 293, 8630, 1507, 13, 50564, 50564, 682, 1186, 11, 428, 1389, 11, 428, 9341, 11, 264, 4074, 472, 291, 630, 294, 1716, 472, 12, 267, 11, 767, 630, 754, 544, 13, 50814, 50814, 509, 434, 1075, 281, 483, 1507, 294, 264, 2808, 11, 457, 257, 13735, 9341, 420, 257, 3834, 12, 3502, 1249, 576, 787, 1406, 613, 7705, 13, 51114, 51114, 407, 577, 360, 321, 1322, 613, 721, 30, 51364, 51364, 1042, 11, 472, 7959, 337, 2390, 364, 12649, 11, 364, 11420, 295, 364, 12649, 1412, 2010, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15805442446754092, "compression_ratio": 1.6024096385542168, "no_speech_prob": 2.0600477000698447e-05}, {"id": 36, "seek": 16564, "start": 165.64, "end": 171.64, "text": " is to do what we did in project one-at and go all the way down so that we're manipulating arrays or linked list and build it ourselves.", "tokens": [50364, 307, 281, 360, 437, 321, 630, 294, 1716, 472, 12, 267, 293, 352, 439, 264, 636, 760, 370, 300, 321, 434, 40805, 41011, 420, 9408, 1329, 293, 1322, 309, 4175, 13, 50664, 50664, 22837, 490, 8459, 13, 50764, 50764, 583, 2171, 11, 562, 321, 434, 767, 18114, 437, 307, 257, 2121, 1389, 295, 1071, 1412, 2010, 11, 321, 486, 764, 472, 295, 613, 3873, 11, 51164, 51164, 597, 286, 478, 22161, 382, 10320, 11, 36602, 11, 293, 21549, 13, 51364, 51364, 407, 718, 311, 584, 321, 362, 257, 1329, 11, 718, 311, 584, 9408, 1329, 11, 293, 321, 528, 281, 4445, 257, 8630, 13, 51564, 51564, 1012, 727, 321, 360, 300, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12629326458635, "compression_ratio": 1.6605166051660516, "no_speech_prob": 5.84387089475058e-06}, {"id": 37, "seek": 16564, "start": 171.64, "end": 173.64, "text": " Totally from scratch.", "tokens": [50364, 307, 281, 360, 437, 321, 630, 294, 1716, 472, 12, 267, 293, 352, 439, 264, 636, 760, 370, 300, 321, 434, 40805, 41011, 420, 9408, 1329, 293, 1322, 309, 4175, 13, 50664, 50664, 22837, 490, 8459, 13, 50764, 50764, 583, 2171, 11, 562, 321, 434, 767, 18114, 437, 307, 257, 2121, 1389, 295, 1071, 1412, 2010, 11, 321, 486, 764, 472, 295, 613, 3873, 11, 51164, 51164, 597, 286, 478, 22161, 382, 10320, 11, 36602, 11, 293, 21549, 13, 51364, 51364, 407, 718, 311, 584, 321, 362, 257, 1329, 11, 718, 311, 584, 9408, 1329, 11, 293, 321, 528, 281, 4445, 257, 8630, 13, 51564, 51564, 1012, 727, 321, 360, 300, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12629326458635, "compression_ratio": 1.6605166051660516, "no_speech_prob": 5.84387089475058e-06}, {"id": 38, "seek": 16564, "start": 173.64, "end": 181.64, "text": " But sometimes, when we're actually implementing what is a special case of another data type, we will use one of these tools,", "tokens": [50364, 307, 281, 360, 437, 321, 630, 294, 1716, 472, 12, 267, 293, 352, 439, 264, 636, 760, 370, 300, 321, 434, 40805, 41011, 420, 9408, 1329, 293, 1322, 309, 4175, 13, 50664, 50664, 22837, 490, 8459, 13, 50764, 50764, 583, 2171, 11, 562, 321, 434, 767, 18114, 437, 307, 257, 2121, 1389, 295, 1071, 1412, 2010, 11, 321, 486, 764, 472, 295, 613, 3873, 11, 51164, 51164, 597, 286, 478, 22161, 382, 10320, 11, 36602, 11, 293, 21549, 13, 51364, 51364, 407, 718, 311, 584, 321, 362, 257, 1329, 11, 718, 311, 584, 9408, 1329, 11, 293, 321, 528, 281, 4445, 257, 8630, 13, 51564, 51564, 1012, 727, 321, 360, 300, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12629326458635, "compression_ratio": 1.6605166051660516, "no_speech_prob": 5.84387089475058e-06}, {"id": 39, "seek": 16564, "start": 181.64, "end": 185.64, "text": " which I'm listing as extension, delegation, and adaptation.", "tokens": [50364, 307, 281, 360, 437, 321, 630, 294, 1716, 472, 12, 267, 293, 352, 439, 264, 636, 760, 370, 300, 321, 434, 40805, 41011, 420, 9408, 1329, 293, 1322, 309, 4175, 13, 50664, 50664, 22837, 490, 8459, 13, 50764, 50764, 583, 2171, 11, 562, 321, 434, 767, 18114, 437, 307, 257, 2121, 1389, 295, 1071, 1412, 2010, 11, 321, 486, 764, 472, 295, 613, 3873, 11, 51164, 51164, 597, 286, 478, 22161, 382, 10320, 11, 36602, 11, 293, 21549, 13, 51364, 51364, 407, 718, 311, 584, 321, 362, 257, 1329, 11, 718, 311, 584, 9408, 1329, 11, 293, 321, 528, 281, 4445, 257, 8630, 13, 51564, 51564, 1012, 727, 321, 360, 300, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12629326458635, "compression_ratio": 1.6605166051660516, "no_speech_prob": 5.84387089475058e-06}, {"id": 40, "seek": 16564, "start": 185.64, "end": 189.64, "text": " So let's say we have a list, let's say linked list, and we want to implement a stack.", "tokens": [50364, 307, 281, 360, 437, 321, 630, 294, 1716, 472, 12, 267, 293, 352, 439, 264, 636, 760, 370, 300, 321, 434, 40805, 41011, 420, 9408, 1329, 293, 1322, 309, 4175, 13, 50664, 50664, 22837, 490, 8459, 13, 50764, 50764, 583, 2171, 11, 562, 321, 434, 767, 18114, 437, 307, 257, 2121, 1389, 295, 1071, 1412, 2010, 11, 321, 486, 764, 472, 295, 613, 3873, 11, 51164, 51164, 597, 286, 478, 22161, 382, 10320, 11, 36602, 11, 293, 21549, 13, 51364, 51364, 407, 718, 311, 584, 321, 362, 257, 1329, 11, 718, 311, 584, 9408, 1329, 11, 293, 321, 528, 281, 4445, 257, 8630, 13, 51564, 51564, 1012, 727, 321, 360, 300, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12629326458635, "compression_ratio": 1.6605166051660516, "no_speech_prob": 5.84387089475058e-06}, {"id": 41, "seek": 16564, "start": 189.64, "end": 190.64, "text": " How could we do that?", "tokens": [50364, 307, 281, 360, 437, 321, 630, 294, 1716, 472, 12, 267, 293, 352, 439, 264, 636, 760, 370, 300, 321, 434, 40805, 41011, 420, 9408, 1329, 293, 1322, 309, 4175, 13, 50664, 50664, 22837, 490, 8459, 13, 50764, 50764, 583, 2171, 11, 562, 321, 434, 767, 18114, 437, 307, 257, 2121, 1389, 295, 1071, 1412, 2010, 11, 321, 486, 764, 472, 295, 613, 3873, 11, 51164, 51164, 597, 286, 478, 22161, 382, 10320, 11, 36602, 11, 293, 21549, 13, 51364, 51364, 407, 718, 311, 584, 321, 362, 257, 1329, 11, 718, 311, 584, 9408, 1329, 11, 293, 321, 528, 281, 4445, 257, 8630, 13, 51564, 51564, 1012, 727, 321, 360, 300, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12629326458635, "compression_ratio": 1.6605166051660516, "no_speech_prob": 5.84387089475058e-06}, {"id": 42, "seek": 19064, "start": 190.64, "end": 196.64, "text": " So one approach is extension. I could say, well, the stack is going to extend linked list, right?", "tokens": [50364, 407, 472, 3109, 307, 10320, 13, 286, 727, 584, 11, 731, 11, 264, 8630, 307, 516, 281, 10101, 9408, 1329, 11, 558, 30, 50664, 50664, 467, 307, 257, 2121, 2010, 295, 1329, 13, 50814, 50814, 407, 286, 603, 10101, 9408, 1329, 293, 718, 309, 257, 777, 3170, 1219, 2944, 11, 457, 445, 909, 746, 281, 452, 8630, 13, 51064, 51064, 1033, 30, 51114, 51114, 823, 11, 286, 478, 516, 281, 3637, 300, 498, 291, 434, 534, 11, 534, 322, 1192, 295, 721, 11, 291, 1062, 11441, 300, 456, 311, 746, 257, 707, 4074, 466, 341, 3537, 11, 293, 321, 603, 808, 646, 281, 309, 13, 51464, 51464, 400, 309, 575, 281, 360, 365, 264, 575, 12, 64, 5717, 307, 12, 64, 2480, 11, 457, 321, 603, 483, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.16941548110847188, "compression_ratio": 1.6875, "no_speech_prob": 8.07813285064185e-06}, {"id": 43, "seek": 19064, "start": 196.64, "end": 199.64, "text": " It is a special type of list.", "tokens": [50364, 407, 472, 3109, 307, 10320, 13, 286, 727, 584, 11, 731, 11, 264, 8630, 307, 516, 281, 10101, 9408, 1329, 11, 558, 30, 50664, 50664, 467, 307, 257, 2121, 2010, 295, 1329, 13, 50814, 50814, 407, 286, 603, 10101, 9408, 1329, 293, 718, 309, 257, 777, 3170, 1219, 2944, 11, 457, 445, 909, 746, 281, 452, 8630, 13, 51064, 51064, 1033, 30, 51114, 51114, 823, 11, 286, 478, 516, 281, 3637, 300, 498, 291, 434, 534, 11, 534, 322, 1192, 295, 721, 11, 291, 1062, 11441, 300, 456, 311, 746, 257, 707, 4074, 466, 341, 3537, 11, 293, 321, 603, 808, 646, 281, 309, 13, 51464, 51464, 400, 309, 575, 281, 360, 365, 264, 575, 12, 64, 5717, 307, 12, 64, 2480, 11, 457, 321, 603, 483, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.16941548110847188, "compression_ratio": 1.6875, "no_speech_prob": 8.07813285064185e-06}, {"id": 44, "seek": 19064, "start": 199.64, "end": 204.64, "text": " So I'll extend linked list and let it a new method called push, but just add something to my stack.", "tokens": [50364, 407, 472, 3109, 307, 10320, 13, 286, 727, 584, 11, 731, 11, 264, 8630, 307, 516, 281, 10101, 9408, 1329, 11, 558, 30, 50664, 50664, 467, 307, 257, 2121, 2010, 295, 1329, 13, 50814, 50814, 407, 286, 603, 10101, 9408, 1329, 293, 718, 309, 257, 777, 3170, 1219, 2944, 11, 457, 445, 909, 746, 281, 452, 8630, 13, 51064, 51064, 1033, 30, 51114, 51114, 823, 11, 286, 478, 516, 281, 3637, 300, 498, 291, 434, 534, 11, 534, 322, 1192, 295, 721, 11, 291, 1062, 11441, 300, 456, 311, 746, 257, 707, 4074, 466, 341, 3537, 11, 293, 321, 603, 808, 646, 281, 309, 13, 51464, 51464, 400, 309, 575, 281, 360, 365, 264, 575, 12, 64, 5717, 307, 12, 64, 2480, 11, 457, 321, 603, 483, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.16941548110847188, "compression_ratio": 1.6875, "no_speech_prob": 8.07813285064185e-06}, {"id": 45, "seek": 19064, "start": 204.64, "end": 205.64, "text": " Okay?", "tokens": [50364, 407, 472, 3109, 307, 10320, 13, 286, 727, 584, 11, 731, 11, 264, 8630, 307, 516, 281, 10101, 9408, 1329, 11, 558, 30, 50664, 50664, 467, 307, 257, 2121, 2010, 295, 1329, 13, 50814, 50814, 407, 286, 603, 10101, 9408, 1329, 293, 718, 309, 257, 777, 3170, 1219, 2944, 11, 457, 445, 909, 746, 281, 452, 8630, 13, 51064, 51064, 1033, 30, 51114, 51114, 823, 11, 286, 478, 516, 281, 3637, 300, 498, 291, 434, 534, 11, 534, 322, 1192, 295, 721, 11, 291, 1062, 11441, 300, 456, 311, 746, 257, 707, 4074, 466, 341, 3537, 11, 293, 321, 603, 808, 646, 281, 309, 13, 51464, 51464, 400, 309, 575, 281, 360, 365, 264, 575, 12, 64, 5717, 307, 12, 64, 2480, 11, 457, 321, 603, 483, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.16941548110847188, "compression_ratio": 1.6875, "no_speech_prob": 8.07813285064185e-06}, {"id": 46, "seek": 19064, "start": 205.64, "end": 212.64, "text": " Now, I'm going to note that if you're really, really on top of things, you might observe that there's something a little funny about this decision, and we'll come back to it.", "tokens": [50364, 407, 472, 3109, 307, 10320, 13, 286, 727, 584, 11, 731, 11, 264, 8630, 307, 516, 281, 10101, 9408, 1329, 11, 558, 30, 50664, 50664, 467, 307, 257, 2121, 2010, 295, 1329, 13, 50814, 50814, 407, 286, 603, 10101, 9408, 1329, 293, 718, 309, 257, 777, 3170, 1219, 2944, 11, 457, 445, 909, 746, 281, 452, 8630, 13, 51064, 51064, 1033, 30, 51114, 51114, 823, 11, 286, 478, 516, 281, 3637, 300, 498, 291, 434, 534, 11, 534, 322, 1192, 295, 721, 11, 291, 1062, 11441, 300, 456, 311, 746, 257, 707, 4074, 466, 341, 3537, 11, 293, 321, 603, 808, 646, 281, 309, 13, 51464, 51464, 400, 309, 575, 281, 360, 365, 264, 575, 12, 64, 5717, 307, 12, 64, 2480, 11, 457, 321, 603, 483, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.16941548110847188, "compression_ratio": 1.6875, "no_speech_prob": 8.07813285064185e-06}, {"id": 47, "seek": 19064, "start": 212.64, "end": 217.64, "text": " And it has to do with the has-a versus is-a relationship, but we'll get that.", "tokens": [50364, 407, 472, 3109, 307, 10320, 13, 286, 727, 584, 11, 731, 11, 264, 8630, 307, 516, 281, 10101, 9408, 1329, 11, 558, 30, 50664, 50664, 467, 307, 257, 2121, 2010, 295, 1329, 13, 50814, 50814, 407, 286, 603, 10101, 9408, 1329, 293, 718, 309, 257, 777, 3170, 1219, 2944, 11, 457, 445, 909, 746, 281, 452, 8630, 13, 51064, 51064, 1033, 30, 51114, 51114, 823, 11, 286, 478, 516, 281, 3637, 300, 498, 291, 434, 534, 11, 534, 322, 1192, 295, 721, 11, 291, 1062, 11441, 300, 456, 311, 746, 257, 707, 4074, 466, 341, 3537, 11, 293, 321, 603, 808, 646, 281, 309, 13, 51464, 51464, 400, 309, 575, 281, 360, 365, 264, 575, 12, 64, 5717, 307, 12, 64, 2480, 11, 457, 321, 603, 483, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.16941548110847188, "compression_ratio": 1.6875, "no_speech_prob": 8.07813285064185e-06}, {"id": 48, "seek": 21764, "start": 217.64, "end": 220.64, "text": " Another possibility is to use so-called delegation.", "tokens": [50364, 3996, 7959, 307, 281, 764, 370, 12, 11880, 36602, 13, 50514, 50514, 467, 311, 445, 257, 819, 636, 295, 1953, 13, 50614, 50614, 407, 2602, 295, 24360, 264, 9408, 1329, 1508, 11, 321, 727, 40999, 264, 589, 295, 8630, 2109, 281, 257, 9408, 1329, 13, 51014, 51014, 407, 294, 341, 1389, 11, 498, 286, 362, 257, 36602, 12, 6032, 8630, 11, 309, 575, 257, 4551, 5197, 7006, 1219, 257, 9408, 1329, 13, 51314, 51314, 492, 5883, 1125, 309, 510, 13, 286, 478, 406, 4099, 309, 382, 257, 47479, 13, 639, 307, 264, 551, 291, 393, 360, 294, 10745, 13, 51514, 51514, 407, 309, 311, 472, 295, 867, 28431, 4122, 321, 2378, 380, 2825, 466, 949, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10306878884633382, "compression_ratio": 1.6785714285714286, "no_speech_prob": 2.083200706692878e-05}, {"id": 49, "seek": 21764, "start": 220.64, "end": 222.64, "text": " It's just a different way of thinking.", "tokens": [50364, 3996, 7959, 307, 281, 764, 370, 12, 11880, 36602, 13, 50514, 50514, 467, 311, 445, 257, 819, 636, 295, 1953, 13, 50614, 50614, 407, 2602, 295, 24360, 264, 9408, 1329, 1508, 11, 321, 727, 40999, 264, 589, 295, 8630, 2109, 281, 257, 9408, 1329, 13, 51014, 51014, 407, 294, 341, 1389, 11, 498, 286, 362, 257, 36602, 12, 6032, 8630, 11, 309, 575, 257, 4551, 5197, 7006, 1219, 257, 9408, 1329, 13, 51314, 51314, 492, 5883, 1125, 309, 510, 13, 286, 478, 406, 4099, 309, 382, 257, 47479, 13, 639, 307, 264, 551, 291, 393, 360, 294, 10745, 13, 51514, 51514, 407, 309, 311, 472, 295, 867, 28431, 4122, 321, 2378, 380, 2825, 466, 949, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10306878884633382, "compression_ratio": 1.6785714285714286, "no_speech_prob": 2.083200706692878e-05}, {"id": 50, "seek": 21764, "start": 222.64, "end": 230.64, "text": " So instead of extending the linked list class, we could delegate the work of stackery to a linked list.", "tokens": [50364, 3996, 7959, 307, 281, 764, 370, 12, 11880, 36602, 13, 50514, 50514, 467, 311, 445, 257, 819, 636, 295, 1953, 13, 50614, 50614, 407, 2602, 295, 24360, 264, 9408, 1329, 1508, 11, 321, 727, 40999, 264, 589, 295, 8630, 2109, 281, 257, 9408, 1329, 13, 51014, 51014, 407, 294, 341, 1389, 11, 498, 286, 362, 257, 36602, 12, 6032, 8630, 11, 309, 575, 257, 4551, 5197, 7006, 1219, 257, 9408, 1329, 13, 51314, 51314, 492, 5883, 1125, 309, 510, 13, 286, 478, 406, 4099, 309, 382, 257, 47479, 13, 639, 307, 264, 551, 291, 393, 360, 294, 10745, 13, 51514, 51514, 407, 309, 311, 472, 295, 867, 28431, 4122, 321, 2378, 380, 2825, 466, 949, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10306878884633382, "compression_ratio": 1.6785714285714286, "no_speech_prob": 2.083200706692878e-05}, {"id": 51, "seek": 21764, "start": 230.64, "end": 236.64, "text": " So in this case, if I have a delegation-based stack, it has a private instance variable called a linked list.", "tokens": [50364, 3996, 7959, 307, 281, 764, 370, 12, 11880, 36602, 13, 50514, 50514, 467, 311, 445, 257, 819, 636, 295, 1953, 13, 50614, 50614, 407, 2602, 295, 24360, 264, 9408, 1329, 1508, 11, 321, 727, 40999, 264, 589, 295, 8630, 2109, 281, 257, 9408, 1329, 13, 51014, 51014, 407, 294, 341, 1389, 11, 498, 286, 362, 257, 36602, 12, 6032, 8630, 11, 309, 575, 257, 4551, 5197, 7006, 1219, 257, 9408, 1329, 13, 51314, 51314, 492, 5883, 1125, 309, 510, 13, 286, 478, 406, 4099, 309, 382, 257, 47479, 13, 639, 307, 264, 551, 291, 393, 360, 294, 10745, 13, 51514, 51514, 407, 309, 311, 472, 295, 867, 28431, 4122, 321, 2378, 380, 2825, 466, 949, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10306878884633382, "compression_ratio": 1.6785714285714286, "no_speech_prob": 2.083200706692878e-05}, {"id": 52, "seek": 21764, "start": 236.64, "end": 240.64, "text": " We initialize it here. I'm not showing it as a constructor. This is the thing you can do in Java.", "tokens": [50364, 3996, 7959, 307, 281, 764, 370, 12, 11880, 36602, 13, 50514, 50514, 467, 311, 445, 257, 819, 636, 295, 1953, 13, 50614, 50614, 407, 2602, 295, 24360, 264, 9408, 1329, 1508, 11, 321, 727, 40999, 264, 589, 295, 8630, 2109, 281, 257, 9408, 1329, 13, 51014, 51014, 407, 294, 341, 1389, 11, 498, 286, 362, 257, 36602, 12, 6032, 8630, 11, 309, 575, 257, 4551, 5197, 7006, 1219, 257, 9408, 1329, 13, 51314, 51314, 492, 5883, 1125, 309, 510, 13, 286, 478, 406, 4099, 309, 382, 257, 47479, 13, 639, 307, 264, 551, 291, 393, 360, 294, 10745, 13, 51514, 51514, 407, 309, 311, 472, 295, 867, 28431, 4122, 321, 2378, 380, 2825, 466, 949, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10306878884633382, "compression_ratio": 1.6785714285714286, "no_speech_prob": 2.083200706692878e-05}, {"id": 53, "seek": 21764, "start": 240.64, "end": 244.64, "text": " So it's one of many syntax features we haven't talked about before.", "tokens": [50364, 3996, 7959, 307, 281, 764, 370, 12, 11880, 36602, 13, 50514, 50514, 467, 311, 445, 257, 819, 636, 295, 1953, 13, 50614, 50614, 407, 2602, 295, 24360, 264, 9408, 1329, 1508, 11, 321, 727, 40999, 264, 589, 295, 8630, 2109, 281, 257, 9408, 1329, 13, 51014, 51014, 407, 294, 341, 1389, 11, 498, 286, 362, 257, 36602, 12, 6032, 8630, 11, 309, 575, 257, 4551, 5197, 7006, 1219, 257, 9408, 1329, 13, 51314, 51314, 492, 5883, 1125, 309, 510, 13, 286, 478, 406, 4099, 309, 382, 257, 47479, 13, 639, 307, 264, 551, 291, 393, 360, 294, 10745, 13, 51514, 51514, 407, 309, 311, 472, 295, 867, 28431, 4122, 321, 2378, 380, 2825, 466, 949, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10306878884633382, "compression_ratio": 1.6785714285714286, "no_speech_prob": 2.083200706692878e-05}, {"id": 54, "seek": 24464, "start": 244.64, "end": 249.64, "text": " And then I could say public void, push, item, and this case will say l.av.", "tokens": [50364, 400, 550, 286, 727, 584, 1908, 22009, 11, 2944, 11, 3174, 11, 293, 341, 1389, 486, 584, 287, 13, 706, 13, 50614, 50614, 407, 295, 1164, 11, 281, 505, 11, 264, 954, 3579, 264, 36602, 8630, 13, 50764, 50764, 492, 458, 264, 4054, 300, 321, 434, 534, 445, 34774, 439, 264, 589, 670, 281, 257, 9408, 1329, 11, 457, 281, 264, 2380, 1002, 11, 436, 500, 380, 458, 13, 51014, 51014, 492, 727, 312, 884, 1340, 13, 51114, 51114, 400, 294, 1186, 11, 498, 291, 764, 18762, 328, 473, 281, 22867, 794, 264, 6547, 300, 321, 5649, 281, 294, 1716, 502, 65, 11, 291, 603, 536, 300, 527, 6408, 6547, 366, 534, 445, 15824, 990, 589, 281, 264, 10745, 15148, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14967257690429686, "compression_ratio": 1.6933797909407666, "no_speech_prob": 1.605481156730093e-05}, {"id": 55, "seek": 24464, "start": 249.64, "end": 252.64, "text": " So of course, to us, the person writing the delegation stack.", "tokens": [50364, 400, 550, 286, 727, 584, 1908, 22009, 11, 2944, 11, 3174, 11, 293, 341, 1389, 486, 584, 287, 13, 706, 13, 50614, 50614, 407, 295, 1164, 11, 281, 505, 11, 264, 954, 3579, 264, 36602, 8630, 13, 50764, 50764, 492, 458, 264, 4054, 300, 321, 434, 534, 445, 34774, 439, 264, 589, 670, 281, 257, 9408, 1329, 11, 457, 281, 264, 2380, 1002, 11, 436, 500, 380, 458, 13, 51014, 51014, 492, 727, 312, 884, 1340, 13, 51114, 51114, 400, 294, 1186, 11, 498, 291, 764, 18762, 328, 473, 281, 22867, 794, 264, 6547, 300, 321, 5649, 281, 294, 1716, 502, 65, 11, 291, 603, 536, 300, 527, 6408, 6547, 366, 534, 445, 15824, 990, 589, 281, 264, 10745, 15148, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14967257690429686, "compression_ratio": 1.6933797909407666, "no_speech_prob": 1.605481156730093e-05}, {"id": 56, "seek": 24464, "start": 252.64, "end": 257.64, "text": " We know the secret that we're really just handing all the work over to a linked list, but to the outside world, they don't know.", "tokens": [50364, 400, 550, 286, 727, 584, 1908, 22009, 11, 2944, 11, 3174, 11, 293, 341, 1389, 486, 584, 287, 13, 706, 13, 50614, 50614, 407, 295, 1164, 11, 281, 505, 11, 264, 954, 3579, 264, 36602, 8630, 13, 50764, 50764, 492, 458, 264, 4054, 300, 321, 434, 534, 445, 34774, 439, 264, 589, 670, 281, 257, 9408, 1329, 11, 457, 281, 264, 2380, 1002, 11, 436, 500, 380, 458, 13, 51014, 51014, 492, 727, 312, 884, 1340, 13, 51114, 51114, 400, 294, 1186, 11, 498, 291, 764, 18762, 328, 473, 281, 22867, 794, 264, 6547, 300, 321, 5649, 281, 294, 1716, 502, 65, 11, 291, 603, 536, 300, 527, 6408, 6547, 366, 534, 445, 15824, 990, 589, 281, 264, 10745, 15148, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14967257690429686, "compression_ratio": 1.6933797909407666, "no_speech_prob": 1.605481156730093e-05}, {"id": 57, "seek": 24464, "start": 257.64, "end": 259.64, "text": " We could be doing anything.", "tokens": [50364, 400, 550, 286, 727, 584, 1908, 22009, 11, 2944, 11, 3174, 11, 293, 341, 1389, 486, 584, 287, 13, 706, 13, 50614, 50614, 407, 295, 1164, 11, 281, 505, 11, 264, 954, 3579, 264, 36602, 8630, 13, 50764, 50764, 492, 458, 264, 4054, 300, 321, 434, 534, 445, 34774, 439, 264, 589, 670, 281, 257, 9408, 1329, 11, 457, 281, 264, 2380, 1002, 11, 436, 500, 380, 458, 13, 51014, 51014, 492, 727, 312, 884, 1340, 13, 51114, 51114, 400, 294, 1186, 11, 498, 291, 764, 18762, 328, 473, 281, 22867, 794, 264, 6547, 300, 321, 5649, 281, 294, 1716, 502, 65, 11, 291, 603, 536, 300, 527, 6408, 6547, 366, 534, 445, 15824, 990, 589, 281, 264, 10745, 15148, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14967257690429686, "compression_ratio": 1.6933797909407666, "no_speech_prob": 1.605481156730093e-05}, {"id": 58, "seek": 24464, "start": 259.64, "end": 272.64, "text": " And in fact, if you use Intelligate to decompile the solutions that we provided to in project 1b, you'll see that our reference solutions are really just delegating work to the Java libraries.", "tokens": [50364, 400, 550, 286, 727, 584, 1908, 22009, 11, 2944, 11, 3174, 11, 293, 341, 1389, 486, 584, 287, 13, 706, 13, 50614, 50614, 407, 295, 1164, 11, 281, 505, 11, 264, 954, 3579, 264, 36602, 8630, 13, 50764, 50764, 492, 458, 264, 4054, 300, 321, 434, 534, 445, 34774, 439, 264, 589, 670, 281, 257, 9408, 1329, 11, 457, 281, 264, 2380, 1002, 11, 436, 500, 380, 458, 13, 51014, 51014, 492, 727, 312, 884, 1340, 13, 51114, 51114, 400, 294, 1186, 11, 498, 291, 764, 18762, 328, 473, 281, 22867, 794, 264, 6547, 300, 321, 5649, 281, 294, 1716, 502, 65, 11, 291, 603, 536, 300, 527, 6408, 6547, 366, 534, 445, 15824, 990, 589, 281, 264, 10745, 15148, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14967257690429686, "compression_ratio": 1.6933797909407666, "no_speech_prob": 1.605481156730093e-05}, {"id": 59, "seek": 27264, "start": 272.64, "end": 277.64, "text": " And that's why in project 1a, we said you are not allowed to use Java.util.link list.", "tokens": [50364, 400, 300, 311, 983, 294, 1716, 502, 64, 11, 321, 848, 291, 366, 406, 4350, 281, 764, 10745, 13, 20835, 13, 22473, 1329, 13, 50614, 50614, 10328, 11, 264, 15187, 576, 362, 668, 3879, 322, 1019, 293, 747, 291, 2217, 2077, 13, 50814, 50814, 1033, 13, 50864, 50864, 407, 300, 311, 10320, 11, 321, 10101, 264, 1508, 13, 51014, 51014, 400, 36602, 11, 321, 362, 257, 4054, 10738, 295, 7527, 300, 2909, 1854, 295, 527, 8630, 2657, 11, 550, 309, 775, 439, 264, 589, 13, 51364, 51364, 400, 550, 456, 311, 472, 544, 3109, 11, 597, 307, 257, 707, 544, 27063, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1284756120645775, "compression_ratio": 1.5770750988142292, "no_speech_prob": 1.0068689334730152e-05}, {"id": 60, "seek": 27264, "start": 277.64, "end": 281.64, "text": " Otherwise, the assignment would have been totally on fun and take you 30 minutes.", "tokens": [50364, 400, 300, 311, 983, 294, 1716, 502, 64, 11, 321, 848, 291, 366, 406, 4350, 281, 764, 10745, 13, 20835, 13, 22473, 1329, 13, 50614, 50614, 10328, 11, 264, 15187, 576, 362, 668, 3879, 322, 1019, 293, 747, 291, 2217, 2077, 13, 50814, 50814, 1033, 13, 50864, 50864, 407, 300, 311, 10320, 11, 321, 10101, 264, 1508, 13, 51014, 51014, 400, 36602, 11, 321, 362, 257, 4054, 10738, 295, 7527, 300, 2909, 1854, 295, 527, 8630, 2657, 11, 550, 309, 775, 439, 264, 589, 13, 51364, 51364, 400, 550, 456, 311, 472, 544, 3109, 11, 597, 307, 257, 707, 544, 27063, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1284756120645775, "compression_ratio": 1.5770750988142292, "no_speech_prob": 1.0068689334730152e-05}, {"id": 61, "seek": 27264, "start": 281.64, "end": 282.64, "text": " Okay.", "tokens": [50364, 400, 300, 311, 983, 294, 1716, 502, 64, 11, 321, 848, 291, 366, 406, 4350, 281, 764, 10745, 13, 20835, 13, 22473, 1329, 13, 50614, 50614, 10328, 11, 264, 15187, 576, 362, 668, 3879, 322, 1019, 293, 747, 291, 2217, 2077, 13, 50814, 50814, 1033, 13, 50864, 50864, 407, 300, 311, 10320, 11, 321, 10101, 264, 1508, 13, 51014, 51014, 400, 36602, 11, 321, 362, 257, 4054, 10738, 295, 7527, 300, 2909, 1854, 295, 527, 8630, 2657, 11, 550, 309, 775, 439, 264, 589, 13, 51364, 51364, 400, 550, 456, 311, 472, 544, 3109, 11, 597, 307, 257, 707, 544, 27063, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1284756120645775, "compression_ratio": 1.5770750988142292, "no_speech_prob": 1.0068689334730152e-05}, {"id": 62, "seek": 27264, "start": 282.64, "end": 285.64, "text": " So that's extension, we extend the class.", "tokens": [50364, 400, 300, 311, 983, 294, 1716, 502, 64, 11, 321, 848, 291, 366, 406, 4350, 281, 764, 10745, 13, 20835, 13, 22473, 1329, 13, 50614, 50614, 10328, 11, 264, 15187, 576, 362, 668, 3879, 322, 1019, 293, 747, 291, 2217, 2077, 13, 50814, 50814, 1033, 13, 50864, 50864, 407, 300, 311, 10320, 11, 321, 10101, 264, 1508, 13, 51014, 51014, 400, 36602, 11, 321, 362, 257, 4054, 10738, 295, 7527, 300, 2909, 1854, 295, 527, 8630, 2657, 11, 550, 309, 775, 439, 264, 589, 13, 51364, 51364, 400, 550, 456, 311, 472, 544, 3109, 11, 597, 307, 257, 707, 544, 27063, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1284756120645775, "compression_ratio": 1.5770750988142292, "no_speech_prob": 1.0068689334730152e-05}, {"id": 63, "seek": 27264, "start": 285.64, "end": 292.64, "text": " And delegation, we have a secret employee of sorts that lives inside of our stack object, then it does all the work.", "tokens": [50364, 400, 300, 311, 983, 294, 1716, 502, 64, 11, 321, 848, 291, 366, 406, 4350, 281, 764, 10745, 13, 20835, 13, 22473, 1329, 13, 50614, 50614, 10328, 11, 264, 15187, 576, 362, 668, 3879, 322, 1019, 293, 747, 291, 2217, 2077, 13, 50814, 50814, 1033, 13, 50864, 50864, 407, 300, 311, 10320, 11, 321, 10101, 264, 1508, 13, 51014, 51014, 400, 36602, 11, 321, 362, 257, 4054, 10738, 295, 7527, 300, 2909, 1854, 295, 527, 8630, 2657, 11, 550, 309, 775, 439, 264, 589, 13, 51364, 51364, 400, 550, 456, 311, 472, 544, 3109, 11, 597, 307, 257, 707, 544, 27063, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1284756120645775, "compression_ratio": 1.5770750988142292, "no_speech_prob": 1.0068689334730152e-05}, {"id": 64, "seek": 27264, "start": 292.64, "end": 296.64, "text": " And then there's one more approach, which is a little more exotic.", "tokens": [50364, 400, 300, 311, 983, 294, 1716, 502, 64, 11, 321, 848, 291, 366, 406, 4350, 281, 764, 10745, 13, 20835, 13, 22473, 1329, 13, 50614, 50614, 10328, 11, 264, 15187, 576, 362, 668, 3879, 322, 1019, 293, 747, 291, 2217, 2077, 13, 50814, 50814, 1033, 13, 50864, 50864, 407, 300, 311, 10320, 11, 321, 10101, 264, 1508, 13, 51014, 51014, 400, 36602, 11, 321, 362, 257, 4054, 10738, 295, 7527, 300, 2909, 1854, 295, 527, 8630, 2657, 11, 550, 309, 775, 439, 264, 589, 13, 51364, 51364, 400, 550, 456, 311, 472, 544, 3109, 11, 597, 307, 257, 707, 544, 27063, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1284756120645775, "compression_ratio": 1.5770750988142292, "no_speech_prob": 1.0068689334730152e-05}, {"id": 65, "seek": 29664, "start": 296.64, "end": 309.64, "text": " So in this approach, if someone wants to actually use an adaptation-based stack, here I call it a stack adapter, how works is if someone wants to create a stack adapter, they have to provide me with a list.", "tokens": [50364, 407, 294, 341, 3109, 11, 498, 1580, 2738, 281, 767, 764, 364, 21549, 12, 6032, 8630, 11, 510, 286, 818, 309, 257, 8630, 22860, 11, 577, 1985, 307, 498, 1580, 2738, 281, 1884, 257, 8630, 22860, 11, 436, 362, 281, 2893, 385, 365, 257, 1329, 13, 51014, 51014, 1033, 13, 51064, 51064, 407, 286, 600, 16479, 493, 293, 286, 584, 11, 4177, 11, 286, 643, 257, 8630, 13, 51264, 51264, 1057, 558, 13, 51314, 51314, 407, 1767, 2845, 385, 257, 8630, 13, 51364, 51364, 400, 322, 264, 661, 917, 11, 436, 584, 11, 1392, 11, 321, 643, 291, 281, 2845, 1580, 670, 510, 567, 575, 1329, 13759, 13, 51614, 51614, 1057, 558, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15606961698613614, "compression_ratio": 1.7564102564102564, "no_speech_prob": 6.290965393418446e-05}, {"id": 66, "seek": 29664, "start": 309.64, "end": 310.64, "text": " Okay.", "tokens": [50364, 407, 294, 341, 3109, 11, 498, 1580, 2738, 281, 767, 764, 364, 21549, 12, 6032, 8630, 11, 510, 286, 818, 309, 257, 8630, 22860, 11, 577, 1985, 307, 498, 1580, 2738, 281, 1884, 257, 8630, 22860, 11, 436, 362, 281, 2893, 385, 365, 257, 1329, 13, 51014, 51014, 1033, 13, 51064, 51064, 407, 286, 600, 16479, 493, 293, 286, 584, 11, 4177, 11, 286, 643, 257, 8630, 13, 51264, 51264, 1057, 558, 13, 51314, 51314, 407, 1767, 2845, 385, 257, 8630, 13, 51364, 51364, 400, 322, 264, 661, 917, 11, 436, 584, 11, 1392, 11, 321, 643, 291, 281, 2845, 1580, 670, 510, 567, 575, 1329, 13759, 13, 51614, 51614, 1057, 558, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15606961698613614, "compression_ratio": 1.7564102564102564, "no_speech_prob": 6.290965393418446e-05}, {"id": 67, "seek": 29664, "start": 310.64, "end": 314.64, "text": " So I've blown up and I say, hey, I need a stack.", "tokens": [50364, 407, 294, 341, 3109, 11, 498, 1580, 2738, 281, 767, 764, 364, 21549, 12, 6032, 8630, 11, 510, 286, 818, 309, 257, 8630, 22860, 11, 577, 1985, 307, 498, 1580, 2738, 281, 1884, 257, 8630, 22860, 11, 436, 362, 281, 2893, 385, 365, 257, 1329, 13, 51014, 51014, 1033, 13, 51064, 51064, 407, 286, 600, 16479, 493, 293, 286, 584, 11, 4177, 11, 286, 643, 257, 8630, 13, 51264, 51264, 1057, 558, 13, 51314, 51314, 407, 1767, 2845, 385, 257, 8630, 13, 51364, 51364, 400, 322, 264, 661, 917, 11, 436, 584, 11, 1392, 11, 321, 643, 291, 281, 2845, 1580, 670, 510, 567, 575, 1329, 13759, 13, 51614, 51614, 1057, 558, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15606961698613614, "compression_ratio": 1.7564102564102564, "no_speech_prob": 6.290965393418446e-05}, {"id": 68, "seek": 29664, "start": 314.64, "end": 315.64, "text": " All right.", "tokens": [50364, 407, 294, 341, 3109, 11, 498, 1580, 2738, 281, 767, 764, 364, 21549, 12, 6032, 8630, 11, 510, 286, 818, 309, 257, 8630, 22860, 11, 577, 1985, 307, 498, 1580, 2738, 281, 1884, 257, 8630, 22860, 11, 436, 362, 281, 2893, 385, 365, 257, 1329, 13, 51014, 51014, 1033, 13, 51064, 51064, 407, 286, 600, 16479, 493, 293, 286, 584, 11, 4177, 11, 286, 643, 257, 8630, 13, 51264, 51264, 1057, 558, 13, 51314, 51314, 407, 1767, 2845, 385, 257, 8630, 13, 51364, 51364, 400, 322, 264, 661, 917, 11, 436, 584, 11, 1392, 11, 321, 643, 291, 281, 2845, 1580, 670, 510, 567, 575, 1329, 13759, 13, 51614, 51614, 1057, 558, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15606961698613614, "compression_ratio": 1.7564102564102564, "no_speech_prob": 6.290965393418446e-05}, {"id": 69, "seek": 29664, "start": 315.64, "end": 316.64, "text": " So please send me a stack.", "tokens": [50364, 407, 294, 341, 3109, 11, 498, 1580, 2738, 281, 767, 764, 364, 21549, 12, 6032, 8630, 11, 510, 286, 818, 309, 257, 8630, 22860, 11, 577, 1985, 307, 498, 1580, 2738, 281, 1884, 257, 8630, 22860, 11, 436, 362, 281, 2893, 385, 365, 257, 1329, 13, 51014, 51014, 1033, 13, 51064, 51064, 407, 286, 600, 16479, 493, 293, 286, 584, 11, 4177, 11, 286, 643, 257, 8630, 13, 51264, 51264, 1057, 558, 13, 51314, 51314, 407, 1767, 2845, 385, 257, 8630, 13, 51364, 51364, 400, 322, 264, 661, 917, 11, 436, 584, 11, 1392, 11, 321, 643, 291, 281, 2845, 1580, 670, 510, 567, 575, 1329, 13759, 13, 51614, 51614, 1057, 558, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15606961698613614, "compression_ratio": 1.7564102564102564, "no_speech_prob": 6.290965393418446e-05}, {"id": 70, "seek": 29664, "start": 316.64, "end": 321.64, "text": " And on the other end, they say, okay, we need you to send someone over here who has list capability.", "tokens": [50364, 407, 294, 341, 3109, 11, 498, 1580, 2738, 281, 767, 764, 364, 21549, 12, 6032, 8630, 11, 510, 286, 818, 309, 257, 8630, 22860, 11, 577, 1985, 307, 498, 1580, 2738, 281, 1884, 257, 8630, 22860, 11, 436, 362, 281, 2893, 385, 365, 257, 1329, 13, 51014, 51014, 1033, 13, 51064, 51064, 407, 286, 600, 16479, 493, 293, 286, 584, 11, 4177, 11, 286, 643, 257, 8630, 13, 51264, 51264, 1057, 558, 13, 51314, 51314, 407, 1767, 2845, 385, 257, 8630, 13, 51364, 51364, 400, 322, 264, 661, 917, 11, 436, 584, 11, 1392, 11, 321, 643, 291, 281, 2845, 1580, 670, 510, 567, 575, 1329, 13759, 13, 51614, 51614, 1057, 558, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15606961698613614, "compression_ratio": 1.7564102564102564, "no_speech_prob": 6.290965393418446e-05}, {"id": 71, "seek": 29664, "start": 321.64, "end": 322.64, "text": " All right.", "tokens": [50364, 407, 294, 341, 3109, 11, 498, 1580, 2738, 281, 767, 764, 364, 21549, 12, 6032, 8630, 11, 510, 286, 818, 309, 257, 8630, 22860, 11, 577, 1985, 307, 498, 1580, 2738, 281, 1884, 257, 8630, 22860, 11, 436, 362, 281, 2893, 385, 365, 257, 1329, 13, 51014, 51014, 1033, 13, 51064, 51064, 407, 286, 600, 16479, 493, 293, 286, 584, 11, 4177, 11, 286, 643, 257, 8630, 13, 51264, 51264, 1057, 558, 13, 51314, 51314, 407, 1767, 2845, 385, 257, 8630, 13, 51364, 51364, 400, 322, 264, 661, 917, 11, 436, 584, 11, 1392, 11, 321, 643, 291, 281, 2845, 1580, 670, 510, 567, 575, 1329, 13759, 13, 51614, 51614, 1057, 558, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15606961698613614, "compression_ratio": 1.7564102564102564, "no_speech_prob": 6.290965393418446e-05}, {"id": 72, "seek": 32264, "start": 322.64, "end": 333.64, "text": " Okay. I know just the guy. Right. So in this case, instead of just asking, as I would for a delegation stack, where the constructor, not shown here, there is no, there's only a no argument constructor.", "tokens": [50364, 1033, 13, 286, 458, 445, 264, 2146, 13, 1779, 13, 407, 294, 341, 1389, 11, 2602, 295, 445, 3365, 11, 382, 286, 576, 337, 257, 36602, 8630, 11, 689, 264, 47479, 11, 406, 4898, 510, 11, 456, 307, 572, 11, 456, 311, 787, 257, 572, 6770, 47479, 13, 50914, 50914, 1692, 294, 257, 8630, 22860, 11, 498, 286, 528, 281, 652, 364, 21549, 12, 6032, 8630, 11, 286, 362, 281, 2893, 257, 1329, 281, 300, 8630, 13, 51264, 51264, 400, 300, 311, 264, 1329, 300, 264, 8630, 311, 516, 281, 764, 13, 51414, 51414, 407, 341, 727, 312, 13239, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1680913888491117, "compression_ratio": 1.6425531914893616, "no_speech_prob": 8.34603633848019e-06}, {"id": 73, "seek": 32264, "start": 333.64, "end": 340.64, "text": " Here in a stack adapter, if I want to make an adaptation-based stack, I have to provide a list to that stack.", "tokens": [50364, 1033, 13, 286, 458, 445, 264, 2146, 13, 1779, 13, 407, 294, 341, 1389, 11, 2602, 295, 445, 3365, 11, 382, 286, 576, 337, 257, 36602, 8630, 11, 689, 264, 47479, 11, 406, 4898, 510, 11, 456, 307, 572, 11, 456, 311, 787, 257, 572, 6770, 47479, 13, 50914, 50914, 1692, 294, 257, 8630, 22860, 11, 498, 286, 528, 281, 652, 364, 21549, 12, 6032, 8630, 11, 286, 362, 281, 2893, 257, 1329, 281, 300, 8630, 13, 51264, 51264, 400, 300, 311, 264, 1329, 300, 264, 8630, 311, 516, 281, 764, 13, 51414, 51414, 407, 341, 727, 312, 13239, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1680913888491117, "compression_ratio": 1.6425531914893616, "no_speech_prob": 8.34603633848019e-06}, {"id": 74, "seek": 32264, "start": 340.64, "end": 343.64, "text": " And that's the list that the stack's going to use.", "tokens": [50364, 1033, 13, 286, 458, 445, 264, 2146, 13, 1779, 13, 407, 294, 341, 1389, 11, 2602, 295, 445, 3365, 11, 382, 286, 576, 337, 257, 36602, 8630, 11, 689, 264, 47479, 11, 406, 4898, 510, 11, 456, 307, 572, 11, 456, 311, 787, 257, 572, 6770, 47479, 13, 50914, 50914, 1692, 294, 257, 8630, 22860, 11, 498, 286, 528, 281, 652, 364, 21549, 12, 6032, 8630, 11, 286, 362, 281, 2893, 257, 1329, 281, 300, 8630, 13, 51264, 51264, 400, 300, 311, 264, 1329, 300, 264, 8630, 311, 516, 281, 764, 13, 51414, 51414, 407, 341, 727, 312, 13239, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1680913888491117, "compression_ratio": 1.6425531914893616, "no_speech_prob": 8.34603633848019e-06}, {"id": 75, "seek": 32264, "start": 343.64, "end": 344.64, "text": " So this could be handy.", "tokens": [50364, 1033, 13, 286, 458, 445, 264, 2146, 13, 1779, 13, 407, 294, 341, 1389, 11, 2602, 295, 445, 3365, 11, 382, 286, 576, 337, 257, 36602, 8630, 11, 689, 264, 47479, 11, 406, 4898, 510, 11, 456, 307, 572, 11, 456, 311, 787, 257, 572, 6770, 47479, 13, 50914, 50914, 1692, 294, 257, 8630, 22860, 11, 498, 286, 528, 281, 652, 364, 21549, 12, 6032, 8630, 11, 286, 362, 281, 2893, 257, 1329, 281, 300, 8630, 13, 51264, 51264, 400, 300, 311, 264, 1329, 300, 264, 8630, 311, 516, 281, 764, 13, 51414, 51414, 407, 341, 727, 312, 13239, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1680913888491117, "compression_ratio": 1.6425531914893616, "no_speech_prob": 8.34603633848019e-06}, {"id": 76, "seek": 34464, "start": 344.64, "end": 357.64, "text": " If, for example, you wanted to provide the user of your abstract data type with the ability to determine whether or not you wanted an array-based list or a linked list or something else, right. That's one example.", "tokens": [50364, 759, 11, 337, 1365, 11, 291, 1415, 281, 2893, 264, 4195, 295, 428, 12649, 1412, 2010, 365, 264, 3485, 281, 6997, 1968, 420, 406, 291, 1415, 364, 10225, 12, 6032, 1329, 420, 257, 9408, 1329, 420, 746, 1646, 11, 558, 13, 663, 311, 472, 1365, 13, 51014, 51014, 823, 11, 341, 307, 406, 257, 588, 2689, 5102, 11, 2318, 294, 4060, 293, 363, 11, 457, 286, 1415, 281, 718, 291, 458, 466, 309, 11, 558, 30, 509, 727, 294, 8665, 362, 1580, 1011, 291, 264, 11346, 13, 51414, 51414, 509, 727, 3531, 257, 6408, 281, 309, 13, 51464, 51464, 400, 550, 562, 291, 2944, 11, 291, 909, 281, 309, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13051653744881614, "compression_ratio": 1.6389891696750902, "no_speech_prob": 2.8282995117479004e-05}, {"id": 77, "seek": 34464, "start": 357.64, "end": 365.64, "text": " Now, this is not a very common pattern, especially in 60 and B, but I wanted to let you know about it, right? You could in principle have someone hand you the worker.", "tokens": [50364, 759, 11, 337, 1365, 11, 291, 1415, 281, 2893, 264, 4195, 295, 428, 12649, 1412, 2010, 365, 264, 3485, 281, 6997, 1968, 420, 406, 291, 1415, 364, 10225, 12, 6032, 1329, 420, 257, 9408, 1329, 420, 746, 1646, 11, 558, 13, 663, 311, 472, 1365, 13, 51014, 51014, 823, 11, 341, 307, 406, 257, 588, 2689, 5102, 11, 2318, 294, 4060, 293, 363, 11, 457, 286, 1415, 281, 718, 291, 458, 466, 309, 11, 558, 30, 509, 727, 294, 8665, 362, 1580, 1011, 291, 264, 11346, 13, 51414, 51414, 509, 727, 3531, 257, 6408, 281, 309, 13, 51464, 51464, 400, 550, 562, 291, 2944, 11, 291, 909, 281, 309, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13051653744881614, "compression_ratio": 1.6389891696750902, "no_speech_prob": 2.8282995117479004e-05}, {"id": 78, "seek": 34464, "start": 365.64, "end": 366.64, "text": " You could store a reference to it.", "tokens": [50364, 759, 11, 337, 1365, 11, 291, 1415, 281, 2893, 264, 4195, 295, 428, 12649, 1412, 2010, 365, 264, 3485, 281, 6997, 1968, 420, 406, 291, 1415, 364, 10225, 12, 6032, 1329, 420, 257, 9408, 1329, 420, 746, 1646, 11, 558, 13, 663, 311, 472, 1365, 13, 51014, 51014, 823, 11, 341, 307, 406, 257, 588, 2689, 5102, 11, 2318, 294, 4060, 293, 363, 11, 457, 286, 1415, 281, 718, 291, 458, 466, 309, 11, 558, 30, 509, 727, 294, 8665, 362, 1580, 1011, 291, 264, 11346, 13, 51414, 51414, 509, 727, 3531, 257, 6408, 281, 309, 13, 51464, 51464, 400, 550, 562, 291, 2944, 11, 291, 909, 281, 309, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13051653744881614, "compression_ratio": 1.6389891696750902, "no_speech_prob": 2.8282995117479004e-05}, {"id": 79, "seek": 34464, "start": 366.64, "end": 368.64, "text": " And then when you push, you add to it.", "tokens": [50364, 759, 11, 337, 1365, 11, 291, 1415, 281, 2893, 264, 4195, 295, 428, 12649, 1412, 2010, 365, 264, 3485, 281, 6997, 1968, 420, 406, 291, 1415, 364, 10225, 12, 6032, 1329, 420, 257, 9408, 1329, 420, 746, 1646, 11, 558, 13, 663, 311, 472, 1365, 13, 51014, 51014, 823, 11, 341, 307, 406, 257, 588, 2689, 5102, 11, 2318, 294, 4060, 293, 363, 11, 457, 286, 1415, 281, 718, 291, 458, 466, 309, 11, 558, 30, 509, 727, 294, 8665, 362, 1580, 1011, 291, 264, 11346, 13, 51414, 51414, 509, 727, 3531, 257, 6408, 281, 309, 13, 51464, 51464, 400, 550, 562, 291, 2944, 11, 291, 909, 281, 309, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13051653744881614, "compression_ratio": 1.6389891696750902, "no_speech_prob": 2.8282995117479004e-05}, {"id": 80, "seek": 36864, "start": 368.64, "end": 383.64, "text": " So it's a lot like a delegation, it's just that instead of the stack deciding, you know, they're not going, instead of the stack recruiting a list for themselves, they require that if someone wants to create a stack adapter, they have to provide a list.", "tokens": [50364, 407, 309, 311, 257, 688, 411, 257, 36602, 11, 309, 311, 445, 300, 2602, 295, 264, 8630, 17990, 11, 291, 458, 11, 436, 434, 406, 516, 11, 2602, 295, 264, 8630, 25987, 257, 1329, 337, 2969, 11, 436, 3651, 300, 498, 1580, 2738, 281, 1884, 257, 8630, 22860, 11, 436, 362, 281, 2893, 257, 1329, 13, 51114, 51114, 407, 718, 385, 2642, 364, 1021, 16844, 510, 13, 961, 311, 25673, 613, 3109, 11587, 538, 10850, 264, 35799, 295, 307, 257, 5717, 575, 257, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1594540530985052, "compression_ratio": 1.6796536796536796, "no_speech_prob": 1.4288417560237576e-06}, {"id": 81, "seek": 36864, "start": 383.64, "end": 391.64, "text": " So let me draw an important distinction here. Let's critique these approach approaches by discussing the notions of is a versus has a.", "tokens": [50364, 407, 309, 311, 257, 688, 411, 257, 36602, 11, 309, 311, 445, 300, 2602, 295, 264, 8630, 17990, 11, 291, 458, 11, 436, 434, 406, 516, 11, 2602, 295, 264, 8630, 25987, 257, 1329, 337, 2969, 11, 436, 3651, 300, 498, 1580, 2738, 281, 1884, 257, 8630, 22860, 11, 436, 362, 281, 2893, 257, 1329, 13, 51114, 51114, 407, 718, 385, 2642, 364, 1021, 16844, 510, 13, 961, 311, 25673, 613, 3109, 11587, 538, 10850, 264, 35799, 295, 307, 257, 5717, 575, 257, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1594540530985052, "compression_ratio": 1.6796536796536796, "no_speech_prob": 1.4288417560237576e-06}, {"id": 82, "seek": 39164, "start": 391.64, "end": 400.64, "text": " So we've already talked about hyponym relationships in English, right, or the is a concept, a square is a rectangle, or an array list is a list.", "tokens": [50364, 407, 321, 600, 1217, 2825, 466, 7420, 12732, 6159, 294, 3669, 11, 558, 11, 420, 264, 307, 257, 3410, 11, 257, 3732, 307, 257, 21930, 11, 420, 364, 10225, 1329, 307, 257, 1329, 13, 50814, 50814, 400, 370, 294, 21766, 6006, 11, 291, 1062, 818, 341, 11, 286, 584, 11, 7420, 23423, 11, 286, 478, 406, 988, 767, 437, 264, 5844, 23338, 307, 11, 457, 4177, 11, 2035, 11, 406, 257, 43002, 5844, 13, 407, 300, 311, 452, 4054, 10069, 13, 51364, 51364, 407, 10225, 1329, 337, 1365, 307, 257, 7420, 12732, 295, 1329, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.20365244932848997, "compression_ratio": 1.6379310344827587, "no_speech_prob": 1.3597440556623042e-05}, {"id": 83, "seek": 39164, "start": 400.64, "end": 411.64, "text": " And so in linguistics, you might call this, I say, hyponomy, I'm not sure actually what the expert pronunciation is, but hey, whatever, not a linguistic expert. So that's my secret shame.", "tokens": [50364, 407, 321, 600, 1217, 2825, 466, 7420, 12732, 6159, 294, 3669, 11, 558, 11, 420, 264, 307, 257, 3410, 11, 257, 3732, 307, 257, 21930, 11, 420, 364, 10225, 1329, 307, 257, 1329, 13, 50814, 50814, 400, 370, 294, 21766, 6006, 11, 291, 1062, 818, 341, 11, 286, 584, 11, 7420, 23423, 11, 286, 478, 406, 988, 767, 437, 264, 5844, 23338, 307, 11, 457, 4177, 11, 2035, 11, 406, 257, 43002, 5844, 13, 407, 300, 311, 452, 4054, 10069, 13, 51364, 51364, 407, 10225, 1329, 337, 1365, 307, 257, 7420, 12732, 295, 1329, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.20365244932848997, "compression_ratio": 1.6379310344827587, "no_speech_prob": 1.3597440556623042e-05}, {"id": 84, "seek": 39164, "start": 411.64, "end": 414.64, "text": " So array list for example is a hyponym of list.", "tokens": [50364, 407, 321, 600, 1217, 2825, 466, 7420, 12732, 6159, 294, 3669, 11, 558, 11, 420, 264, 307, 257, 3410, 11, 257, 3732, 307, 257, 21930, 11, 420, 364, 10225, 1329, 307, 257, 1329, 13, 50814, 50814, 400, 370, 294, 21766, 6006, 11, 291, 1062, 818, 341, 11, 286, 584, 11, 7420, 23423, 11, 286, 478, 406, 988, 767, 437, 264, 5844, 23338, 307, 11, 457, 4177, 11, 2035, 11, 406, 257, 43002, 5844, 13, 407, 300, 311, 452, 4054, 10069, 13, 51364, 51364, 407, 10225, 1329, 337, 1365, 307, 257, 7420, 12732, 295, 1329, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.20365244932848997, "compression_ratio": 1.6379310344827587, "no_speech_prob": 1.3597440556623042e-05}, {"id": 85, "seek": 41464, "start": 414.64, "end": 427.64, "text": " There's another closely related and sometimes confused notion known as has a. So examples animals have a leg or a b, a bi, a viadiviter map has a rank map if you're going from discussion five.", "tokens": [50364, 821, 311, 1071, 8185, 4077, 293, 2171, 9019, 10710, 2570, 382, 575, 257, 13, 407, 5110, 4882, 362, 257, 1676, 420, 257, 272, 11, 257, 3228, 11, 257, 1932, 345, 592, 1681, 4471, 575, 257, 6181, 4471, 498, 291, 434, 516, 490, 5017, 1732, 13, 51014, 51014, 400, 370, 294, 21766, 6006, 11, 341, 307, 2570, 382, 276, 1132, 8488, 420, 276, 1132, 8488, 11, 567, 3255, 30, 51264, 51264, 400, 370, 6181, 4471, 307, 257, 276, 1132, 449, 295, 3228, 11, 257, 1932, 345, 592, 1681, 4471, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.3834804411857359, "compression_ratio": 1.6528497409326426, "no_speech_prob": 1.1546154382813256e-05}, {"id": 86, "seek": 41464, "start": 427.64, "end": 432.64, "text": " And so in linguistics, this is known as hologomy or hologomy, who knows?", "tokens": [50364, 821, 311, 1071, 8185, 4077, 293, 2171, 9019, 10710, 2570, 382, 575, 257, 13, 407, 5110, 4882, 362, 257, 1676, 420, 257, 272, 11, 257, 3228, 11, 257, 1932, 345, 592, 1681, 4471, 575, 257, 6181, 4471, 498, 291, 434, 516, 490, 5017, 1732, 13, 51014, 51014, 400, 370, 294, 21766, 6006, 11, 341, 307, 2570, 382, 276, 1132, 8488, 420, 276, 1132, 8488, 11, 567, 3255, 30, 51264, 51264, 400, 370, 6181, 4471, 307, 257, 276, 1132, 449, 295, 3228, 11, 257, 1932, 345, 592, 1681, 4471, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.3834804411857359, "compression_ratio": 1.6528497409326426, "no_speech_prob": 1.1546154382813256e-05}, {"id": 87, "seek": 41464, "start": 432.64, "end": 437.64, "text": " And so rank map is a hologum of bi, a viadiviter map.", "tokens": [50364, 821, 311, 1071, 8185, 4077, 293, 2171, 9019, 10710, 2570, 382, 575, 257, 13, 407, 5110, 4882, 362, 257, 1676, 420, 257, 272, 11, 257, 3228, 11, 257, 1932, 345, 592, 1681, 4471, 575, 257, 6181, 4471, 498, 291, 434, 516, 490, 5017, 1732, 13, 51014, 51014, 400, 370, 294, 21766, 6006, 11, 341, 307, 2570, 382, 276, 1132, 8488, 420, 276, 1132, 8488, 11, 567, 3255, 30, 51264, 51264, 400, 370, 6181, 4471, 307, 257, 276, 1132, 449, 295, 3228, 11, 257, 1932, 345, 592, 1681, 4471, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.3834804411857359, "compression_ratio": 1.6528497409326426, "no_speech_prob": 1.1546154382813256e-05}, {"id": 88, "seek": 43764, "start": 437.64, "end": 447.64, "text": " And what I want to make a note of is that when you use the extens keyword of the implements keyword in Java, that should always be an is a relationship.", "tokens": [50364, 400, 437, 286, 528, 281, 652, 257, 3637, 295, 307, 300, 562, 291, 764, 264, 1279, 694, 20428, 295, 264, 704, 17988, 20428, 294, 10745, 11, 300, 820, 1009, 312, 364, 307, 257, 2480, 13, 50864, 50864, 509, 1062, 519, 281, 1803, 11, 983, 576, 1128, 1562, 1562, 584, 1676, 420, 5496, 26448, 1676, 420, 746, 411, 300, 11, 420, 257, 636, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.1858422862949656, "compression_ratio": 1.5397727272727273, "no_speech_prob": 0.00018080724112223834}, {"id": 89, "seek": 43764, "start": 447.64, "end": 458.64, "text": " You might think to yourself, why would never ever ever say leg or animal extends leg or something like that, or a way.", "tokens": [50364, 400, 437, 286, 528, 281, 652, 257, 3637, 295, 307, 300, 562, 291, 764, 264, 1279, 694, 20428, 295, 264, 704, 17988, 20428, 294, 10745, 11, 300, 820, 1009, 312, 364, 307, 257, 2480, 13, 50864, 50864, 509, 1062, 519, 281, 1803, 11, 983, 576, 1128, 1562, 1562, 584, 1676, 420, 5496, 26448, 1676, 420, 746, 411, 300, 11, 420, 257, 636, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.1858422862949656, "compression_ratio": 1.5397727272727273, "no_speech_prob": 0.00018080724112223834}, {"id": 90, "seek": 45864, "start": 458.64, "end": 470.64, "text": " Yeah, I would never say animal extends leg, you might say to yourself and you're probably right, but sometimes you might be tempted to do something a little funny, it looks almost like an array list is a list.", "tokens": [50364, 865, 11, 286, 576, 1128, 584, 5496, 26448, 1676, 11, 291, 1062, 584, 281, 1803, 293, 291, 434, 1391, 558, 11, 457, 2171, 291, 1062, 312, 29941, 281, 360, 746, 257, 707, 4074, 11, 309, 1542, 1920, 411, 364, 10225, 1329, 307, 257, 1329, 13, 50964, 50964, 407, 286, 478, 516, 281, 1888, 322, 10745, 257, 707, 857, 13, 51114, 51114, 821, 8198, 294, 10745, 11, 746, 1219, 10745, 13, 20835, 13, 372, 501, 13, 51364, 51364, 407, 437, 307, 257, 8630, 30, 1042, 11, 498, 291, 574, 412, 264, 7123, 295, 8630, 11, 309, 26448, 264, 8062, 1508, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14868960013756385, "compression_ratio": 1.6448979591836734, "no_speech_prob": 1.765175511536654e-05}, {"id": 91, "seek": 45864, "start": 470.64, "end": 473.64, "text": " So I'm going to pick on Java a little bit.", "tokens": [50364, 865, 11, 286, 576, 1128, 584, 5496, 26448, 1676, 11, 291, 1062, 584, 281, 1803, 293, 291, 434, 1391, 558, 11, 457, 2171, 291, 1062, 312, 29941, 281, 360, 746, 257, 707, 4074, 11, 309, 1542, 1920, 411, 364, 10225, 1329, 307, 257, 1329, 13, 50964, 50964, 407, 286, 478, 516, 281, 1888, 322, 10745, 257, 707, 857, 13, 51114, 51114, 821, 8198, 294, 10745, 11, 746, 1219, 10745, 13, 20835, 13, 372, 501, 13, 51364, 51364, 407, 437, 307, 257, 8630, 30, 1042, 11, 498, 291, 574, 412, 264, 7123, 295, 8630, 11, 309, 26448, 264, 8062, 1508, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14868960013756385, "compression_ratio": 1.6448979591836734, "no_speech_prob": 1.765175511536654e-05}, {"id": 92, "seek": 45864, "start": 473.64, "end": 478.64, "text": " There exists in Java, something called Java.util.stack.", "tokens": [50364, 865, 11, 286, 576, 1128, 584, 5496, 26448, 1676, 11, 291, 1062, 584, 281, 1803, 293, 291, 434, 1391, 558, 11, 457, 2171, 291, 1062, 312, 29941, 281, 360, 746, 257, 707, 4074, 11, 309, 1542, 1920, 411, 364, 10225, 1329, 307, 257, 1329, 13, 50964, 50964, 407, 286, 478, 516, 281, 1888, 322, 10745, 257, 707, 857, 13, 51114, 51114, 821, 8198, 294, 10745, 11, 746, 1219, 10745, 13, 20835, 13, 372, 501, 13, 51364, 51364, 407, 437, 307, 257, 8630, 30, 1042, 11, 498, 291, 574, 412, 264, 7123, 295, 8630, 11, 309, 26448, 264, 8062, 1508, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14868960013756385, "compression_ratio": 1.6448979591836734, "no_speech_prob": 1.765175511536654e-05}, {"id": 93, "seek": 45864, "start": 478.64, "end": 483.64, "text": " So what is a stack? Well, if you look at the definition of stack, it extends the vector class.", "tokens": [50364, 865, 11, 286, 576, 1128, 584, 5496, 26448, 1676, 11, 291, 1062, 584, 281, 1803, 293, 291, 434, 1391, 558, 11, 457, 2171, 291, 1062, 312, 29941, 281, 360, 746, 257, 707, 4074, 11, 309, 1542, 1920, 411, 364, 10225, 1329, 307, 257, 1329, 13, 50964, 50964, 407, 286, 478, 516, 281, 1888, 322, 10745, 257, 707, 857, 13, 51114, 51114, 821, 8198, 294, 10745, 11, 746, 1219, 10745, 13, 20835, 13, 372, 501, 13, 51364, 51364, 407, 437, 307, 257, 8630, 30, 1042, 11, 498, 291, 574, 412, 264, 7123, 295, 8630, 11, 309, 26448, 264, 8062, 1508, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14868960013756385, "compression_ratio": 1.6448979591836734, "no_speech_prob": 1.765175511536654e-05}, {"id": 94, "seek": 48364, "start": 483.64, "end": 493.64, "text": " And then vector in turns extends the abstract class abstract list, abstract list implements the list interface and the list interface implements the collections interface or extends it.", "tokens": [50364, 400, 550, 8062, 294, 4523, 26448, 264, 12649, 1508, 12649, 1329, 11, 12649, 1329, 704, 17988, 264, 1329, 9226, 293, 264, 1329, 9226, 704, 17988, 264, 16641, 9226, 420, 26448, 309, 13, 50864, 50864, 407, 294, 341, 1389, 11, 538, 1566, 8630, 26448, 8062, 11, 456, 311, 1566, 257, 8630, 307, 257, 8062, 13, 51214, 51214, 400, 437, 300, 1355, 309, 727, 360, 1340, 257, 8062, 393, 360, 420, 1340, 257, 1329, 393, 360, 337, 300, 1871, 11, 457, 8630, 820, 312, 2199, 11, 558, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.16201822492811416, "compression_ratio": 1.937799043062201, "no_speech_prob": 7.6125184023112524e-06}, {"id": 95, "seek": 48364, "start": 493.64, "end": 500.64, "text": " So in this case, by saying stack extends vector, there's saying a stack is a vector.", "tokens": [50364, 400, 550, 8062, 294, 4523, 26448, 264, 12649, 1508, 12649, 1329, 11, 12649, 1329, 704, 17988, 264, 1329, 9226, 293, 264, 1329, 9226, 704, 17988, 264, 16641, 9226, 420, 26448, 309, 13, 50864, 50864, 407, 294, 341, 1389, 11, 538, 1566, 8630, 26448, 8062, 11, 456, 311, 1566, 257, 8630, 307, 257, 8062, 13, 51214, 51214, 400, 437, 300, 1355, 309, 727, 360, 1340, 257, 8062, 393, 360, 420, 1340, 257, 1329, 393, 360, 337, 300, 1871, 11, 457, 8630, 820, 312, 2199, 11, 558, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.16201822492811416, "compression_ratio": 1.937799043062201, "no_speech_prob": 7.6125184023112524e-06}, {"id": 96, "seek": 48364, "start": 500.64, "end": 507.64, "text": " And what that means it could do anything a vector can do or anything a list can do for that matter, but stack should be simple, right?", "tokens": [50364, 400, 550, 8062, 294, 4523, 26448, 264, 12649, 1508, 12649, 1329, 11, 12649, 1329, 704, 17988, 264, 1329, 9226, 293, 264, 1329, 9226, 704, 17988, 264, 16641, 9226, 420, 26448, 309, 13, 50864, 50864, 407, 294, 341, 1389, 11, 538, 1566, 8630, 26448, 8062, 11, 456, 311, 1566, 257, 8630, 307, 257, 8062, 13, 51214, 51214, 400, 437, 300, 1355, 309, 727, 360, 1340, 257, 8062, 393, 360, 420, 1340, 257, 1329, 393, 360, 337, 300, 1871, 11, 457, 8630, 820, 312, 2199, 11, 558, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.16201822492811416, "compression_ratio": 1.937799043062201, "no_speech_prob": 7.6125184023112524e-06}, {"id": 97, "seek": 50764, "start": 507.64, "end": 518.64, "text": " A stack should have push and pop and an iterator and really not much else. It should not have all the crazy methods that come with lists or with vectors and you just end up with something that's kind of unusable, right?", "tokens": [50364, 316, 8630, 820, 362, 2944, 293, 1665, 293, 364, 17138, 1639, 293, 534, 406, 709, 1646, 13, 467, 820, 406, 362, 439, 264, 3219, 7150, 300, 808, 365, 14511, 420, 365, 18875, 293, 291, 445, 917, 493, 365, 746, 300, 311, 733, 295, 10054, 712, 11, 558, 30, 50914, 50914, 286, 914, 11, 291, 4659, 380, 362, 257, 8630, 1508, 11, 370, 300, 311, 428, 1629, 721, 281, 264, 2808, 11, 445, 411, 365, 1716, 502, 32, 11, 321, 534, 820, 406, 362, 2212, 291, 257, 9341, 420, 1027, 291, 1322, 257, 9341, 1508, 420, 291, 483, 665, 1507, 294, 264, 2808, 13, 51414, 51414, 1449, 257, 3657, 551, 13, 1545, 307, 300, 1578, 30, 1545, 576, 309, 1562, 312, 1578, 281, 976, 1580, 257, 544, 4005, 1508, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.13478781047620272, "compression_ratio": 1.7986798679867986, "no_speech_prob": 7.019700206001289e-06}, {"id": 98, "seek": 50764, "start": 518.64, "end": 528.64, "text": " I mean, you shouldn't have a stack class, so that's your certain things to the middle, just like with project 1A, we really should not have given you a deck or made you build a deck class or you get good stuff in the middle.", "tokens": [50364, 316, 8630, 820, 362, 2944, 293, 1665, 293, 364, 17138, 1639, 293, 534, 406, 709, 1646, 13, 467, 820, 406, 362, 439, 264, 3219, 7150, 300, 808, 365, 14511, 420, 365, 18875, 293, 291, 445, 917, 493, 365, 746, 300, 311, 733, 295, 10054, 712, 11, 558, 30, 50914, 50914, 286, 914, 11, 291, 4659, 380, 362, 257, 8630, 1508, 11, 370, 300, 311, 428, 1629, 721, 281, 264, 2808, 11, 445, 411, 365, 1716, 502, 32, 11, 321, 534, 820, 406, 362, 2212, 291, 257, 9341, 420, 1027, 291, 1322, 257, 9341, 1508, 420, 291, 483, 665, 1507, 294, 264, 2808, 13, 51414, 51414, 1449, 257, 3657, 551, 13, 1545, 307, 300, 1578, 30, 1545, 576, 309, 1562, 312, 1578, 281, 976, 1580, 257, 544, 4005, 1508, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.13478781047620272, "compression_ratio": 1.7986798679867986, "no_speech_prob": 7.019700206001289e-06}, {"id": 99, "seek": 50764, "start": 528.64, "end": 533.64, "text": " Just a weird thing. Why is that bad? Why would it ever be bad to give someone a more powerful class?", "tokens": [50364, 316, 8630, 820, 362, 2944, 293, 1665, 293, 364, 17138, 1639, 293, 534, 406, 709, 1646, 13, 467, 820, 406, 362, 439, 264, 3219, 7150, 300, 808, 365, 14511, 420, 365, 18875, 293, 291, 445, 917, 493, 365, 746, 300, 311, 733, 295, 10054, 712, 11, 558, 30, 50914, 50914, 286, 914, 11, 291, 4659, 380, 362, 257, 8630, 1508, 11, 370, 300, 311, 428, 1629, 721, 281, 264, 2808, 11, 445, 411, 365, 1716, 502, 32, 11, 321, 534, 820, 406, 362, 2212, 291, 257, 9341, 420, 1027, 291, 1322, 257, 9341, 1508, 420, 291, 483, 665, 1507, 294, 264, 2808, 13, 51414, 51414, 1449, 257, 3657, 551, 13, 1545, 307, 300, 1578, 30, 1545, 576, 309, 1562, 312, 1578, 281, 976, 1580, 257, 544, 4005, 1508, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.13478781047620272, "compression_ratio": 1.7986798679867986, "no_speech_prob": 7.019700206001289e-06}, {"id": 100, "seek": 53364, "start": 533.64, "end": 542.64, "text": " Well, the more stuff, the more tools you give someone, the more they have to think about, right? If the stack is very simple, then it means I can't mess it up, right?", "tokens": [50364, 1042, 11, 264, 544, 1507, 11, 264, 544, 3873, 291, 976, 1580, 11, 264, 544, 436, 362, 281, 519, 466, 11, 558, 30, 759, 264, 8630, 307, 588, 2199, 11, 550, 309, 1355, 286, 393, 380, 2082, 309, 493, 11, 558, 30, 50814, 50814, 286, 478, 406, 516, 281, 652, 604, 8038, 498, 456, 311, 787, 257, 2944, 293, 257, 1665, 6916, 11, 5347, 281, 498, 456, 311, 411, 2625, 7705, 11, 1392, 30, 51114, 51114, 407, 294, 1802, 11, 437, 291, 917, 493, 365, 307, 257, 8630, 597, 575, 257, 4111, 992, 11, 746, 411, 341, 11, 457, 291, 534, 787, 528, 11, 411, 1310, 445, 341, 472, 3174, 11, 558, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.11461070460132045, "compression_ratio": 1.717557251908397, "no_speech_prob": 2.6958268790622242e-05}, {"id": 101, "seek": 53364, "start": 542.64, "end": 548.64, "text": " I'm not going to make any mistakes if there's only a push and a pop operation, compared to if there's like 50 operations, okay?", "tokens": [50364, 1042, 11, 264, 544, 1507, 11, 264, 544, 3873, 291, 976, 1580, 11, 264, 544, 436, 362, 281, 519, 466, 11, 558, 30, 759, 264, 8630, 307, 588, 2199, 11, 550, 309, 1355, 286, 393, 380, 2082, 309, 493, 11, 558, 30, 50814, 50814, 286, 478, 406, 516, 281, 652, 604, 8038, 498, 456, 311, 787, 257, 2944, 293, 257, 1665, 6916, 11, 5347, 281, 498, 456, 311, 411, 2625, 7705, 11, 1392, 30, 51114, 51114, 407, 294, 1802, 11, 437, 291, 917, 493, 365, 307, 257, 8630, 597, 575, 257, 4111, 992, 11, 746, 411, 341, 11, 457, 291, 534, 787, 528, 11, 411, 1310, 445, 341, 472, 3174, 11, 558, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.11461070460132045, "compression_ratio": 1.717557251908397, "no_speech_prob": 2.6958268790622242e-05}, {"id": 102, "seek": 53364, "start": 548.64, "end": 556.64, "text": " So in effect, what you end up with is a stack which has a feature set, something like this, but you really only want, like maybe just this one item, right?", "tokens": [50364, 1042, 11, 264, 544, 1507, 11, 264, 544, 3873, 291, 976, 1580, 11, 264, 544, 436, 362, 281, 519, 466, 11, 558, 30, 759, 264, 8630, 307, 588, 2199, 11, 550, 309, 1355, 286, 393, 380, 2082, 309, 493, 11, 558, 30, 50814, 50814, 286, 478, 406, 516, 281, 652, 604, 8038, 498, 456, 311, 787, 257, 2944, 293, 257, 1665, 6916, 11, 5347, 281, 498, 456, 311, 411, 2625, 7705, 11, 1392, 30, 51114, 51114, 407, 294, 1802, 11, 437, 291, 917, 493, 365, 307, 257, 8630, 597, 575, 257, 4111, 992, 11, 746, 411, 341, 11, 457, 291, 534, 787, 528, 11, 411, 1310, 445, 341, 472, 3174, 11, 558, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.11461070460132045, "compression_ratio": 1.717557251908397, "no_speech_prob": 2.6958268790622242e-05}, {"id": 103, "seek": 55664, "start": 556.64, "end": 565.64, "text": " By the way, this is a real thing. If you look on Amazon, this is one of the more expensive, actually it's probably gotta be the most expensive Swiss Army knife.", "tokens": [50364, 3146, 264, 636, 11, 341, 307, 257, 957, 551, 13, 759, 291, 574, 322, 6795, 11, 341, 307, 472, 295, 264, 544, 5124, 11, 767, 309, 311, 1391, 3428, 312, 264, 881, 5124, 21965, 9583, 7976, 13, 50814, 50814, 407, 352, 1520, 309, 484, 13, 8537, 11, 437, 10745, 775, 11, 411, 264, 561, 567, 4761, 10745, 11, 2745, 534, 9021, 41504, 11, 436, 576, 362, 829, 439, 341, 1507, 1214, 11, 9021, 16196, 11, 436, 1027, 341, 6146, 13, 51364, 51364, 814, 848, 257, 8630, 307, 257, 8062, 11, 457, 437, 436, 534, 4140, 307, 257, 8630, 575, 257, 8062, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1506905025906033, "compression_ratio": 1.6872727272727273, "no_speech_prob": 2.304953886778094e-05}, {"id": 104, "seek": 55664, "start": 565.64, "end": 576.64, "text": " So go check it out. Basically, what Java does, like the people who designed Java, obviously really accomplish programmers, they would have put all this stuff together, accomplish designers, they made this mistake.", "tokens": [50364, 3146, 264, 636, 11, 341, 307, 257, 957, 551, 13, 759, 291, 574, 322, 6795, 11, 341, 307, 472, 295, 264, 544, 5124, 11, 767, 309, 311, 1391, 3428, 312, 264, 881, 5124, 21965, 9583, 7976, 13, 50814, 50814, 407, 352, 1520, 309, 484, 13, 8537, 11, 437, 10745, 775, 11, 411, 264, 561, 567, 4761, 10745, 11, 2745, 534, 9021, 41504, 11, 436, 576, 362, 829, 439, 341, 1507, 1214, 11, 9021, 16196, 11, 436, 1027, 341, 6146, 13, 51364, 51364, 814, 848, 257, 8630, 307, 257, 8062, 11, 457, 437, 436, 534, 4140, 307, 257, 8630, 575, 257, 8062, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1506905025906033, "compression_ratio": 1.6872727272727273, "no_speech_prob": 2.304953886778094e-05}, {"id": 105, "seek": 55664, "start": 576.64, "end": 581.64, "text": " They said a stack is a vector, but what they really meant is a stack has a vector, right?", "tokens": [50364, 3146, 264, 636, 11, 341, 307, 257, 957, 551, 13, 759, 291, 574, 322, 6795, 11, 341, 307, 472, 295, 264, 544, 5124, 11, 767, 309, 311, 1391, 3428, 312, 264, 881, 5124, 21965, 9583, 7976, 13, 50814, 50814, 407, 352, 1520, 309, 484, 13, 8537, 11, 437, 10745, 775, 11, 411, 264, 561, 567, 4761, 10745, 11, 2745, 534, 9021, 41504, 11, 436, 576, 362, 829, 439, 341, 1507, 1214, 11, 9021, 16196, 11, 436, 1027, 341, 6146, 13, 51364, 51364, 814, 848, 257, 8630, 307, 257, 8062, 11, 457, 437, 436, 534, 4140, 307, 257, 8630, 575, 257, 8062, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1506905025906033, "compression_ratio": 1.6872727272727273, "no_speech_prob": 2.304953886778094e-05}, {"id": 106, "seek": 58164, "start": 581.64, "end": 592.64, "text": " So they shouldn't really delegate it instead of extending, but you know, you can't change history at this point, because stack, well now, I mean, that's a public class. You cannot roll it back and decide, oh, we made a mistake.", "tokens": [50364, 407, 436, 4659, 380, 534, 40999, 309, 2602, 295, 24360, 11, 457, 291, 458, 11, 291, 393, 380, 1319, 2503, 412, 341, 935, 11, 570, 8630, 11, 731, 586, 11, 286, 914, 11, 300, 311, 257, 1908, 1508, 13, 509, 2644, 3373, 309, 646, 293, 4536, 11, 1954, 11, 321, 1027, 257, 6146, 13, 50914, 50914, 1436, 4079, 484, 456, 11, 797, 11, 1580, 484, 456, 575, 1352, 341, 707, 34047, 510, 293, 436, 434, 13466, 278, 322, 1228, 309, 13, 286, 500, 380, 458, 437, 341, 551, 307, 11, 457, 309, 1542, 1238, 1627, 13, 51264, 51264, 400, 286, 576, 2138, 764, 309, 498, 286, 727, 11, 498, 286, 2586, 437, 309, 630, 11, 1392, 30, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.13984156837148115, "compression_ratio": 1.6494845360824741, "no_speech_prob": 2.9465787520166487e-05}, {"id": 107, "seek": 58164, "start": 592.64, "end": 599.64, "text": " Because somewhere out there, again, someone out there has found this little widget here and they're insisting on using it. I don't know what this thing is, but it looks pretty cool.", "tokens": [50364, 407, 436, 4659, 380, 534, 40999, 309, 2602, 295, 24360, 11, 457, 291, 458, 11, 291, 393, 380, 1319, 2503, 412, 341, 935, 11, 570, 8630, 11, 731, 586, 11, 286, 914, 11, 300, 311, 257, 1908, 1508, 13, 509, 2644, 3373, 309, 646, 293, 4536, 11, 1954, 11, 321, 1027, 257, 6146, 13, 50914, 50914, 1436, 4079, 484, 456, 11, 797, 11, 1580, 484, 456, 575, 1352, 341, 707, 34047, 510, 293, 436, 434, 13466, 278, 322, 1228, 309, 13, 286, 500, 380, 458, 437, 341, 551, 307, 11, 457, 309, 1542, 1238, 1627, 13, 51264, 51264, 400, 286, 576, 2138, 764, 309, 498, 286, 727, 11, 498, 286, 2586, 437, 309, 630, 11, 1392, 30, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.13984156837148115, "compression_ratio": 1.6494845360824741, "no_speech_prob": 2.9465787520166487e-05}, {"id": 108, "seek": 58164, "start": 599.64, "end": 603.64, "text": " And I would definitely use it if I could, if I knew what it did, okay?", "tokens": [50364, 407, 436, 4659, 380, 534, 40999, 309, 2602, 295, 24360, 11, 457, 291, 458, 11, 291, 393, 380, 1319, 2503, 412, 341, 935, 11, 570, 8630, 11, 731, 586, 11, 286, 914, 11, 300, 311, 257, 1908, 1508, 13, 509, 2644, 3373, 309, 646, 293, 4536, 11, 1954, 11, 321, 1027, 257, 6146, 13, 50914, 50914, 1436, 4079, 484, 456, 11, 797, 11, 1580, 484, 456, 575, 1352, 341, 707, 34047, 510, 293, 436, 434, 13466, 278, 322, 1228, 309, 13, 286, 500, 380, 458, 437, 341, 551, 307, 11, 457, 309, 1542, 1238, 1627, 13, 51264, 51264, 400, 286, 576, 2138, 764, 309, 498, 286, 727, 11, 498, 286, 2586, 437, 309, 630, 11, 1392, 30, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.13984156837148115, "compression_ratio": 1.6494845360824741, "no_speech_prob": 2.9465787520166487e-05}, {"id": 109, "seek": 60364, "start": 603.64, "end": 617.64, "text": " So in this case, basically the problem is this is way too complex, and with even worse, is that the iterators work backwards from what you might expect, and if you click here, actually, we can look at this bug in Java. This is filed in 2001.", "tokens": [50364, 407, 294, 341, 1389, 11, 1936, 264, 1154, 307, 341, 307, 636, 886, 3997, 11, 293, 365, 754, 5324, 11, 307, 300, 264, 17138, 3391, 589, 12204, 490, 437, 291, 1062, 2066, 11, 293, 498, 291, 2052, 510, 11, 767, 11, 321, 393, 574, 412, 341, 7426, 294, 10745, 13, 639, 307, 18789, 294, 16382, 13, 51064, 51064, 407, 562, 286, 848, 11, 264, 17138, 1639, 3170, 17138, 1024, 281, 257, 8630, 490, 264, 2767, 493, 13, 1485, 576, 519, 300, 309, 820, 44497, 382, 498, 321, 645, 18374, 766, 264, 1192, 295, 264, 8630, 11, 1392, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1563284911361395, "compression_ratio": 1.626984126984127, "no_speech_prob": 3.28801033901982e-05}, {"id": 110, "seek": 60364, "start": 617.64, "end": 626.64, "text": " So when I said, the iterator method iterates to a stack from the bottom up. One would think that it should iterate as if we were popping off the top of the stack, okay?", "tokens": [50364, 407, 294, 341, 1389, 11, 1936, 264, 1154, 307, 341, 307, 636, 886, 3997, 11, 293, 365, 754, 5324, 11, 307, 300, 264, 17138, 3391, 589, 12204, 490, 437, 291, 1062, 2066, 11, 293, 498, 291, 2052, 510, 11, 767, 11, 321, 393, 574, 412, 341, 7426, 294, 10745, 13, 639, 307, 18789, 294, 16382, 13, 51064, 51064, 407, 562, 286, 848, 11, 264, 17138, 1639, 3170, 17138, 1024, 281, 257, 8630, 490, 264, 2767, 493, 13, 1485, 576, 519, 300, 309, 820, 44497, 382, 498, 321, 645, 18374, 766, 264, 1192, 295, 264, 8630, 11, 1392, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1563284911361395, "compression_ratio": 1.626984126984127, "no_speech_prob": 3.28801033901982e-05}, {"id": 111, "seek": 62664, "start": 626.64, "end": 635.64, "text": " And the response was, it was an incorrect design decision to have stack extend vector, is they rather than has they?", "tokens": [50364, 400, 264, 4134, 390, 11, 309, 390, 364, 18424, 1715, 3537, 281, 362, 8630, 10101, 8062, 11, 307, 436, 2831, 813, 575, 436, 30, 50814, 50814, 492, 22276, 1125, 365, 264, 10315, 391, 11, 457, 2644, 3191, 341, 570, 295, 40393, 267, 2841, 420, 570, 295, 34237, 13, 407, 456, 291, 352, 13, 8537, 11, 436, 445, 848, 11, 7670, 11, 300, 311, 658, 281, 1621, 365, 309, 13, 492, 16507, 493, 13, 51364, 51364, 400, 550, 2729, 505, 589, 926, 291, 1062, 853, 498, 291, 645, 588, 8340, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.18566182319154131, "compression_ratio": 1.602510460251046, "no_speech_prob": 1.332181000179844e-05}, {"id": 112, "seek": 62664, "start": 635.64, "end": 646.64, "text": " We sympathize with the submitter, but cannot fix this because of incompatibility or because of compatibility. So there you go. Basically, they just said, eh, that's got to live with it. We messed up.", "tokens": [50364, 400, 264, 4134, 390, 11, 309, 390, 364, 18424, 1715, 3537, 281, 362, 8630, 10101, 8062, 11, 307, 436, 2831, 813, 575, 436, 30, 50814, 50814, 492, 22276, 1125, 365, 264, 10315, 391, 11, 457, 2644, 3191, 341, 570, 295, 40393, 267, 2841, 420, 570, 295, 34237, 13, 407, 456, 291, 352, 13, 8537, 11, 436, 445, 848, 11, 7670, 11, 300, 311, 658, 281, 1621, 365, 309, 13, 492, 16507, 493, 13, 51364, 51364, 400, 550, 2729, 505, 589, 926, 291, 1062, 853, 498, 291, 645, 588, 8340, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.18566182319154131, "compression_ratio": 1.602510460251046, "no_speech_prob": 1.332181000179844e-05}, {"id": 113, "seek": 62664, "start": 646.64, "end": 652.64, "text": " And then gave us work around you might try if you were very upset.", "tokens": [50364, 400, 264, 4134, 390, 11, 309, 390, 364, 18424, 1715, 3537, 281, 362, 8630, 10101, 8062, 11, 307, 436, 2831, 813, 575, 436, 30, 50814, 50814, 492, 22276, 1125, 365, 264, 10315, 391, 11, 457, 2644, 3191, 341, 570, 295, 40393, 267, 2841, 420, 570, 295, 34237, 13, 407, 456, 291, 352, 13, 8537, 11, 436, 445, 848, 11, 7670, 11, 300, 311, 658, 281, 1621, 365, 309, 13, 492, 16507, 493, 13, 51364, 51364, 400, 550, 2729, 505, 589, 926, 291, 1062, 853, 498, 291, 645, 588, 8340, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.18566182319154131, "compression_ratio": 1.602510460251046, "no_speech_prob": 1.332181000179844e-05}, {"id": 114, "seek": 65264, "start": 652.64, "end": 660.64, "text": " All right, so I guess I will have one more little Joe Armstrong quote about OP in this lecture, which is that often an object oriented programming.", "tokens": [50364, 1057, 558, 11, 370, 286, 2041, 286, 486, 362, 472, 544, 707, 6807, 36100, 6513, 466, 23324, 294, 341, 7991, 11, 597, 307, 300, 2049, 364, 2657, 21841, 9410, 13, 50764, 50764, 509, 727, 1190, 666, 264, 4074, 2590, 689, 439, 291, 528, 390, 257, 14194, 11, 457, 2602, 437, 291, 483, 390, 257, 14194, 5061, 264, 14194, 11, 1954, 11, 294, 264, 2302, 18228, 13, 51114, 51114, 1033, 11, 370, 23324, 393, 312, 257, 707, 10313, 88, 2171, 13, 51364, 51364, 1692, 311, 1071, 767, 534, 13743, 32122, 1154, 13, 1033, 11, 457, 341, 307, 257, 7230, 1365, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1829517437861516, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.4713599486858584e-05}, {"id": 115, "seek": 65264, "start": 660.64, "end": 667.64, "text": " You could run into the funny situation where all you want was a banana, but instead what you get was a banana holding the banana, oh, in the entire jungle.", "tokens": [50364, 1057, 558, 11, 370, 286, 2041, 286, 486, 362, 472, 544, 707, 6807, 36100, 6513, 466, 23324, 294, 341, 7991, 11, 597, 307, 300, 2049, 364, 2657, 21841, 9410, 13, 50764, 50764, 509, 727, 1190, 666, 264, 4074, 2590, 689, 439, 291, 528, 390, 257, 14194, 11, 457, 2602, 437, 291, 483, 390, 257, 14194, 5061, 264, 14194, 11, 1954, 11, 294, 264, 2302, 18228, 13, 51114, 51114, 1033, 11, 370, 23324, 393, 312, 257, 707, 10313, 88, 2171, 13, 51364, 51364, 1692, 311, 1071, 767, 534, 13743, 32122, 1154, 13, 1033, 11, 457, 341, 307, 257, 7230, 1365, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1829517437861516, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.4713599486858584e-05}, {"id": 116, "seek": 65264, "start": 667.64, "end": 672.64, "text": " Okay, so OP can be a little dicey sometimes.", "tokens": [50364, 1057, 558, 11, 370, 286, 2041, 286, 486, 362, 472, 544, 707, 6807, 36100, 6513, 466, 23324, 294, 341, 7991, 11, 597, 307, 300, 2049, 364, 2657, 21841, 9410, 13, 50764, 50764, 509, 727, 1190, 666, 264, 4074, 2590, 689, 439, 291, 528, 390, 257, 14194, 11, 457, 2602, 437, 291, 483, 390, 257, 14194, 5061, 264, 14194, 11, 1954, 11, 294, 264, 2302, 18228, 13, 51114, 51114, 1033, 11, 370, 23324, 393, 312, 257, 707, 10313, 88, 2171, 13, 51364, 51364, 1692, 311, 1071, 767, 534, 13743, 32122, 1154, 13, 1033, 11, 457, 341, 307, 257, 7230, 1365, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1829517437861516, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.4713599486858584e-05}, {"id": 117, "seek": 65264, "start": 672.64, "end": 678.64, "text": " Here's another actually really subtle inheritance problem. Okay, but this is a classic example.", "tokens": [50364, 1057, 558, 11, 370, 286, 2041, 286, 486, 362, 472, 544, 707, 6807, 36100, 6513, 466, 23324, 294, 341, 7991, 11, 597, 307, 300, 2049, 364, 2657, 21841, 9410, 13, 50764, 50764, 509, 727, 1190, 666, 264, 4074, 2590, 689, 439, 291, 528, 390, 257, 14194, 11, 457, 2602, 437, 291, 483, 390, 257, 14194, 5061, 264, 14194, 11, 1954, 11, 294, 264, 2302, 18228, 13, 51114, 51114, 1033, 11, 370, 23324, 393, 312, 257, 707, 10313, 88, 2171, 13, 51364, 51364, 1692, 311, 1071, 767, 534, 13743, 32122, 1154, 13, 1033, 11, 457, 341, 307, 257, 7230, 1365, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1829517437861516, "compression_ratio": 1.6028880866425992, "no_speech_prob": 2.4713599486858584e-05}, {"id": 118, "seek": 67864, "start": 678.64, "end": 687.64, "text": " I hope you'll agree with me that a square is a rectangle, right? It says all the features of a rectangle. The only thing special about it is that it's two sides need to be the same.", "tokens": [50364, 286, 1454, 291, 603, 3986, 365, 385, 300, 257, 3732, 307, 257, 21930, 11, 558, 30, 467, 1619, 439, 264, 4122, 295, 257, 21930, 13, 440, 787, 551, 2121, 466, 309, 307, 300, 309, 311, 732, 4881, 643, 281, 312, 264, 912, 13, 50814, 50814, 407, 286, 1062, 1643, 588, 3303, 281, 584, 1908, 1508, 3732, 26448, 21930, 11, 558, 30, 1042, 11, 321, 727, 312, 2085, 365, 300, 13, 51114, 51114, 583, 437, 311, 4074, 466, 341, 307, 300, 24077, 904, 11, 286, 914, 436, 1062, 362, 257, 2121, 992, 365, 3170, 293, 257, 992, 6681, 3170, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.12285907523145953, "compression_ratio": 1.7073170731707317, "no_speech_prob": 5.174077159608714e-06}, {"id": 119, "seek": 67864, "start": 687.64, "end": 693.64, "text": " So I might seem very natural to say public class square extends rectangle, right? Well, we could be wrong with that.", "tokens": [50364, 286, 1454, 291, 603, 3986, 365, 385, 300, 257, 3732, 307, 257, 21930, 11, 558, 30, 467, 1619, 439, 264, 4122, 295, 257, 21930, 13, 440, 787, 551, 2121, 466, 309, 307, 300, 309, 311, 732, 4881, 643, 281, 312, 264, 912, 13, 50814, 50814, 407, 286, 1062, 1643, 588, 3303, 281, 584, 1908, 1508, 3732, 26448, 21930, 11, 558, 30, 1042, 11, 321, 727, 312, 2085, 365, 300, 13, 51114, 51114, 583, 437, 311, 4074, 466, 341, 307, 300, 24077, 904, 11, 286, 914, 436, 1062, 362, 257, 2121, 992, 365, 3170, 293, 257, 992, 6681, 3170, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.12285907523145953, "compression_ratio": 1.7073170731707317, "no_speech_prob": 5.174077159608714e-06}, {"id": 120, "seek": 67864, "start": 693.64, "end": 700.64, "text": " But what's funny about this is that rectangles, I mean they might have a special set with method and a set height method.", "tokens": [50364, 286, 1454, 291, 603, 3986, 365, 385, 300, 257, 3732, 307, 257, 21930, 11, 558, 30, 467, 1619, 439, 264, 4122, 295, 257, 21930, 13, 440, 787, 551, 2121, 466, 309, 307, 300, 309, 311, 732, 4881, 643, 281, 312, 264, 912, 13, 50814, 50814, 407, 286, 1062, 1643, 588, 3303, 281, 584, 1908, 1508, 3732, 26448, 21930, 11, 558, 30, 1042, 11, 321, 727, 312, 2085, 365, 300, 13, 51114, 51114, 583, 437, 311, 4074, 466, 341, 307, 300, 24077, 904, 11, 286, 914, 436, 1062, 362, 257, 2121, 992, 365, 3170, 293, 257, 992, 6681, 3170, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.12285907523145953, "compression_ratio": 1.7073170731707317, "no_speech_prob": 5.174077159608714e-06}, {"id": 121, "seek": 70064, "start": 700.64, "end": 716.64, "text": " So these methods should not exist, right? Square. You should not have a separate set width and set height method, but you're kind of stuck with it, right? Because because the square extends rectangle, that all the powers of a rectangle has all the verbs of a rectangle, right?", "tokens": [50364, 407, 613, 7150, 820, 406, 2514, 11, 558, 30, 16463, 13, 509, 820, 406, 362, 257, 4994, 992, 11402, 293, 992, 6681, 3170, 11, 457, 291, 434, 733, 295, 5541, 365, 309, 11, 558, 30, 1436, 570, 264, 3732, 26448, 21930, 11, 300, 439, 264, 8674, 295, 257, 21930, 575, 439, 264, 30051, 295, 257, 21930, 11, 558, 30, 51164, 51164, 407, 309, 311, 406, 445, 300, 309, 575, 1293, 257, 11402, 293, 257, 6681, 13, 467, 307, 300, 309, 575, 264, 3485, 281, 992, 613, 21761, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1478302064149276, "compression_ratio": 1.7972350230414746, "no_speech_prob": 6.776170721423114e-06}, {"id": 122, "seek": 70064, "start": 716.64, "end": 722.64, "text": " So it's not just that it has both a width and a height. It is that it has the ability to set these independently.", "tokens": [50364, 407, 613, 7150, 820, 406, 2514, 11, 558, 30, 16463, 13, 509, 820, 406, 362, 257, 4994, 992, 11402, 293, 992, 6681, 3170, 11, 457, 291, 434, 733, 295, 5541, 365, 309, 11, 558, 30, 1436, 570, 264, 3732, 26448, 21930, 11, 300, 439, 264, 8674, 295, 257, 21930, 575, 439, 264, 30051, 295, 257, 21930, 11, 558, 30, 51164, 51164, 407, 309, 311, 406, 445, 300, 309, 575, 1293, 257, 11402, 293, 257, 6681, 13, 467, 307, 300, 309, 575, 264, 3485, 281, 992, 613, 21761, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1478302064149276, "compression_ratio": 1.7972350230414746, "no_speech_prob": 6.776170721423114e-06}, {"id": 123, "seek": 72264, "start": 722.64, "end": 730.64, "text": " So I could have principle create a square and even though the square constructor might only have one parameter, which that's both the width and the height, I get say, new square 10.", "tokens": [50364, 407, 286, 727, 362, 8665, 1884, 257, 3732, 293, 754, 1673, 264, 3732, 47479, 1062, 787, 362, 472, 13075, 11, 597, 300, 311, 1293, 264, 11402, 293, 264, 6681, 11, 286, 483, 584, 11, 777, 3732, 1266, 13, 50764, 50764, 286, 727, 550, 1780, 992, 264, 11402, 281, 732, 293, 586, 309, 311, 572, 2854, 767, 257, 3732, 11, 558, 30, 51014, 51014, 407, 456, 311, 767, 257, 534, 688, 295, 534, 2452, 4598, 466, 341, 733, 295, 551, 13, 51214, 51214, 400, 456, 311, 257, 1379, 7222, 291, 393, 1401, 510, 466, 341, 370, 1219, 6329, 8284, 48041, 1154, 498, 291, 528, 281, 458, 544, 11, 457, 445, 281, 718, 291, 458, 32122, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1783174146123293, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.1294426258245949e-05}, {"id": 124, "seek": 72264, "start": 730.64, "end": 735.64, "text": " I could then later set the width to two and now it's no longer actually a square, right?", "tokens": [50364, 407, 286, 727, 362, 8665, 1884, 257, 3732, 293, 754, 1673, 264, 3732, 47479, 1062, 787, 362, 472, 13075, 11, 597, 300, 311, 1293, 264, 11402, 293, 264, 6681, 11, 286, 483, 584, 11, 777, 3732, 1266, 13, 50764, 50764, 286, 727, 550, 1780, 992, 264, 11402, 281, 732, 293, 586, 309, 311, 572, 2854, 767, 257, 3732, 11, 558, 30, 51014, 51014, 407, 456, 311, 767, 257, 534, 688, 295, 534, 2452, 4598, 466, 341, 733, 295, 551, 13, 51214, 51214, 400, 456, 311, 257, 1379, 7222, 291, 393, 1401, 510, 466, 341, 370, 1219, 6329, 8284, 48041, 1154, 498, 291, 528, 281, 458, 544, 11, 457, 445, 281, 718, 291, 458, 32122, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1783174146123293, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.1294426258245949e-05}, {"id": 125, "seek": 72264, "start": 735.64, "end": 739.64, "text": " So there's actually a really lot of really deep thoughts about this kind of thing.", "tokens": [50364, 407, 286, 727, 362, 8665, 1884, 257, 3732, 293, 754, 1673, 264, 3732, 47479, 1062, 787, 362, 472, 13075, 11, 597, 300, 311, 1293, 264, 11402, 293, 264, 6681, 11, 286, 483, 584, 11, 777, 3732, 1266, 13, 50764, 50764, 286, 727, 550, 1780, 992, 264, 11402, 281, 732, 293, 586, 309, 311, 572, 2854, 767, 257, 3732, 11, 558, 30, 51014, 51014, 407, 456, 311, 767, 257, 534, 688, 295, 534, 2452, 4598, 466, 341, 733, 295, 551, 13, 51214, 51214, 400, 456, 311, 257, 1379, 7222, 291, 393, 1401, 510, 466, 341, 370, 1219, 6329, 8284, 48041, 1154, 498, 291, 528, 281, 458, 544, 11, 457, 445, 281, 718, 291, 458, 32122, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1783174146123293, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.1294426258245949e-05}, {"id": 126, "seek": 72264, "start": 739.64, "end": 747.64, "text": " And there's a whole article you can read here about this so called circle ellipse problem if you want to know more, but just to let you know inheritance.", "tokens": [50364, 407, 286, 727, 362, 8665, 1884, 257, 3732, 293, 754, 1673, 264, 3732, 47479, 1062, 787, 362, 472, 13075, 11, 597, 300, 311, 1293, 264, 11402, 293, 264, 6681, 11, 286, 483, 584, 11, 777, 3732, 1266, 13, 50764, 50764, 286, 727, 550, 1780, 992, 264, 11402, 281, 732, 293, 586, 309, 311, 572, 2854, 767, 257, 3732, 11, 558, 30, 51014, 51014, 407, 456, 311, 767, 257, 534, 688, 295, 534, 2452, 4598, 466, 341, 733, 295, 551, 13, 51214, 51214, 400, 456, 311, 257, 1379, 7222, 291, 393, 1401, 510, 466, 341, 370, 1219, 6329, 8284, 48041, 1154, 498, 291, 528, 281, 458, 544, 11, 457, 445, 281, 718, 291, 458, 32122, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1783174146123293, "compression_ratio": 1.7604166666666667, "no_speech_prob": 1.1294426258245949e-05}, {"id": 127, "seek": 74764, "start": 747.64, "end": 753.64, "text": " It's not an obvious win because there's some funny things that can happen.", "tokens": [50364, 467, 311, 406, 364, 6322, 1942, 570, 456, 311, 512, 4074, 721, 300, 393, 1051, 13, 50664, 50664, 400, 550, 264, 1036, 4074, 551, 286, 528, 281, 2152, 307, 445, 341, 472, 490, 364, 3071, 7991, 466, 577, 11420, 32122, 393, 1821, 294, 4238, 2144, 13, 51064, 51064, 407, 949, 321, 2825, 466, 577, 291, 382, 257, 11795, 4084, 257, 9595, 541, 3000, 1062, 49152, 2276, 2845, 428, 3089, 516, 666, 364, 13785, 6367, 570, 295, 264, 3687, 295, 577, 32122, 1985, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1159274769925523, "compression_ratio": 1.6639676113360324, "no_speech_prob": 3.393212682567537e-05}, {"id": 128, "seek": 74764, "start": 753.64, "end": 761.64, "text": " And then the last funny thing I want to mention is just this one from an earlier lecture about how implementation inheritance can break in capitalization.", "tokens": [50364, 467, 311, 406, 364, 6322, 1942, 570, 456, 311, 512, 4074, 721, 300, 393, 1051, 13, 50664, 50664, 400, 550, 264, 1036, 4074, 551, 286, 528, 281, 2152, 307, 445, 341, 472, 490, 364, 3071, 7991, 466, 577, 11420, 32122, 393, 1821, 294, 4238, 2144, 13, 51064, 51064, 407, 949, 321, 2825, 466, 577, 291, 382, 257, 11795, 4084, 257, 9595, 541, 3000, 1062, 49152, 2276, 2845, 428, 3089, 516, 666, 364, 13785, 6367, 570, 295, 264, 3687, 295, 577, 32122, 1985, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1159274769925523, "compression_ratio": 1.6639676113360324, "no_speech_prob": 3.393212682567537e-05}, {"id": 129, "seek": 74764, "start": 761.64, "end": 772.64, "text": " So before we talked about how you as a designer creating a verbose dog might inadvertently send your code going into an infinite loop because of the nature of how inheritance works.", "tokens": [50364, 467, 311, 406, 364, 6322, 1942, 570, 456, 311, 512, 4074, 721, 300, 393, 1051, 13, 50664, 50664, 400, 550, 264, 1036, 4074, 551, 286, 528, 281, 2152, 307, 445, 341, 472, 490, 364, 3071, 7991, 466, 577, 11420, 32122, 393, 1821, 294, 4238, 2144, 13, 51064, 51064, 407, 949, 321, 2825, 466, 577, 291, 382, 257, 11795, 4084, 257, 9595, 541, 3000, 1062, 49152, 2276, 2845, 428, 3089, 516, 666, 364, 13785, 6367, 570, 295, 264, 3687, 295, 577, 32122, 1985, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1159274769925523, "compression_ratio": 1.6639676113360324, "no_speech_prob": 3.393212682567537e-05}, {"id": 130, "seek": 77264, "start": 772.64, "end": 781.64, "text": " And so I'm not going to re-explain it here because it's in I think lecture 9, but yeah, so this is another example how inheritance can bite you.", "tokens": [50364, 400, 370, 286, 478, 406, 516, 281, 319, 12, 23040, 491, 309, 510, 570, 309, 311, 294, 286, 519, 7991, 1722, 11, 457, 1338, 11, 370, 341, 307, 1071, 1365, 577, 32122, 393, 7988, 291, 13, 50814, 50814, 407, 1310, 286, 603, 445, 1998, 322, 613, 8378, 466, 32122, 538, 1417, 466, 36602, 5717, 10320, 11, 597, 337, 505, 11, 321, 434, 406, 534, 516, 281, 751, 466, 264, 6329, 8284, 48041, 1154, 420, 466, 341, 588, 709, 11, 457, 286, 519, 257, 534, 1021, 551, 337, 291, 294, 1716, 732, 293, 1780, 14578, 307, 264, 10710, 295, 36602, 5717, 10320, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12285408883724573, "compression_ratio": 1.7345454545454546, "no_speech_prob": 2.771201980067417e-05}, {"id": 131, "seek": 77264, "start": 781.64, "end": 801.64, "text": " So maybe I'll just close on these topics about inheritance by talking about delegation versus extension, which for us, we're not really going to talk about the circle ellipse problem or about this very much, but I think a really important thing for you in project two and later homework is the notion of delegation versus extension.", "tokens": [50364, 400, 370, 286, 478, 406, 516, 281, 319, 12, 23040, 491, 309, 510, 570, 309, 311, 294, 286, 519, 7991, 1722, 11, 457, 1338, 11, 370, 341, 307, 1071, 1365, 577, 32122, 393, 7988, 291, 13, 50814, 50814, 407, 1310, 286, 603, 445, 1998, 322, 613, 8378, 466, 32122, 538, 1417, 466, 36602, 5717, 10320, 11, 597, 337, 505, 11, 321, 434, 406, 534, 516, 281, 751, 466, 264, 6329, 8284, 48041, 1154, 420, 466, 341, 588, 709, 11, 457, 286, 519, 257, 534, 1021, 551, 337, 291, 294, 1716, 732, 293, 1780, 14578, 307, 264, 10710, 295, 36602, 5717, 10320, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12285408883724573, "compression_ratio": 1.7345454545454546, "no_speech_prob": 2.771201980067417e-05}, {"id": 132, "seek": 80164, "start": 801.64, "end": 812.64, "text": " So as one of the key architects of Java puts it in his book Effective Java, which is a great book by the way, if you end up really liking Java, which is by the way, the number one most popular programming language in the world, the moment.", "tokens": [50364, 407, 382, 472, 295, 264, 2141, 30491, 295, 10745, 8137, 309, 294, 702, 1446, 17764, 488, 10745, 11, 597, 307, 257, 869, 1446, 538, 264, 636, 11, 498, 291, 917, 493, 534, 16933, 10745, 11, 597, 307, 538, 264, 636, 11, 264, 1230, 472, 881, 3743, 9410, 2856, 294, 264, 1002, 11, 264, 1623, 13, 50914, 50914, 634, 575, 257, 1326, 721, 281, 584, 13, 51014, 51014, 467, 307, 3273, 281, 764, 32122, 1951, 257, 7372, 689, 264, 1422, 11665, 293, 264, 1687, 11665, 366, 833, 264, 1969, 295, 264, 912, 41504, 11, 264, 912, 561, 11, 436, 458, 1184, 661, 11, 436, 751, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1417382091557214, "compression_ratio": 1.7607843137254902, "no_speech_prob": 1.0555525477684569e-05}, {"id": 133, "seek": 80164, "start": 812.64, "end": 814.64, "text": " He has a few things to say.", "tokens": [50364, 407, 382, 472, 295, 264, 2141, 30491, 295, 10745, 8137, 309, 294, 702, 1446, 17764, 488, 10745, 11, 597, 307, 257, 869, 1446, 538, 264, 636, 11, 498, 291, 917, 493, 534, 16933, 10745, 11, 597, 307, 538, 264, 636, 11, 264, 1230, 472, 881, 3743, 9410, 2856, 294, 264, 1002, 11, 264, 1623, 13, 50914, 50914, 634, 575, 257, 1326, 721, 281, 584, 13, 51014, 51014, 467, 307, 3273, 281, 764, 32122, 1951, 257, 7372, 689, 264, 1422, 11665, 293, 264, 1687, 11665, 366, 833, 264, 1969, 295, 264, 912, 41504, 11, 264, 912, 561, 11, 436, 458, 1184, 661, 11, 436, 751, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1417382091557214, "compression_ratio": 1.7607843137254902, "no_speech_prob": 1.0555525477684569e-05}, {"id": 134, "seek": 80164, "start": 814.64, "end": 823.64, "text": " It is safe to use inheritance within a package where the subclass and the superclass are under the control of the same programmers, the same people, they know each other, they talk.", "tokens": [50364, 407, 382, 472, 295, 264, 2141, 30491, 295, 10745, 8137, 309, 294, 702, 1446, 17764, 488, 10745, 11, 597, 307, 257, 869, 1446, 538, 264, 636, 11, 498, 291, 917, 493, 534, 16933, 10745, 11, 597, 307, 538, 264, 636, 11, 264, 1230, 472, 881, 3743, 9410, 2856, 294, 264, 1002, 11, 264, 1623, 13, 50914, 50914, 634, 575, 257, 1326, 721, 281, 584, 13, 51014, 51014, 467, 307, 3273, 281, 764, 32122, 1951, 257, 7372, 689, 264, 1422, 11665, 293, 264, 1687, 11665, 366, 833, 264, 1969, 295, 264, 912, 41504, 11, 264, 912, 561, 11, 436, 458, 1184, 661, 11, 436, 751, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1417382091557214, "compression_ratio": 1.7607843137254902, "no_speech_prob": 1.0555525477684569e-05}, {"id": 135, "seek": 82364, "start": 823.64, "end": 833.64, "text": " It is safe to extend classes that are specifically designed and documented for extension. So dog, for example, was not designed for extension. It had these funny features here.", "tokens": [50364, 467, 307, 3273, 281, 10101, 5359, 300, 366, 4682, 4761, 293, 23007, 337, 10320, 13, 407, 3000, 11, 337, 1365, 11, 390, 406, 4761, 337, 10320, 13, 467, 632, 613, 4074, 4122, 510, 13, 50864, 50864, 492, 632, 16202, 293, 16202, 867, 11, 457, 11159, 300, 286, 362, 604, 29529, 300, 848, 11, 360, 406, 42321, 16202, 867, 293, 8955, 818, 16202, 11, 721, 486, 352, 2085, 13, 51314, 51314, 407, 498, 257, 1508, 307, 534, 731, 23007, 11, 550, 309, 393, 312, 584, 13, 2908, 11, 9484, 1748, 490, 364, 10547, 9859, 1508, 2108, 257, 7372, 12866, 307, 5795, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11126194713271667, "compression_ratio": 1.7338129496402879, "no_speech_prob": 1.4454778465733398e-05}, {"id": 136, "seek": 82364, "start": 833.64, "end": 842.64, "text": " We had bark and bark many, but nowhere that I have any restriction that said, do not override bark many and dare call bark, things will go wrong.", "tokens": [50364, 467, 307, 3273, 281, 10101, 5359, 300, 366, 4682, 4761, 293, 23007, 337, 10320, 13, 407, 3000, 11, 337, 1365, 11, 390, 406, 4761, 337, 10320, 13, 467, 632, 613, 4074, 4122, 510, 13, 50864, 50864, 492, 632, 16202, 293, 16202, 867, 11, 457, 11159, 300, 286, 362, 604, 29529, 300, 848, 11, 360, 406, 42321, 16202, 867, 293, 8955, 818, 16202, 11, 721, 486, 352, 2085, 13, 51314, 51314, 407, 498, 257, 1508, 307, 534, 731, 23007, 11, 550, 309, 393, 312, 584, 13, 2908, 11, 9484, 1748, 490, 364, 10547, 9859, 1508, 2108, 257, 7372, 12866, 307, 5795, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11126194713271667, "compression_ratio": 1.7338129496402879, "no_speech_prob": 1.4454778465733398e-05}, {"id": 137, "seek": 82364, "start": 842.64, "end": 852.64, "text": " So if a class is really well documented, then it can be say. However, inheriting from an ordinary concrete class across a package boundary is dangerous, right?", "tokens": [50364, 467, 307, 3273, 281, 10101, 5359, 300, 366, 4682, 4761, 293, 23007, 337, 10320, 13, 407, 3000, 11, 337, 1365, 11, 390, 406, 4761, 337, 10320, 13, 467, 632, 613, 4074, 4122, 510, 13, 50864, 50864, 492, 632, 16202, 293, 16202, 867, 11, 457, 11159, 300, 286, 362, 604, 29529, 300, 848, 11, 360, 406, 42321, 16202, 867, 293, 8955, 818, 16202, 11, 721, 486, 352, 2085, 13, 51314, 51314, 407, 498, 257, 1508, 307, 534, 731, 23007, 11, 550, 309, 393, 312, 584, 13, 2908, 11, 9484, 1748, 490, 364, 10547, 9859, 1508, 2108, 257, 7372, 12866, 307, 5795, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11126194713271667, "compression_ratio": 1.7338129496402879, "no_speech_prob": 1.4454778465733398e-05}, {"id": 138, "seek": 85264, "start": 852.64, "end": 875.64, "text": " So when in doubt, if you want to avoid issues like this one, or like this one, I'm going to suggest that you use delegation and sometimes that means you're going to have a funny method where all you do is write when I'm going to call a trivial forwarding method. All it does is it looks like this right here. This is trivial. There's no real intellect at this, nonetheless. This is a great pattern and you shouldn't feel weird doing it.", "tokens": [50364, 407, 562, 294, 6385, 11, 498, 291, 528, 281, 5042, 2663, 411, 341, 472, 11, 420, 411, 341, 472, 11, 286, 478, 516, 281, 3402, 300, 291, 764, 36602, 293, 2171, 300, 1355, 291, 434, 516, 281, 362, 257, 4074, 3170, 689, 439, 291, 360, 307, 2464, 562, 286, 478, 516, 281, 818, 257, 26703, 2128, 278, 3170, 13, 1057, 309, 775, 307, 309, 1542, 411, 341, 558, 510, 13, 639, 307, 26703, 13, 821, 311, 572, 957, 10058, 412, 341, 11, 26756, 13, 639, 307, 257, 869, 5102, 293, 291, 4659, 380, 841, 3657, 884, 309, 13, 51514, 51514, 1033, 11, 370, 456, 311, 512, 286, 1454, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16733217239379883, "compression_ratio": 1.7388059701492538, "no_speech_prob": 1.3473945728037506e-05}, {"id": 139, "seek": 87564, "start": 875.64, "end": 882.64, "text": " So, there's a mawopi.", "tokens": [50364, 407, 11, 456, 311, 257, 463, 86, 404, 72, 13, 50714], "temperature": 0.0, "avg_logprob": -0.7507144487821139, "compression_ratio": 0.7241379310344828, "no_speech_prob": 0.0006008116761222482}], "language": "en"}